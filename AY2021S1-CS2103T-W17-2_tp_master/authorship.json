[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "# Calo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "**UI image coming soon**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Tired of noting down your workouts?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Meet Calo, your friendly workout app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Track your workouts"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Track your calories burnt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Generate portable data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Customised for the CLI lover and fast typer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Try it now!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## License"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "MIT"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "leeweiminsg": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "run {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    enableAssertions \u003d false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    archiveName \u003d \u0027calo.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0027Main\u0027: \u0027tp.src.main.java.Main\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        )"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 10,
      "Nahoyhp": 3,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "We are a group of students taking CS2103T: Software Engineering in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|  | Name | Role | Project |"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|---|---|---|---|"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"https://avatars3.githubusercontent.com/u/40591060?s\u003d400\u0026u\u003d4b5102975b010a42d7115cdb111d622c85ef729c\u0026v\u003d4\" width\u003d\"200px\"\u003e| Eugene Tan| Advisor | [github](https://github.com/eugenetyc) |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/leeweiminsg.png\" width\u003d\"200px\"\u003e|Lee Wei Min| Developer | [github](https://github.com/leeweiminsg) |"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/liu-2001.png\" width\u003d\"200px\"\u003e|Liu Xinyi| Developer | [github](https://github.com/Liu-2001) |"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/nauman-s.png\" width\u003d\"200px\"\u003e|Nauman Sajid| Developer | [github](https://github.com/Nauman-S) |"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/nahoyhp.png\" width\u003d\"200px\"\u003e|Phyo Han| Developer | [github](https://github.com/Nahoyhp/) |"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/royxuzeng.png\" width\u003d\"200px\"\u003e|Xu Zeng| Developer | [github](https://github.com/Royxuzeng) |"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 9,
      "-": 9
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "![Structure of the Storage Component](images/ExerciseStorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "### Aspect: How to archive Data"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "* **Current Choice:** Using Archive Command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Implementation: Have a separate Archive Command to let the User specify the file location."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Pros: The user can specify the location where users want to save the data."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Cons: Error prone. The user need to enter the file location specification which may be difficult for users who are not used to command prompt."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* has a need to manage their workouts"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "**Value proposition**: manage workouts faster than a typical mouse/GUI driven desktop/mobile app"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | add an exercise                | keep track of calories burnt through the day                           |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | have a system that tolerate invalid/incomplete command      |                                                                        |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | data conscious user                        | list down all the exercises for the day       | monitor the calories burned accurately                                   |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | delete an exercise in case I key in wrongly          |  |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* *`    | user                                       | update an exercise             |                 |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* *`    | user                                       | save my data in a file         | import the saved data into the new computer                                                 |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "(For all use cases below, the **System** is the `Calo` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  #### **Use case: add an exercise**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to add an exercise"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo adds the exercise"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Find exercises with a keyword**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to find exercises with a keyword"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo shows a list of exercises which contain the keyword"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    The list is empty \u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Update an exercise**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to update a specific exercise in the list"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo updates the exercise"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. The index is invalid\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Delete an exercise**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "1.  User requests to delete a specific exercise in the list."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo deletes the exercise"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. The index is invalid\u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  #### **Use case: Archive data**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  1.  User requests to archive data to a different file location"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  2.  Calo archives data to the specified location"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. User does not have permission to create file at specified location \u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that file cannot be created at specified file.\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  #### **Use case: List exercises**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*\u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  1.  User requests to list exercises"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  2.  Calo shows a list of exercises"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "2.  Should be able to hold up to 1000 exercise items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "* **Exercise**: an exercise record entered by the user, consisting of exercise name, description, and date (optionally calories)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "### Deleting an exercise"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "1. Deleting an exercise while all exercises are being shown"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   1. Prerequisites: List all exercises using the `list` command. Multiple exercises in the list."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      Expected: No exercise is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 8,
      "Liu-2001": 26,
      "leeweiminsg": 2,
      "Nahoyhp": 44,
      "Nauman-S": 1,
      "-": 310
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Calo is a desktop app that is **designed for keeping track of calories burnt throughout the day**. It is optimized for use via a **Command Line Interface (CLI)** while still having Graphical User Interface (GUI). If you are a skilled typer, you can carry out various tasks such as adding new exercises and checking records for previous days much faster than the traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "2. Download the latest `Calo.jar`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your Calo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. For the details of each command, refer to the Features below."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  e.g. in `add e/EXERCISE c/CALORIES`, `NAME` is a parameter which can be used as `add e/Push Up c/1000`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  e.g `e/EXERCISE c/CALORIES [at/DATE]` can be used as `e/Push Up c/1000 at/29-09-2020` or as `e/Push Up c/1000`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  e.g. if the command specifies `e/EXERCISE c/CALORIES`, `c/CALORIES e/EXERCISE` is also acceptable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### Add exercises : `add`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Add an exercise to the application, with calories burnt (optional)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Format: `add e/EXERCISE d/DESCRIPTION at/DATE [c/CALORIES]`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- The format for the DATE should be in the form of DD-MM-YYYY."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- `add e/Push up d/10 at/14-09-2020 c/30`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- `add e/Sit up d/10 at/14-09-2020`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "#### Update exercises : `update`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Update an existing exercise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Format: `update INDEX [e/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Edits the workout at the specified `INDEX`. The index refers to the index number shown in the displayed workout list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- Existing values of the exercise will be updated to the input values."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- `update 1 e/Push up d/30 at/09-07-2020 c/260` Updates the exercise, the description, the date and the calories burnt of the 1st exercise to be `push up`, `30`,  `07-09-2020`, `260` respectively."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "#### Delete : `delete`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Deletes an exercise that a user has previously added."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- Deletes an exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The index refers to the index number shown in the displayed workout list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The index must be a positive integer: 1, 2, 3, …​"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- `delete 2` Deletes the second exercise in the displayed list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "#### List: `list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Lists out all the exercises that the user has keyed in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "#### Find exercises: `find`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Finds exercises whose name contain any of the given keywords."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "- The search is case-insensitive. e.g Squats will match squats."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "- find Push up"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "#### Save"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "The application will save the data automatically to the default file path after any command that changes the data. There is no need to save the data manually."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "#### Archive : `archive`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Archive the data into a different file location."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Format: `archive FILE_LOCATION`\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "The file location takes reference from the home folder that the .jar file is located at."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Examples:\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "archive data\\file_name.txt If the file is located at C:\\Users\\Desktop\\App, the archived file will be saved to  C:\\Users\\Desktop\\App\\data\\file_name.txt.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Q*: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*A*: Transfer the file “data” that is contained in the same file as your .jar file from your old computer to your new computer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Q*: How to load my archived file?\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*A*: For now, you can delete the `entry.txt` file in the `data` folder and rename the archived file of your choices to `entry.txt`. In subsequent updates, we will introduce a command to load archived files via Command Line Interface."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| Action     | Format, Examples                                                                                                                                                      |"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Add*    | `add e/EXERCISE d/DESCRIPTION at/DATE [c/CALORIES]` \u003cbr\u003e e.g. `add e/Push up d/10 at/14-09-2020 c/30` |"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Delete* | `delete INDEX`\u003cbr\u003e e.g., `delete 2`                                                                                                                                   |"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Update*   | `update INDEX [e/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES]​`\u003cbr\u003e e.g.,`update 1 e/Push up d/30 at/09-07-2020 c/260`                                           |"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Find*  | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`                                                                                                            |"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *List*   | `list`                                                                                                                                                                |"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Archive*   | `archive FILE_LOCATION`    \u003cbr\u003e e.g.,`archive data\\file_name.txt`                                                                                                                                                                    |"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 8,
      "Liu-2001": 6,
      "leeweiminsg": 16,
      "Nahoyhp": 25,
      "Nauman-S": 9,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface StorageForExercise \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface ExerciseBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class StorageManagerForExercise"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class ExerciseBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise .left.|\u003e StorageForExercise"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise o--\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonExerciseBookStorage .left.|\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonExerciseBookStorage .down.\u003e JsonSerializableExerciseBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonSerializableExerciseBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 24
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Class CaloriesGraph"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "MainWindow *-down-\u003e CaloriesGraph"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "CaloriesGraph ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ExerciseMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicManagerForExercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.ExerciseBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageManagerForExercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.ui.ExerciseUiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseMainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected LogicForExercise logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected StorageForExercise storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected ExerciseModel model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ExerciseBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBookStorage exerciseBookStorage \u003d new JsonExerciseBookStorage(userPrefs.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logic \u003d new LogicManagerForExercise(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ui \u003d new ExerciseUiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseModel initModelManager(StorageForExercise storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Optional\u003cReadOnlyExerciseBook\u003e exerciseBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ReadOnlyExerciseBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBookOptional \u003d storage.readExerciseBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (!exerciseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d exerciseBookOptional.orElseGet(SampleDataUtil::getSampleExerciseBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new ExerciseModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"Starting ExerciseBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Application.launch(ExerciseMainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "Nahoyhp": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/TestDriver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getExerciseTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class TestDriver {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected StorageForExercise storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Driver to test out JsonExerciseBook and its related classes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            JsonExerciseBookStorage jStorage \u003d new JsonExerciseBookStorage("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    new File(\"testingForExercise.json\").toPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ExerciseBook exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.resetData(jStorage.readExerciseBook().get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            ArrayList\u003cMuscle\u003e musclesWorked \u003d new ArrayList\u003cMuscle\u003e(Arrays.asList(Muscle.CHEST, Muscle.LEGS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(new Exercise(new Name(\"Hello\"), new Description(\"Test 1\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"10-10-2020\"), new Calories(\"101\"), musclesWorked, getExerciseTagSet(\"gym\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(new Exercise(new Name(\"Hello1\"), new Description(\"Test 2\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"10-10-2021\"), new Calories(\"102\"), musclesWorked, getExerciseTagSet(\"gym\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(new Exercise(new Name(\"Hello2\"), new Description(\"Test 3\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"10-10-2022\"), new Calories(\"103\"), musclesWorked, getExerciseTagSet(\"home\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(new Exercise(new Name(\"Hello3\"), new Description(\"Test 4\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"10-10-2023\"), new Calories(\"104\"), musclesWorked, getExerciseTagSet(\"home\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(new Exercise(new Name(\"Hello4\"), new Description(\"Test 5\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"10-10-2024\"), new Calories(\"105\"), musclesWorked, getExerciseTagSet(\"home, gym\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            jStorage.saveExerciseBook(exerciseBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            System.out.println(exerciseBook.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            System.out.println(err.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 13,
      "Nahoyhp": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Calo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "Nauman-S": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface LogicForExercise {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Nahoyhp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManagerForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.ExerciseBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class LogicManagerForExercise implements LogicForExercise {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseModel model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final StorageForExercise storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBookParser exerciseBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public LogicManagerForExercise(ExerciseModel model, StorageForExercise storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBookParser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CommandForExercise command \u003d exerciseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (command instanceof ArchiveCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ArchiveCommand cmd \u003d (ArchiveCommand) command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            cmd.setStorage(storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.saveExerciseBook(model.getExerciseBook());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getExerciseBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getCaloriesByDay();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nahoyhp": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Adds an exercise to Calo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class AddCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to Calo. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_MUSCLES + \"MUSCLES_WORKED] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_NAME + \"running \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"10 mins \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DATE + \"31-12-2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_CALORIES + \"100 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLES + \"chest,arm \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"home \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"gym\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public AddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        toAdd \u003d exercise;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        model.addExercise(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 23,
      "leeweiminsg": 7,
      "Nahoyhp": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExerciseFromTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddExerciseFromTemplate extends CommandForExercise {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to Calo using template. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_TEMP + \"TEMPLATE NAME \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_TEMP + \"PUSH_UP \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DATE + \"31-12-2020 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"100\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddExerciseFromTemplate(Exercise toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.addExercise(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTemplateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddTemplateCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an exercise template. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_NAME + \"running \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"10 mins \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New template created: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private final Template toCreate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddTemplateCommand(Template toCreate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.toCreate \u003d toCreate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        TemplateList.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (TemplateList.checkEqual(toCreate)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new CommandException(\"The template already exists.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.addTemplate(toCreate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template.writeToFile(TemplateList.getList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.LogicManagerForExercise.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ArchiveCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": To archive current Progress to a separate file.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + PREFIX_PATH + \"File Location\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + PREFIX_PATH + \"data\\\\archive\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File has been archived to the specified location\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Path specifiedLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StorageForExercise storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArchiveCommand(Path fileLocation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.specifiedLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Set the storage which contains the content of the apps."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param storage The storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setStorage(StorageForExercise storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.storage.saveExerciseBook(model.getExerciseBook(), specifiedLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 specifiedLocation.equals(((ArchiveCommand) other).specifiedLocation));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public abstract class CommandForExercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public abstract CommandResult execute(ExerciseModel model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Nahoyhp": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 6,
      "leeweiminsg": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * Deletes an exercise identified using it\u0027s displayed index from the Calo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class DeleteCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 11,
      "Nahoyhp": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class FindCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises whose details are matched to the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"given ones (case-sensitive) and whose names contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Parameters: \" + \"[\" + PREFIX_NAME + \"EXERCISE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_KEYWORD + \"KEYWORDS...]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_NAME + \"Push Up\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"30 times\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DATE + \"10-10-2020\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_CALORIES + \"100\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"(\" + PREFIX_KEYWORD + \"up)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final PropertiesMatchPredicateForExercise predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public FindCommand(PropertiesMatchPredicateForExercise predicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                String.format(Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 22,
      "Nauman-S": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.model.ExerciseModel.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class ListCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecallCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.TheMostRecentDatePredicateForExercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class RecallCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the most recent exercise \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"with the specified name\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Parameters: NAME\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" push up\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d most recent exercise found\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ObservableList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates an RecallCommand to recall exercise with the specified name {@code Name}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public RecallCommand(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        filteredExercises \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for (Exercise exercise : filteredExercises) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            if (name.equals(exercise.getName())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d exercise.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d date.isBefore(exercise.getDate())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                            ? exercise.getDate()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                            : date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        model.updateFilteredExerciseList(new TheMostRecentDatePredicateForExercise(name, date));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof RecallCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 name.equals(((RecallCommand) other).name)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.model.ExerciseModel.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Edits the details of an existing exercise in the exercise book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class UpdateExerciseCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"by the index number used in the displayed exercise list.\\n \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"EXERCISE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_MUSCLES + \"MUSCLES_WORKED] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_NAME + \"Push up \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_DESCRIPTION + \"30 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_DATE + \"09-07-2020 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_CALORIES + \"260 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLES + \"chest,arm \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"home \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"gym\";;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param index                  of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public UpdateExerciseCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.editExerciseDescriptor \u003d new UpdateExerciseCommand.EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                 UpdateExerciseCommand.EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Name updatedName \u003d editExerciseDescriptor.getName().orElse(exerciseToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Description updatedDescription \u003d editExerciseDescriptor.getDescription()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .orElse(exerciseToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date updatedDate \u003d editExerciseDescriptor.getDate().orElse(exerciseToEdit.getDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories updatedCalories \u003d editExerciseDescriptor.getCalories()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                    .orElse(exerciseToEdit.getCalories().orElse(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e updatedMusclesWorked \u003d editExerciseDescriptor.getMusclesWorked()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                .orElse(exerciseToEdit.getMusclesWorked().orElse(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e updatedTags \u003d editExerciseDescriptor.getTags().orElse(exerciseToEdit.getExerciseTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(updatedName, updatedDescription, updatedDate,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                            updatedCalories, updatedMusclesWorked, updatedTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!(other instanceof UpdateExerciseCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand e \u003d (UpdateExerciseCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * corresponding field value of the exercise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // identity field"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // data field"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // Functional dependencies: see Exercise class"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private List\u003cMuscle\u003e musclesWorked;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Set\u003cExerciseTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        public EditExerciseDescriptor() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public EditExerciseDescriptor(UpdateExerciseCommand.EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setMusclesWorked(toCopy.musclesWorked);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date, description, calories, musclesWorked, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setMusclesWorked(List\u003cMuscle\u003e musclesWorked) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.musclesWorked \u003d musclesWorked;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cList\u003cMuscle\u003e\u003e getMusclesWorked() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(musclesWorked);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setTags(Set\u003cExerciseTag\u003e tags) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cSet\u003cExerciseTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (!(other instanceof UpdateExerciseCommand.EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            UpdateExerciseCommand.EditExerciseDescriptor e \u003d (UpdateExerciseCommand.EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "leeweiminsg": 252,
      "Nahoyhp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddCommandParser implements ExerciseParser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                PREFIX_DATE, PREFIX_CALORIES, PREFIX_MUSCLES, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).orElse(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorked \u003d ParserUtil.parseMusclesWorked(argMultimap.getValue(PREFIX_MUSCLES).orElse(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, description, date, calories, musclesWorked, tagList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new AddCommand(exercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 11,
      "leeweiminsg": 13,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExerciseFromTemplateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddExerciseFromTemplateParser implements ExerciseParser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExerciseFromTemplateCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an AddExerciseFromTemplateCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEMP, PREFIX_DATE, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TEMP, PREFIX_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    seedu.address.logic.commands.AddExerciseFromTemplate.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name templateName \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_TEMP).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d TemplateList.getTemp(templateName.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (template \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(\"The template does not exist.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(template.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(template.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).orElse(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorked \u003d ParserUtil.parseMusclesWorked(argMultimap.getValue(PREFIX_MUSCLES).orElse(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, description, date, calories, musclesWorked, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new AddCommand(exercise);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 64,
      "leeweiminsg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTemplateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddTemplateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddTemplateCommandParser implements ExerciseParser\u003cAddTemplateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an AddTemplateCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddTemplateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                PREFIX_MUSCLES, PREFIX_TAG)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    AddTemplateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorked \u003d ParserUtil.parseMusclesWorked(argMultimap.getValue(PREFIX_MUSCLES).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Template template \u003d new Template(name.fullName, description.value,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        parseInt(calories.value), musclesWorked, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new AddTemplateCommand(template);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an template object for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public Template parseTemp(String args) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                PREFIX_MUSCLES, PREFIX_TAG)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    AddTemplateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorked \u003d ParserUtil.parseMusclesWorked(argMultimap.getValue(PREFIX_MUSCLES).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Template template \u003d new Template(name.fullName, description.value,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                parseInt(calories.value), musclesWorked, tagList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 71,
      "leeweiminsg": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            //AddCommand is now implemented for Calo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            //return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            // return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ArchiveCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PATH).isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringPath \u003d argMultimap.getValue(PREFIX_PATH).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!stringPath.endsWith(\"json\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(\"Specified location should ends with \u0027.json\u0027.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"Example: parentDirectory/filename.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path path \u003d ParserUtil.parsePath(stringPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new ArchiveCommand(path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nahoyhp": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    //Calo prefix"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final Prefix PREFIX_TEMP \u003d new Prefix(\"temp/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Prefix PREFIX_MUSCLES \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    //AB3 prefix"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 7,
      "leeweiminsg": 3,
      "Nahoyhp": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class DeleteCommandParser implements ExerciseParser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddTemplateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.RecallCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CommandForExercise parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        case seedu.address.logic.commands.AddExerciseFromTemplate.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            return new AddExerciseFromTemplateParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        case AddTemplateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            return new AddTemplateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        case UpdateExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new UpdateExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        case RecallCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new RecallCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 7,
      "Liu-2001": 7,
      "leeweiminsg": 3,
      "Nahoyhp": 44,
      "Nauman-S": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * T should extends Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public interface ExerciseParser\u003cT extends CommandForExercise\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class FindCommandParser implements ExerciseParser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String[] keywords \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_CALORIES, PREFIX_KEYWORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_KEYWORD).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            keywords \u003d argMultimap.getValue(PREFIX_KEYWORD).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new FindCommand(new PropertiesMatchPredicateForExercise(name, description, date, calories,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                keywords \u003d\u003d null ? null : Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 42,
      "Nauman-S": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * T should extends Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nahoyhp": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    //Calo parse"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static seedu.address.model.exercise.Name parseExerciseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!seedu.address.model.exercise.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(seedu.address.model.exercise.Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new seedu.address.model.exercise.Name(trimmedName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String description} into a {@code description}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Description} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Date} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new Date(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String calories} into a {@code Calories}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Calories} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new Calories(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Calories(trimmedCalories);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses a {@code String musclesWorked} into {@code MusclesWorked}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if the given {@code musclesWorked} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static List\u003cMuscle\u003e parseMusclesWorked(String musclesWorked) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (musclesWorked \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String trimmedMusclesWorked \u003d musclesWorked.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!Muscle.isValidMusclesWorked(trimmedMusclesWorked)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Muscle.stringToMuscleList(musclesWorked);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses a {@code String tag} into a {@code ExerciseTag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static ExerciseTag parseExerciseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!ExerciseTag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new ExerciseTag(trimmedTag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cExerciseTag\u003e}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cExerciseTag\u003e parseExerciseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cExerciseTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            tagSet.add(parseExerciseTag(tagName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    //AB3 parse"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static seedu.address.model.person.Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!seedu.address.model.person.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(seedu.address.model.person.Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new seedu.address.model.person.Name(trimmedName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Parse a {@code String pathLocation} into a {@code Path}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws ParseException if the given {@code pathLocation} is invalid."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static Path parsePath(String pathLocation) throws ParseException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(pathLocation);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String trimPathDirectory \u003d pathLocation.trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (hasFileWithSameName(trimPathDirectory)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(\"A file with same name exists. Please key in a different name\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!hasRightToCreate(trimPathDirectory)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(\"You don\u0027t have right to create at the specified location\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return Paths.get(trimPathDirectory);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static boolean hasFileWithSameName(String filePath) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        File targetLocation \u003d new File(filePath);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return targetLocation.exists();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static boolean hasRightToCreate(String filePath) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //return new File(filePath).canWrite();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 68,
      "leeweiminsg": 57,
      "Nahoyhp": 33,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecallCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.RecallCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class RecallCommandParser implements ExerciseParser\u003cRecallCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public RecallCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new RecallCommand(args.substring(1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Parses input arguments and creates a new UpdateExerciseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class UpdateExerciseCommandParser implements ExerciseParser\u003cUpdateExerciseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateExerciseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * and returns an UpdateExerciseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public UpdateExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        PREFIX_DATE, PREFIX_CALORIES, PREFIX_MUSCLES, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    UpdateExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor editExerciseDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setName(ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setDescription("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MUSCLES).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setMusclesWorked("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                    ParserUtil.parseMusclesWorked(argMultimap.getValue(PREFIX_MUSCLES).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExerciseDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new UpdateExerciseCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cExerciseTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * {@code Set\u003cExerciseTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Optional\u003cSet\u003cExerciseTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Optional.of(ParserUtil.parseExerciseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBook implements ReadOnlyExerciseBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public ExerciseBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook(ReadOnlyExerciseBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData(ReadOnlyExerciseBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setExercises(newData.getExerciseList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void addExercise(Exercise p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.updateExercise(target, editedExercise);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void removeExercise(Exercise key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exercises.asUnmodifiableObservableList().size() + \" exercises\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exercises.getCaloriesByDay();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof ExerciseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 exercises.equals(((ExerciseBook) other).exercises));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exercises.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "Nahoyhp": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ExerciseModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the HashMap that contains the amount of calories burnt per day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExerciseBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExerciseBook(ReadOnlyExerciseBook addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ReadOnlyExerciseBook getExerciseBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if a Exercise with the same identity as {@code Exercise} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The exercise must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code exercise} must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    void addTemplate(Template template);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the given Exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The Exercise identity of {@code editedExercise} must not be the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * same as another existing Exercise in the exercise book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns an unmodifiable view of the filtered Exercise list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Updates the filter of the filtered Exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Save to the specified File"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void archive(Path path);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 13,
      "Nahoyhp": 95,
      "Nauman-S": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseModelManager implements ExerciseModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBook exerciseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Initializes a ExerciseModelManager with the given exerciseBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseModelManager(ReadOnlyExerciseBook exerciseBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + exerciseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook \u003d new ExerciseBook(exerciseBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filteredExercises \u003d new FilteredList\u003c\u003e(this.exerciseBook.getExerciseList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this(new ExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //To change later"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exerciseBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setExerciseBookFilePath(exerciseBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBook(ReadOnlyExerciseBook exerciseBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook.resetData(exerciseBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.hasExercise(exercise);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook.removeExercise(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        TemplateList.addTemplate(template);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void archive(Path path) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        System.out.println(\"Archived\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code versionedExerciseBook}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.getCaloriesByDay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!(obj instanceof ExerciseModelManager)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModelManager other \u003d (ExerciseModelManager) obj;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.equals(other.exerciseBook)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 filteredExercises.equals(other.filteredExercises);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 8,
      "Liu-2001": 1,
      "Nahoyhp": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 10,
      "Nauman-S": 2,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ReadOnlyExerciseBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path exerciseBookFilePath \u003d Paths.get(\"data\", \"testing.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.exerciseBookFilePath \u003d exerciseBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Nahoyhp": 9,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Calories.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \"Calories should be at least 1 digit long, or must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param calories A valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Calories(String calories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            value \u003d calories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Calories) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 42,
      "leeweiminsg": 5,
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \"Dates should be in the format of DD-MM-YYYY\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // name collision with Date class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private java.util.Date actualDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param date A valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            actualDate \u003d new java.util.Date();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d dateFormat.format(actualDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                actualDate \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                // actually ParseException will never be thrown because we already check if the input is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                actualDate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            timeFormatter.parse(test);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return actualDate.before(other.actualDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public java.util.Date getActualDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return actualDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Date // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 57,
      "leeweiminsg": 15,
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description A valid name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return !test.equals(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Description // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 34,
      "leeweiminsg": 3,
      "Nahoyhp": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents an exercise in the exercise book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // FDs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Name -\u003e musclesWorked, calories (hence left out in equality checks)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final List\u003cMuscle\u003e musclesWorked;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Set\u003cExerciseTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Every field except for calories must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Exercise(Name name, Description description, Date date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    Calories calories, List\u003cMuscle\u003e musclesWorked, Set\u003cExerciseTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireAllNonNull(name, description, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.musclesWorked \u003d musclesWorked;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String getCaloriesDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!getCalories().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return \"None\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return getCalories().get().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Optional\u003cList\u003cMuscle\u003e\u003e getMusclesWorked() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Optional.ofNullable(musclesWorked);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String getMusclesWorkedDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!getMusclesWorked().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Muscle.muscleListToString(getMusclesWorked().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Set\u003cExerciseTag\u003e getExerciseTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Objects.hash(name, description, date, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(getCalories())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(\" Muscles worked:\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(getMusclesWorkedDescription())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        getExerciseTags().forEach(builder::append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 otherExercise.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 otherExercise.getDate().equals(getDate())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseTags().equals(getExerciseTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns true if both exercises of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return equals(otherExercise);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 29,
      "leeweiminsg": 66,
      "Nahoyhp": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents a Tag in the exercise book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                || (other instanceof ExerciseTag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 tagName.equals(((ExerciseTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Muscle.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents the exercise\u0027s muscles worked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Based on major muscle groups."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public enum Muscle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    SHOULDERS(\"shoulder\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    CHEST(\"chest\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    ARMS(\"arm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    BACK(\"back\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    ABDOMINALS(\"ab\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    LEGS(\"leg\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Map\u003cString, Muscle\u003e ENUM_MAP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    Muscle(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Build an immutable map of String name to enum pairs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Any Map impl can be used."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Map\u003cString, Muscle\u003e map \u003d new HashMap\u003cString, Muscle\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (Muscle muscle : Muscle.values()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            map.put(muscle.getName(), muscle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ENUM_MAP \u003d Collections.unmodifiableMap(map);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        MESSAGE_CONSTRAINTS \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \"Muscles worked should be in the following format: m/MUSCLE_1,MUSCLE_2,...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + \"Muscle names must belong to one of the following:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + \"%s\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + \"No whitespaces between commas!\", muscleListToString(Arrays.asList(Muscle.values())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Muscle get(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return ENUM_MAP.get(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns true if a given string is a valid input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static boolean isValidMusclesWorked(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String[] musclesWorkedArr \u003d test.split(DELIMITER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (String muscleStr: musclesWorkedArr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (!ENUM_MAP.containsKey(muscleStr)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Utility method to convert string representation of muscles worked to list (for JsonAdaptedExercise)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static List\u003cMuscle\u003e stringToMuscleList(String musclesWorked) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String[] musclesWorkedArr \u003d musclesWorked.split(DELIMITER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorkedLst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (String muscleStr: musclesWorkedArr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            Muscle muscle \u003d Muscle.get(muscleStr);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            musclesWorkedLst.add(muscle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return musclesWorkedLst;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Utility method to convert list of muscles worked to its string representation (for JsonAdaptedExercise)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String muscleListToString(List\u003cMuscle\u003e musclesWorked) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return musclesWorked.stream().map(muscle -\u003e muscle.toString())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.joining(DELIMITER));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents the Exercise\u0027s name in the exercise book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 1,
      "Nahoyhp": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/NameContainsKeywordsPredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class NameContainsKeywordsPredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public NameContainsKeywordsPredicateForExercise(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(exercise.getName().fullName, keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicateForExercise // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicateForExercise) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/PropertiesMatchPredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class PropertiesMatchPredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a predicate to find exercises with matched properties."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public PropertiesMatchPredicateForExercise(Name name, Description description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                               Date date, Calories calories, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (name !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d name.equals(exercise.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (description.equals(exercise.getDescription()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (date.equals(exercise.getDate()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (calories !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (calories.equals(exercise.getCalories()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (keywords !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 new NameContainsKeywordsPredicateForExercise(keywords).test(exercise);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } else if (other instanceof PropertiesMatchPredicateForExercise) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            PropertiesMatchPredicateForExercise predicate \u003d (PropertiesMatchPredicateForExercise) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return (name \u003d\u003d predicate.name || name.equals(predicate.name)) // name is null or names are equal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (description \u003d\u003d predicate.description || description.equals(predicate.description))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (date \u003d\u003d predicate.date || date.equals(predicate.date))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (calories \u003d\u003d predicate.calories || calories.equals(predicate.calories))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (keywords \u003d\u003d predicate.keywords || keywords.equals(predicate.keywords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Template.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class Template {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private Integer calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private List\u003cMuscle\u003e musclesWorked;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cExerciseTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Template constructor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * All fields must be non-null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param name        name of the template"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param description description of the template"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param calories    calories of the template"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param musclesWorked muscles worked"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param tags tags"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Template(String name, String description, Integer calories,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    List\u003cMuscle\u003e musclesWorked, Set\u003cExerciseTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireAllNonNull(name, description, calories, musclesWorked, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.musclesWorked \u003d musclesWorked;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public Integer getCalories() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public List\u003cMuscle\u003e getMusclesWorked() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return musclesWorked;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Set\u003cExerciseTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setCalories(Integer calories) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * toString method of the template class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @return the string representation of the template"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return \"Template{\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + \"name:\u0027\" + name + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + \", description:\u0027\" + description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + \u0027\\\u0027\u0027 + \", calories:\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + calories + \u0027}\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String parseToArgument() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return \"n/\" + getName() + \" d/\" + getDescription() + \" c/\" + getCalories();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Write the template list to the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param lists template list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void writeToFile(List\u003cTemplate\u003e lists) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/template.txt\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c lists.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            Template template \u003d lists.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            textToAdd \u003d textToAdd + template.parseToArgument() + System.lineSeparator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public boolean equals(Object toCreate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d (Template) toCreate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return this.getName().equals(template.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 89,
      "leeweiminsg": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/TemplateList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.AddTemplateCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class TemplateList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static ArrayList\u003cTemplate\u003e list \u003d new ArrayList\u003cTemplate\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static List\u003cTemplate\u003e getList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static Template getTemp(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            if (list.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                return list.get(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void addTemplate(Template template) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        list.add(template);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Load the template list from the file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void load() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String filePath \u003d \"data/template.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                readTask(f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Read from the template file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param f file to be read from"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void readTask(File f) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        AddTemplateCommandParser parser \u003d new AddTemplateCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                String string \u003d s.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                list.add(parser.parseTemp(\" \" + string));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Check whether the given template is equal to any of the template in the list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param template template to check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @return true if the template is equal to some template in the list, false otherwise"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static boolean checkEqual(Template template) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            if (template.equals(list.get(i))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/TheMostRecentDatePredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class TheMostRecentDatePredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a predicate to look for exercises with specified name and date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TheMostRecentDatePredicateForExercise(Name name, Date date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (name \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return name.equals(exercise.getName()) \u0026\u0026 date.equals(exercise.getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * An exercise is considered unique by comparing using"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * {@code Exercise#isSameExercise(Exercise)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * exercises uses Exercise#isSameExercise(Exercise) for equality so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * as to ensure that the exercise being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * unique in terms of identity in the UniqueExerciseList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * However, the removal of an exercise uses Exercise#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * as to ensure that the exercise with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HashMap\u003cString, Integer\u003e caloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the HashMap that contains the amount of calories burnt per day."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return caloriesByDay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Adds an exercise to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void updateExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        minusCaloriesForDay(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(editedExercise);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        minusCaloriesForDay(toRemove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay \u003d replacement.getCaloriesByDay();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        calculateExercise(exercises);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void calculateExercise(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        HashMap\u003cString, Integer\u003e newCaloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise e: exercises) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            addCaloriesForDay(e, newCaloriesByDay);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay \u003d newCaloriesByDay;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void addCaloriesForDay(Exercise newEntry) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(newEntry, caloriesByDay);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void addCaloriesForDay(Exercise newEntry, HashMap\u003cString, Integer\u003e currentCaloriesByDay) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringDate \u003d newEntry.getDate().value;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        int intCalories \u003d newEntry.getCalories().isPresent() ? Integer.parseInt(newEntry.getCalories().get().value) : 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (currentCaloriesByDay.containsKey(stringDate)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Integer newCalories \u003d currentCaloriesByDay.get(stringDate) + intCalories;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            currentCaloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            currentCaloriesByDay.put(stringDate, intCalories);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void minusCaloriesForDay(Exercise oldEntry) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringDate \u003d oldEntry.getDate().value;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        int intCalories \u003d oldEntry.getCalories().isPresent() ? Integer.parseInt(oldEntry.getCalories().get().value) : 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert caloriesByDay.containsKey(stringDate) : \"Input for minusCaloriesForDay() is wrong\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Integer newCalories \u003d caloriesByDay.get(stringDate) - intCalories;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 22,
      "leeweiminsg": 24,
      "Nahoyhp": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"family\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cExerciseTag\u003e getExerciseTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(ExerciseTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static Exercise[] getSampleExercises() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ArrayList\u003cMuscle\u003e musclesWorked \u003d new ArrayList\u003cMuscle\u003e(Arrays.asList(Muscle.CHEST, Muscle.LEGS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new Exercise[]{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Push Up\"), new Description(\"Did 52 within 60 seconds\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"01-10-2020\"), new Calories(\"100\"), musclesWorked, getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Sit Up\"), new Description(\"Did 50\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"01-10-2020\"), new Calories(\"120\"), musclesWorked, getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"2 4km\"), new Description(\"11:30\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"04-10-2020\"), new Calories(\"100\"), musclesWorked, getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Pull Up\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Description(\"20 with Added Weight: 5 kg \"), new Date(\"05-10-2020\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Calories(\"100\"), musclesWorked, getExerciseTagSet(\"gym\"))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static ReadOnlyExerciseBook getSampleExerciseBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook eb \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise e : getSampleExercises()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            eb.addExercise(e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 18,
      "Nahoyhp": 22,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExerciseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ExerciseBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns ExerciseBook data as a {@link ReadOnlyExerciseBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see #getExerciseBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Saves the given {@link ReadOnlyExerciseBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param exerciseBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see #saveExerciseBook(ReadOnlyExerciseBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Nahoyhp": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final String musclesWorked;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final List\u003cJsonAdaptedExerciseTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given person details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"email\") String date, @JsonProperty(\"address\") String calories,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"musclesWorked\") String musclesWorked,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedExerciseTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.musclesWorked \u003d musclesWorked;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts a given {@code JsonAdaptedExercise} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories \u003d source.getCalories().isPresent() ? source.getCalories().get().value : \"None\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        musclesWorked \u003d source.getMusclesWorkedDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tagged.addAll(source.getExerciseTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(JsonAdaptedExerciseTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final List\u003cExerciseTag\u003e exerciseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (JsonAdaptedExerciseTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            exerciseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Calories modelCalories;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            modelCalories \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cMuscle\u003e musclesWorkedLst;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (musclesWorked \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            musclesWorkedLst \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else if (!Muscle.isValidMusclesWorked(musclesWorked)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            musclesWorkedLst \u003d Muscle.stringToMuscleList(musclesWorked);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cExerciseTag\u003e modelTags \u003d new HashSet\u003c\u003e(exerciseTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(modelName, modelDescription, modelDate, modelCalories, musclesWorkedLst, modelTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 51,
      "Nahoyhp": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExerciseTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Jackson-friendly version of {@link ExerciseTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "class JsonAdaptedExerciseTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedExerciseTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedExerciseTag(ExerciseTag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseTag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!ExerciseTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new ExerciseTag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExerciseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A class to access ExerciseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonExerciseBookStorage implements ExerciseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExerciseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonExerciseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return readExerciseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Similar to {@link #readExerciseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Optional\u003cJsonSerializableExerciseBook\u003e jsonExerciseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                filePath, JsonSerializableExerciseBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!jsonExerciseBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return Optional.of(jsonExerciseBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        saveExerciseBook(exerciseBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Similar to {@link #saveExerciseBook(ReadOnlyExerciseBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exerciseBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExerciseBook(exerciseBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * An Immutable ExerciseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "@JsonRootName(value \u003d \"exercisebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class JsonSerializableExerciseBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"Exercise list contains duplicate exercise(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code JsonSerializableExerciseBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonSerializableExerciseBook(@JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts a given {@code ReadOnlyExerciseBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExerciseBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonSerializableExerciseBook(ReadOnlyExerciseBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts this Exercise book into the model\u0027s {@code ExerciseBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (JsonAdaptedExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (exerciseBook.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "Nahoyhp": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonUserPrefsStorage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filePath \u003d new File(\"preferences.json\").toPath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nahoyhp": 5,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface StorageForExercise extends ExerciseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManagerForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class StorageManagerForExercise implements StorageForExercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseBookStorage exerciseBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public StorageManagerForExercise(ExerciseBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookStorage.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return readExerciseBook(exerciseBookStorage.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookStorage.readExerciseBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        saveExerciseBook(exerciseBook, exerciseBookStorage.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBookStorage.saveExerciseBook(addressBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CaloriesGraph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.XYChart.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.XYChart.Series;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class CaloriesGraph extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final int DAY_TO_DISPLAY \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"CaloriesGraph.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HashMap\u003cString, Integer\u003e dayCalories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Pane pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code CaloriesGraph} with the given {@code HashMap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CaloriesGraph(HashMap\u003cString, Integer\u003e dayCalories) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.dayCalories \u003d dayCalories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        generateGraph();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Generates the graph based on this HashMap that is assigned during initialisation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void generateGraph() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        LineChart\u003cString, Number\u003e lineChart \u003d new LineChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Series\u003cString, Number\u003e series \u003d new Series\u003cString, Number\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] dates \u003d generatePastDates();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Integer calories;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c DAY_TO_DISPLAY; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //Get X,Y cordinates for a point which corresponds to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //the date, and the amount of calories burnt on that date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            date \u003d dates[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            calories \u003d dayCalories.get(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (Objects.isNull(calories)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                calories \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            series.getData().add(new Data(date, calories));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        lineChart.getData().add(series);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        pane.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        pane.getChildren().add(lineChart);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String[] generatePastDates() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] dates \u003d new String[DAY_TO_DISPLAY];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c DAY_TO_DISPLAY; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //the dates should be in the order of earlies to latest"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            dates[i] \u003d today.minus(Period.ofDays(DAY_TO_DISPLAY - 1 - i)).format(formatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Label muscles;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name.setText(exercise.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date.setText(exercise.getDate().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description.setText(exercise.getDescription().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories.setText(exercise.getCalories().isPresent() ? exercise.getCalories().get().value : \"None\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        muscles.setText(exercise.getMusclesWorkedDescription() \u003d\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                ? \"None\" : exercise.getMusclesWorkedDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getExerciseTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 13,
      "Nahoyhp": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseUiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseUiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private MainWindowForExercise mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseUiManager} with the given {@code LogicForExercise}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseUiManager(LogicForExercise logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            mainWindow \u003d new MainWindowForExercise(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *                                       if this method is called on a thread other than the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *                                       JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindowForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class MainWindowForExercise extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"MainWindowForExercise.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private CaloriesGraph caloriesGraph;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane exerciseListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane caloriesGraphPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public MainWindowForExercise(Stage primaryStage, LogicForExercise logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesGraph \u003d new CaloriesGraph(logic.getCaloriesByDay());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesGraphPlaceholder.getChildren().add(caloriesGraph.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseListPanel getExerciseListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            caloriesGraph.generateGraph();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Nahoyhp": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CaloriesGraph.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cVBox fx:id\u003d\"pane\" prefHeight\u003d\"188.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003cPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cLabel fx:id\u003d\"calories\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cLabel fx:id\u003d\"id11\" styleClass\u003d\"cell_big_label\" text\u003d\"kcal\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dates\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \u003cLabel fx:id\u003d\"muscles\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$muscle\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 3,
      "Nahoyhp": 47
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/resources/view/ExerciseMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cVBox fx:id\u003d\"exerciseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 59
    }
  },
  {
    "path": "src/main/resources/view/MainWindowForExercise.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cStackPane fx:id\u003d\"caloriesGraphPlaceholder\" prefHeight\u003d\"30.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cVBox fx:id\u003d\"exerciseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 63
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/notJsonFormatAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "hello everyone {}"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "trying to mess out this file."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 5
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/invalidAndValidExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Push Up\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Valid Exercise\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Invalid Description\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Inv@lid DEScr1pTI0N\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 17
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/invalidExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Inv@L!D N@M3\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Test 1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 11
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/notJsonFormatExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "not json format!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                new JsonExerciseBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        StorageManagerForExercise storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        logic \u003d new LogicManagerForExercise(model, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        JsonExerciseBookStorage exerciseBookStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//                new JsonExerciseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        StorageManagerForExercise storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        logic \u003d new LogicManagerForExercise(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    // original is person"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ExerciseModel)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 49,
      "Liu-2001": 8,
      "Nauman-S": 2,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ExerciseModel model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        model \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void execute_newExercise_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        expectedModel.addExercise(validExercise);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExercise), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExercise), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 13,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ModelStubAcceptingExerciseAdded modelStub \u003d new ModelStubAcceptingExerciseAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExercise).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExercise), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(Arrays.asList(validExercise), modelStub.exercisesAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise running \u003d new ExerciseBuilder().withName(\"running\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise jumping \u003d new ExerciseBuilder().withName(\"jumping\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AddCommand addRunningCommand \u003d new AddCommand(running);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AddCommand addJumpingCommand \u003d new AddCommand(jumping);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(addRunningCommand.equals(addRunningCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(addJumpingCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private class ModelStub implements ExerciseModel {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExerciseBook(ReadOnlyExerciseBook newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExercise(Exercise target, Exercise editExercise) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void archive(Path path) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * A Model stub that always accept the exercise being added."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private class ModelStubAcceptingExerciseAdded extends ModelStub {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        final ArrayList\u003cExercise\u003e exercisesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final HashMap\u003cString, Integer\u003e caloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return exercisesAdded.stream().anyMatch(exercise::isSameExercise);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            addCaloriesForDay(exercise);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            exercisesAdded.add(exercise);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        private void addCaloriesForDay(Exercise newEntry) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String stringDate \u003d newEntry.getDate().value;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            int intCalories \u003d newEntry.getCalories().isPresent()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    ? Integer.parseInt(newEntry.getCalories().get().value) : 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (caloriesByDay.containsKey(stringDate)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                Integer newCalories \u003d caloriesByDay.get(stringDate) + intCalories;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                caloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                caloriesByDay.put(stringDate, intCalories);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return caloriesByDay;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new ExerciseBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 42,
      "leeweiminsg": 2,
      "Nahoyhp": 22,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.NameContainsKeywordsPredicateForExercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //Calo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_NAME_PUSH_UP \u003d \"Push Up\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DESCRIPTION_PUSH_UP \u003d \"Push Up Description\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DATE_PUSH_UP \u003d \"10-10-2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_CALORIES_PUSH_UP \u003d \"100\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_MUSCLES_PUSH_UP \u003d \"chest\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_TAG_GYM \u003d \"gym\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_TAG_HOUSE \u003d \"house\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_NAME_SIT_UP \u003d \"Sit Up\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DESCRIPTION_SIT_UP \u003d \"Sit Up Description\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DATE_SIT_UP \u003d \"10-10-2020\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_CALORIES_SIT_UP \u003d \"100\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_MUSCLES_SIT_UP \u003d \"ab\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String NAME_DESC_PUSH_UP \u003d \" \" + PREFIX_NAME + VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DESCRIPTION_DESC_PUSH_UP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DATE_DESC_PUSH_UP \u003d \" \" + PREFIX_DATE + VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String CALORIES_DESC_PUSH_UP \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MUSCLES_DESC_PUSH_UP \u003d \" \" + PREFIX_MUSCLES + VALID_MUSCLES_PUSH_UP;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String TAG_DESC_GYM \u003d \" \" + PREFIX_TAG + VALID_TAG_GYM;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String TAG_DESC_HOUSE \u003d \" \" + PREFIX_TAG + VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String NAME_DESC_SIT_UP \u003d \" \" + PREFIX_NAME + VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DESCRIPTION_DESC_SIT_UP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DATE_DESC_SIT_UP \u003d \" \" + PREFIX_DATE + VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String CALORIES_DESC_SIT_UP \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MUSCLES_DESC_SIT_UP \u003d \" \" + PREFIX_MUSCLES + VALID_MUSCLES_SIT_UP;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"run\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION; // description should not be empty"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020-10-10\"; // date of incorrect format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"abc\"; // calories should be numbers"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String INVALID_MUSCLES_DESC \u003d \" \" + PREFIX_MUSCLES + \"abs,chest\"; // abs should be ab"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final UpdateExerciseCommand.EditExerciseDescriptor DESC_PUSH_UP;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final UpdateExerciseCommand.EditExerciseDescriptor DESC_SIT_UP;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // AB3"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // Calo"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DESC_PUSH_UP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withCalories(VALID_CALORIES_PUSH_UP).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DESC_SIT_UP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_SIT_UP).withDate(VALID_DATE_SIT_UP)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withCalories(VALID_CALORIES_SIT_UP).withTags(VALID_TAG_GYM, VALID_TAG_HOUSE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static void assertCommandSuccess(CommandForExercise command, ExerciseModel actualModel,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                            CommandResult expectedCommandResult, ExerciseModel expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Convenience wrapper that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static void assertCommandSuccess(CommandForExercise command, ExerciseModel actualModel,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                            String expectedMessage, ExerciseModel expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static void assertCommandFailure(CommandForExercise command,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                            ExerciseModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBook expectedExerciseBook \u003d new ExerciseBook(actualModel.getExerciseBook());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cExercise\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedExerciseBook, actualModel.getExerciseBook());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void showExerciseAtIndex(ExerciseModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        final String[] splitName \u003d exercise.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(new NameContainsKeywordsPredicateForExercise(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 7,
      "leeweiminsg": 78,
      "Nauman-S": 31,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ExerciseModelManager expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showNoExercise(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBook().getExerciseList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private void showNoExercise(ExerciseModel model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 38,
      "Nahoyhp": 2,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXERCISE, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXERCISE, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 19,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PULL_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.SIT_UP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.SQUAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel expectedModel \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d new Name(\"Push Up\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d new Description(\"test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d new Date(\"10-10-2020\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d new Calories(\"224\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(name, description, date,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        calories, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(name, description, date,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        calories, Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void execute_zeroKeywords_noExerciseFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise predicate \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(null, null, null, null, keywords);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void execute_multipleKeywords_multipleExercisesFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String input \u003d \"up sQuat\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise predicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(null, null, null, null, keywords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(Arrays.asList(PULL_UP, PUSH_UP, SIT_UP, SQUAT), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 25,
      "Nauman-S": 17,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nauman-S": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PUSH_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SIT_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * and unit tests for UpdateExerciseCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "class UpdateExerciseCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index indexLastExercise \u003d Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise lastExercise \u003d model.getFilteredExerciseList().get(indexLastExercise.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBuilder exerciseInList \u003d new ExerciseBuilder(lastExercise);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d exerciseInList.withName(VALID_NAME_PUSH_UP).withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDate(VALID_DATE_PUSH_UP).withCalories(VALID_CALORIES_PUSH_UP).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDate(VALID_DATE_PUSH_UP).withCalories(VALID_CALORIES_PUSH_UP).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(indexLastExercise, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(lastExercise, editedExercise);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateExerciseCommand.EditExerciseDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseInFilteredList \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(exerciseInFilteredList).withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise firstExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                      new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "              new UpdateExerciseCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, UpdateExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // edit exercise in filtered list into a duplicate in exercise book"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseInList \u003d model.getExerciseBook()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        .getExerciseList().get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                          new EditExerciseDescriptorBuilder(exerciseInList)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                          .build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, UpdateExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * but smaller than size of exercise book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_invalidExerciseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of exercise book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBook().getExerciseList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand updateExerciseCommand \u003d new UpdateExerciseCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final UpdateExerciseCommand standardCommand \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE, DESC_PUSH_UP);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateExerciseCommand.EditExerciseDescriptor(DESC_PUSH_UP);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand commandWithSameValues \u003d new UpdateExerciseCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateExerciseCommand(INDEX_SECOND_EXERCISE, DESC_PUSH_UP)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateExerciseCommand(INDEX_FIRST_EXERCISE, DESC_SIT_UP)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SIT_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_SIT_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MUSCLES_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SIT_UP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.TYPICAL_EXERCISE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(TYPICAL_EXERCISE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_SIT_UP + NAME_DESC_PUSH_UP"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_SIT_UP"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //multiple date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_SIT_UP + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //multiple calories"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_SIT_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        //multiple groups of muscles"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_SIT_UP + MUSCLES_DESC_SIT_UP + MUSCLES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //missing name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //missing description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_PUSH_UP + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                INVALID_NAME_DESC + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid description"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + INVALID_DATE_DESC + CALORIES_DESC_PUSH_UP,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid calories"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + DATE_DESC_PUSH_UP + INVALID_CALORIES_DESC,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        //invalid muscles worked"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + INVALID_MUSCLES_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 63,
      "leeweiminsg": 21,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + INDEX_FIRST_EXERCISE.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXERCISE, descriptor), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 2,
      "Nahoyhp": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void assertParseSuccess(ExerciseParser parser, String userInput, CommandForExercise expectedCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            CommandForExercise command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static void assertParseSuccess(AddCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                          CommandForExercise expectedCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            CommandForExercise command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void assertParseFailure(ExerciseParser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 14,
      "Nauman-S": 27,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SIT_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_SIT_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SIT_UP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GYM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLES_PUSH_UP;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLES_SIT_UP;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private UpdateExerciseCommandParser parser \u003d new UpdateExerciseCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateExerciseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CALORIES_DESC, Calories.MESSAGE_CONSTRAINTS); // invalid calories"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, ExerciseTag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // invalid name followed by valid description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + DESCRIPTION_DESC_PUSH_UP, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // valid name followed by invalid name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_PUSH_UP + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Exercise} being edited,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GYM + TAG_DESC_HOUSE + TAG_EMPTY, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GYM + TAG_EMPTY + TAG_DESC_HOUSE, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_GYM + TAG_DESC_HOUSE, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                            + VALID_DATE_PUSH_UP + VALID_CALORIES_PUSH_UP,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + TAG_DESC_GYM"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP + TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withCalories(VALID_CALORIES_PUSH_UP)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withMusclesWorked(VALID_MUSCLES_PUSH_UP)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withTags(VALID_TAG_GYM, VALID_TAG_HOUSE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_PUSH_UP).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDescription(VALID_DESCRIPTION_PUSH_UP).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDate(VALID_DATE_PUSH_UP).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // calories"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withCalories(VALID_CALORIES_PUSH_UP).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // muscles worked"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MUSCLES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withMusclesWorked(VALID_MUSCLES_PUSH_UP).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withTags(VALID_TAG_HOUSE).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP + TAG_DESC_HOUSE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLES_DESC_PUSH_UP + TAG_DESC_HOUSE"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + NAME_DESC_SIT_UP + DESCRIPTION_DESC_SIT_UP + DATE_DESC_SIT_UP + CALORIES_DESC_SIT_UP"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + MUSCLES_DESC_SIT_UP + TAG_DESC_GYM;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_SIT_UP)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDate(VALID_DATE_SIT_UP)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withCalories(VALID_CALORIES_SIT_UP)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withMusclesWorked(VALID_MUSCLES_SIT_UP)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withTags(VALID_TAG_HOUSE, VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PUSH_UP + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                      + CALORIES_DESC_PUSH_UP + DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withCalories(VALID_CALORIES_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand expectedCommand \u003d new UpdateExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "leeweiminsg": 133,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExerciseBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class ExerciseBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final ExerciseBookParser parser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .parseCommand(AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + \"n/Push up d/Testing 2254 at/09-10-2020 c/224 m/chest\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new AddCommand(exercise), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXERCISE.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXERCISE), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Path path \u003d Paths.get(\"testing.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ArchiveCommand command \u003d (ArchiveCommand) parser.parseCommand(ArchiveCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + \" f/testing.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new ArchiveCommand(path), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(exercise).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateExerciseCommand command \u003d (UpdateExerciseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                UpdateExerciseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + INDEX_FIRST_EXERCISE.getOneBased() + \" \" + ExerciseUtil.getEditExerciseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new UpdateExerciseCommand(INDEX_FIRST_EXERCISE, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d new Name(\"Push Up\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d new Description(\"test\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d new Date(\"10-10-2020\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d new Calories(\"224\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + \"n/Push Up d/test at/10-10-2020 c/224 k/foo bar baz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(new FindCommand(new PropertiesMatchPredicateForExercise(name,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                description, date, calories, keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 30,
      "leeweiminsg": 56,
      "Nahoyhp": 8,
      "Nauman-S": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new FindCommand(new PropertiesMatchPredicateForExercise(null, null, null,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        null, Arrays.asList(\"Push\", \"Walk\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser, \" k/Push Walk\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser, \" k/\\n Push \\n \\t Walk  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExerciseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBook exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(Collections.emptyList(), exerciseBook.getExerciseList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.resetData(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*ExerciseBook is using stubs Exercise and its componenet. So unable to assert equals"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        getTypicalExerciseBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook newData \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.resetData(newData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(newData, exerciseBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_withDuplicateExercises_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        AddressBookTest.AddressBookStub newData \u003d new AddressBookTest.AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.hasExercise(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs in Exercise\u0027s property"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(exerciseBook.hasExercise(SIT_UP));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasExercise_exerciseInExerciseBook_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(SIT_UP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(exerciseBook.hasExercise(SIT_UP));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(SIT_UP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exerciseBook.getExerciseList().remove(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExerciseModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class ExerciseModelManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseModelManager modelManager \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new ExerciseBook(), new ExerciseBook(modelManager.getExerciseBook()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExerciseBookFilePath(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Not available because UserPrefs still take in AddressBook instead of ExerciseBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath_validPath_setsExerciseBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.setExerciseBookFilePath(path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(path, modelManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExercise(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.hasExercise(PUSH_UP));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.addExercise(PUSH_UP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(modelManager.hasExercise(PUSH_UP));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook exerciseBook \u003d new ExerciseBookBuilder().withExercise(PUSH_UP).withExercise(SIT_UP).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook differentExerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager \u003d new ExerciseModelManager(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModelManager modelManagerCopy \u003d new ExerciseModelManager(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(new ExerciseModelManager(differentExerciseBook, userPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/CaloriesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class CaloriesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidCalories_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidCalories \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calories(invalidCalories));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidCalories() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null calories"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calories.isValidCalories(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid calories"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"9\")); // exactly 1 number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"93121534\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"124293842033123\")); // long number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.exercise.Date(invalidDate));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.exercise.Date.isValidDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"09-30-2020\")); // mm-dd-yyyy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"2020-09-30\")); // yyyy-mm-dd"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Date.isValidDate(\"30-09-2020\")); //dd-mm-yyyy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.exercise.Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"finished today\")); // alphabets only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"2 times\")); // alphanumeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"2 Times\")); // with capital letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseTagTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseTag(null));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseTag(invalidTagName));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseTag.isValidTagName(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/MusclesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class MusclesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            ) -\u003e seedu.address.model.exercise.Muscle.isValidMusclesWorked(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"\")); // empty string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\" \")); // spaces only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // only non-alphanumeric characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"^\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"run*\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // using other delimiters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chest-leg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // whitespace with delimiter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chest, leg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // using other names"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chests,leg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // just one muscle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chest\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // more than one muscle group"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chest,leg\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // using trailing delimiter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Muscle.isValidMusclesWorked(\"chest,leg,\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.exercise.Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.exercise.Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.exercise.Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"pull up\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"2nd pull up\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"Run\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Name.isValidName(\"pull up 2 times\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 32,
      "leeweiminsg": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.SIT_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(PUSH_UP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(PUSH_UP));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(PUSH_UP));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.updateExercise(null, PUSH_UP));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, PUSH_UP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setPerson(PUSH_UP, PUSH_UP);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        uniqueExerciseList expectedUniqueExerciseList \u003d new uniqueExerciseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Person editedPUSH_UP \u003d new PersonBuilder(PUSH_UP).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setPerson(PUSH_UP, editedPUSH_UP);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        uniqueExerciseList expectedUniqueExerciseList \u003d new uniqueExerciseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(editedPUSH_UP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(PUSH_UP));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.remove(PUSH_UP);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvideduniqueExerciseList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(SIT_UP);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cExercise\u003e duplicateExerciseList \u003d Arrays.asList(PUSH_UP, PUSH_UP);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercises(duplicateExerciseList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Executable supplier \u003d () -\u003e uniqueExerciseList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, supplier);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void checkCaloriesForDay_emptyList_returnFalse() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void addExercise_checkCaloriesByDay() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(PUSH_UP.getDate().value),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                PUSH_UP.getCalories().isPresent() ? Integer.parseInt(PUSH_UP.getCalories().get().value) : 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_checkCaloriesByDay() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(PUSH_UP.getDate().value), 0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(SIT_UP.getDate().value));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(SIT_UP.getDate().value),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                SIT_UP.getCalories().isPresent() ? Integer.parseInt(SIT_UP.getCalories().get().value) : 0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 12,
      "Nahoyhp": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/ExerciseStorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseStorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StorageManagerForExercise storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d new JsonExerciseBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        storageManager \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public void exerciseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //         * {@link JsonExerciseBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonExerciseBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        ExerciseBook original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        storageManager.saveExerciseBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        ReadOnlyExerciseBook retrieved \u003d storageManager.readExerciseBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        ExerciseBook newExerciseBook \u003d new ExerciseBook(retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        assertEquals(original, newExerciseBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertNotNull(storageManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 17,
      "Nahoyhp": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExercise.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Test for invalid input are commented out due to the use of stubs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonAdaptedExerciseTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P@ss Fail\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"@@@@@\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_MUSCLES \u003d \"abs,,\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_NAME \u003d PUSH_UP.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d PUSH_UP.getDescription().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_DATE \u003d PUSH_UP.getDate().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Always valid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_CALORIES \u003d PUSH_UP.getCalories().get().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_MUSCLES \u003d PUSH_UP.getMusclesWorkedDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final List\u003cJsonAdaptedExerciseTag\u003e VALID_TAGS \u003d PUSH_UP.getExerciseTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .map(JsonAdaptedExerciseTag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_validExerciseDetails_returnsExercise() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(PUSH_UP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(PUSH_UP, exercise.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(INVALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, INVALID_DESCRIPTION, VALID_DATE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        INVALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        null, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        VALID_DATE, INVALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_invalidMuscles_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        VALID_DATE, VALID_CALORIES, INVALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d Muscle.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cJsonAdaptedExerciseTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        invalidTags.add(new JsonAdaptedExerciseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        VALID_DATE, VALID_CALORIES, INVALID_MUSCLES, invalidTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, exercise::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 66,
      "Nahoyhp": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonExerciseBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonExerciseBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \"data\", \"JsonExerciseBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExerciseBook(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new JsonExerciseBookStorage(Paths.get(filePath)).readExerciseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(readExerciseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"notJsonFormatExerciseBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidExerciseBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Unable to test due to the use of stubs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidAndValidExerciseAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExerciseBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d new JsonExerciseBookStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ReadOnlyExerciseBook readBack \u003d jsonExerciseBookStorage.readExerciseBook(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.addExercise(SQUAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.removeExercise(PUSH_UP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readExerciseBook(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.addExercise(SQUAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readExerciseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, String filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new JsonExerciseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    .saveExerciseBook(exerciseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(new ExerciseBook(), null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an {@code EditExerciseDescriptorBuilder} with fields containing {@code exercise}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setName(exercise.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDate(exercise.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDescription(exercise.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setCalories(exercise.getCalories().isPresent() ? exercise.getCalories().get() : null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setMusclesWorked(exercise.getMusclesWorked().isPresent() ? exercise.getMusclesWorked().get() : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setTags(exercise.getExerciseTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Muscles} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withMusclesWorked(String musclesWorked) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setMusclesWorked(Muscle.stringToMuscleList(musclesWorked));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cExerciseTag\u003e} and set it to the {@code EditExerciseDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagSet \u003d Stream.of(tags).map(ExerciseTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A utility class to help with building Exercisebook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * {@code ExerciseBook ab \u003d new ExerciseBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseBook exerciseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder(ExerciseBook exerciseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook \u003d exerciseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds a new {@code Person} to the {@code ExerciseBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder withExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Push up\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Testing 2254\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"09-10-2020\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_CALORIES \u003d \"224\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DEFAULT_MUSCLES \u003d \"chest\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private List\u003cMuscle\u003e musclesWorked;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cExerciseTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Creates a {@code ExerciseBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        musclesWorked \u003d Muscle.stringToMuscleList(DEFAULT_MUSCLES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code ExerciseToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d exerciseToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d exerciseToCopy.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d exerciseToCopy.getDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories \u003d exerciseToCopy.getCalories().isPresent() ? exerciseToCopy.getCalories().get() : null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        musclesWorked \u003d exerciseToCopy.getMusclesWorked().isPresent() ? exerciseToCopy.getMusclesWorked().get() : null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(exerciseToCopy.getExerciseTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the {@code Name} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the {@code Description} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Date} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Calories} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Muscles} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseBuilder withMusclesWorked(String musclesWorked) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.musclesWorked \u003d Muscle.stringToMuscleList(musclesWorked);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cExerciseTag\u003e} and set it to the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tags \u003d SampleDataUtil.getExerciseTagSet(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(name, description, date, calories, musclesWorked, tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 37,
      "Nahoyhp": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Muscle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the part of command string for the given {@code exercise}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_NAME + exercise.getName().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + exercise.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_DATE + exercise.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_CALORIES + exercise.getCalories().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_MUSCLES + exercise.getMusclesWorkedDescription() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getExerciseTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getEditExerciseDescriptorDetails(UpdateExerciseCommand.EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(description.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(PREFIX_CALORIES)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(calories.toString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getMusclesWorked().ifPresent(muscles -\u003e sb.append(PREFIX_MUSCLES)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(Muscle.muscleListToString(muscles)).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            Set\u003cExerciseTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercise.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class TypicalExercise {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Exercise TYPICAL_EXERCISE \u003d new ExerciseBuilder().withName(\"Push Up\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Push Up Description\").withDate(\"10-10-2020\").withCalories(\"100\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"chest\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise PUSH_UP \u003d new ExerciseBuilder().withName(\"Push Up\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 1\").withDate(\"09-10-2020\").withCalories(\"12345\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"chest\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise SIT_UP \u003d new ExerciseBuilder().withName(\"Sit up\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 2\").withDate(\"10-10-2020\").withCalories(\"23456\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"ab\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise RUN \u003d new ExerciseBuilder().withName(\"Run\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 3\").withDate(\"17-10-2020\").withCalories(\"12348\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"leg\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise WALK \u003d new ExerciseBuilder().withName(\"Walk\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 4\").withDate(\"24-10-2020\").withCalories(\"12349\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"leg\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise PULL_UP \u003d new ExerciseBuilder().withName(\"Pull up\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 5\").withDate(\"31-10-2020\").withCalories(\"123400\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"arm,back\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise SQUAT \u003d new ExerciseBuilder().withName(\"Squat\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 6\").withDate(\"07-11-2020\").withCalories(\"255491\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMusclesWorked(\"leg\").build();;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private TypicalExercise() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an {@code ExerciseBook} with all the typical Exercises."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static ExerciseBook getTypicalExerciseBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBook eb \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            eb.addExercise(exercise);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PULL_UP, PUSH_UP, SIT_UP, RUN, WALK, SQUAT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 2,
      "leeweiminsg": 18,
      "Nahoyhp": 38,
      "Nauman-S": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //Calo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_THIRD_EXERCISE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 5,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 34
    }
  },
  {
    "path": "testingForExercise.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World1\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World3\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World4\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello3\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello4\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello1\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello2\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello3\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello4\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 78
    }
  }
]
