[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _ScheDar_) used for managing tasks and planning schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  * It is **written in OOP fashion**. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* This project builds a calendar and scheduling application that assists students in the planning of their lecture and tutorial schedules, as well as keep track of assignments and deadlines. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* The following features will be offered:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Timetabling and scheduling: List out the different classes, meetings, and events on a given day. Allows for adding of weekly recurring events, like lectures and tutorials (with potential NUSMods integration for adding of modules by module code)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Task management: Tracking of deadlines for todos, homework, project, etc., and assigning of various priority levels for the different tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Different views: A daily, weekly, and monthly view for users to get a quick overview of current and upcoming tasks and events, and allow sorting based on deadline, priority, and other criteria."
      }
    ],
    "authorContributionMap": {
      "e0316059": 10,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Damith C. Pahapakse"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Role: Supervisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Tishya Khanna"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Role: Supervisor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Chen Yongyan"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "\u003cimg src\u003d\"images/raymond0212.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](https://github.com/Raymond0212)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/raymond0212.md)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Daniel Adipranoto"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0316059"
        },
        "content": "\u003cimg src\u003d\"images/danadi7.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](https://github.com/danadi7)] "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/danadi7.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Qu Mingsi"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "\u003cimg src\u003d\"images/e0316059.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](http://github.com/e0316059)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/e0316059.md)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 1,
      "e0316059": 18,
      "-": 35
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* NUS CS Students "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* seeking an integrated calendar"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* seeking a task management application to plan their schedule"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Value proposition**: A calendar and scheduling application that assists students in the planning of their lecture and tutorial schedules, as well as keep track of assignments and deadlines."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| Priority | As …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "|:--------:| ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a new user                                   | have access to user guide/help file easily |learn more about the software easily when I need            |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | see the time of my lessons and meetings |      plan my day.                                             |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | see my deadlines at a glance   | prioritise my work.                                                    |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | assign priorities to my different tasks | know which ones I should do first |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | delete tasks    | remove cancelled obligations.        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student with many tasks                  |search through my task using keywords   | I can find relevant tasks quickly |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | an advanced user                           |edit the source file of todo list directly   |make changes without going through the CLI|"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "|`* *`| a NUS student | add my periodic asks at once | avoid adding them repeatedly |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a student bad at remembering deadlines | sort my deadlines based on date | know which deadline is coming soon |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | an efficient student | type abbreviated commands | type super fast |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a student | see the statistics of my tasks | preview the workload I will encounter in the coming weeks |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | self-consistent NUS student | add task to different task | make my plan well organised |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a NUS student |  add class schedule by module code |  |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an every day user | receive a warm welcome when I open the app | feel pleased |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student likes customisation | customise some parts of UI | feel more comfortable when I use it |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student | set a free day for my timetable by making proper arrangement | have a long weekend |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a user | get notifications for recent events and coming deadlines | will not miss them |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an organised user | be able to add tags to my task and filter by tags | sort my tasks by topic |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a lazy user | past and add a bunch of different tasks at once through command line | add them fastly |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student with a lot of group projects | assiciate tasks with people | keep track which group member is doing what |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an advanced user | add dates to todos to convert them to events/deadlines | I don\u0027t have to delete and create a new task |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a user | change the description of a task | update them without deleting |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a forgetful user | have duplicate tasks deleted | avoid the same task appearing twice |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a lazy student | have acces to links to websites or file in the description | have access to related resources easily |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a careless student | undo my commands | avoid misoperation |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a normal user |  go through my tasks opon opening the app | be well informed |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "(For all use cases below, the **System** is the `ScheDar` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: add a ta\u0027s\u0027k**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User enters add command specifying task type"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar give a response"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: delete a task**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar deletes the task"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: assign priority to a task**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to assign priority a specific task in the list"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar gives priority to the task"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 4a. The task already have a priority."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 4a1. ScheDar shows a confirmation about overriding."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * 4a1a User confirms override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * ScheDar gives new priority to the task"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "           Use case ends"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * 4a1a User denies override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "           Use case resumes at step 1."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: mark a task as done**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to mark a specific task in the list as done"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar marks the task"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 4a. The task is already done."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: retrieve last-deleted task**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to retrieve a last-deleted task"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar retrieves the task"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The rubbish bin is empty."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: search for tasks by keyword**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests search with keyward"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar get matched tasks and list them"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The keyword is not found."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "   * 3a1. ScheDar shows an warning message."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2.  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 128,
      "-": 350
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "ScheDar is a **desktop app for managing tasks, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ScheDar can get your task management done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "1. Download the latest `ScheDar.jar` from [here](coming soon)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ScheDar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`list`** : Lists out the tasks currently on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`add`**`event n/project meeting d/2020-09-16 18:00 t/important` : Adds an event named `project meeting` to ScheDar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`del`**`3` : Deletes the 3rd task shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`find`** `cs2103 project`: Searches the current task list for the specified keyword `cs2103 project`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/project meeting`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/project meeting t/important` or as `n/project meeting`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/important`, `t/important t/online` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. if the command specifies `n/NAME d/DATETIME`, `d/DATETIME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out all the commands accepted by ScheDar. If the command name is specified, it will specify how to use that command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Adding a task : `add`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Add a new task(todo/event/deadline) to the ScheDar program."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `add TYPE n/NAME d/DATETIME [t/TAG]…​`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        TYPE refers to the type of task to be added. "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        TYPE must be one of the following: deadline, event, todo"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Adds a new task of the given type, name, date and time, and tag if any, to the task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The new task will be appended at the end of the existing task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0316059"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* `add event n/project meeting d/2020-09-16 18:00 t/important`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Assigning priority to a task : `pri`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Assigns priority to an existing task on the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `pri LEVEL INDEX`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        LEVEL indicates the priority level"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The LEVEL must be one of the following: high, med, low"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Marks the task at the specified INDEX as the priority level indicated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* `pri high 2`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Listing all tasks : `list`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out the tasks currently on the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Listing deadlines chronologically : `dl`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out deadline-type tasks currently stored on the task list, in chronological order of deadline. The earliest deadline would be at the top of the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `dl`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Marking task as done : `done`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Marks an existing task on the task list as completed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Marks as completed the task at the specified INDEX."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `done 2`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Deleting a task : `del`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Deletes the specified task from the current task list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `del INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Deletes the task at the specified INDEX."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `del 1`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Retrieve last-deleted task : `re`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Restores the most recently deleted task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `re`\t"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Searching for tasks by keyword : `find`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Searches the current tasklist for the specified keyword(s)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `find KEYWORD1 [KEYWORD2]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Searches the entire task list for the presence of the keyword(s) on any task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Matching tasks are shown on a list to the user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `find cs2103 project`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0316059"
        },
        "content": "ScheDar data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ScheDar home folder."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Add** | `add TYPE n/NAME d/DATETIME [t/TAG]…​` \u003cbr\u003e e.g., `add event n/project meeting d/2020-09-16 18:00 t/important`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Deadline** | `dl`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Delete** | `del INDEX`\u003cbr\u003e e.g., `del 1`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Done** | `done INDEX`\u003cbr\u003e e.g., `done 1`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find project meeting`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Priority** | `pri LEVEL INDEX`\u003cbr\u003e e.g., `pri high 2`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Retrieve** | `re`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0316059": 72,
      "-": 112
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "title: ScheDar"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-T16-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**ScheDar is a desktop application for managing your daily tasks.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* If you are interested in using ScheDar, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* If you are interested about developing ScheDar, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.storage.TaskManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManagerStorage addressBookStorage \u003d new JsonTaskManagerStorage(userPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s task manager and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The data from the sample task manager will be used instead if {@code storage}\u0027s task manager is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * or an empty task manager will be used instead if errors occur when reading {@code storage}\u0027s task manager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Optional\u003cReadOnlyTaskManager\u003e taskManagerOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ReadOnlyTaskManager initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskManagerOptional \u003d storage.readTaskManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!taskManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaskManager\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d taskManagerOptional.orElseGet(SampleDataUtil::getSampleTaskManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.info(\"Starting TaskManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 21,
      "-": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the TaskManager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @see seedu.address.model.Model#getTaskMnager()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of taskss */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 9,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.TaskManagerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManagerParser taskManagerParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManagerParser \u003d new TaskManagerParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Command command \u003d taskManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            storage.saveTaskManager(model.getTaskManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getTaskManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 13,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline-type task to the task manager. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"DEADLINE DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"tP Tasks \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refactor tP Code \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"2020-10-01 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Deadline toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates an TodoCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddDeadlineCommand(Deadline task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDeadlineCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event-type task to the task manager. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"EVENT DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_TIME + \"EVENT TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"CS2103 party \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Coding Party! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"2020-10-01 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_TIME + \"19:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates an TodoCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddEventCommand(Event task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Adds a todo to the task manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo-type task to the task manager. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"tP Tasks \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refactor tP Code \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ToDo toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates an AddTodoCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddTodoCommand(ToDo task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTodoCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Clears the task manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task manager has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.setTaskManager(new TaskManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Find Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Edit Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 228
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Task Manager as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Find Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Lists all tasks in the task manager to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new AddDeadlineCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommandParser implements Parser\u003cAddDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddDeadlineCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        PREFIX_TASK_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                PREFIX_TASK_DATE, PREFIX_TAG)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate taskDeadline \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_TASK_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline dl \u003d new Deadline(title, description, priority, taskDeadline, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddDeadlineCommand(dl);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddEventCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        PREFIX_TASK_DATE, PREFIX_TASK_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                PREFIX_TASK_DATE, PREFIX_TASK_TIME, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate eventDate \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_TASK_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskTime eventTime \u003d ParserUtil.parseTaskTime(argMultimap.getValue(PREFIX_TASK_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event event \u003d new Event(title, description, priority, eventDate, eventTime, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTodoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new TodoCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommandParser implements Parser\u003cAddTodoCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTodoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddTodoCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddTodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_TAG)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo todo \u003d new ToDo(title, description, priority, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddTodoCommand(todo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TASK_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TASK_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Delete Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 30,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Edit Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 83,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Find Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String dateString} into a {@code TaskDate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code dateString} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static TaskDate parseTaskDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedDateString \u003d dateString.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!TaskDate.isValidDate(trimmedDateString)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new TaskDate(trimmedDateString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static TaskTime parseTaskTime(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedTimeString \u003d timeString.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!TaskTime.isValidTime(trimmedTimeString)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new TaskTime(trimmedTimeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 52,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManagerParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddTodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 10,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTaskManagerFilePath(Path taskManagerFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces task manager data with the data in {@code taskManager}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTaskManager(ReadOnlyTaskManager taskManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns the TaskManager */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task manager."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must exist in the task manager."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code task} must not already exist in the task manager."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the task manager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 26,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents the in-memory model of the task manager data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Initializes a ModelManager with the given taskManager and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ModelManager(ReadOnlyTaskManager taskManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(taskManager, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.fine(\"Initializing with task manager: \" + taskManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManager \u003d new TaskManager(taskManager);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this(new TaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return userPrefs.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        userPrefs.setTaskManagerFilePath(taskManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManager.resetData(taskManager);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager.hasTask(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.removeTask(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.setTask(target, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager.equals(other.taskManager)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 39,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Unmodifiable view of a task manager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManager implements ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a TaskManager using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager(ReadOnlyTaskManager toBeCopied) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /// list overwrite operations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Resets the existing data of this {@code TaskManager} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void resetData(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task manager."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds a task to the task manager."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must not already exist in the task manager."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Removes {@code key} from this {@code TaskManager}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code key} must exist in the task manager."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskManager) other).tasks));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Path taskManagerFilePath \u003d Paths.get(\"data\" , \"taskmanager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        setTaskManagerFilePath(newUserPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManagerFilePath \u003d taskManagerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 taskManagerFilePath.equals(o.taskManagerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(guiSettings, taskManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskManagerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskDate deadlineDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor without DoneStatus."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Deadline(Title title, Description description, Priority priority, TaskDate deadlineDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor with DoneStatus."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Deadline(Title title, Description description, Priority priority, TaskDate deadlineDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate getDeadlineDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(otherTask instanceof Deadline)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline otherTask \u003d (Deadline) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDeadlineDate().equals(getDeadlineDate())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, deadlineDate, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDeadlineDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s description in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any value, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DoneStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DoneStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DoneStatus should be an integer.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final DoneStatusCode status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a new DoneStatus given a status code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus(int statusCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(statusCode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDoneStatus(statusCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d DoneStatusCode.getDoneStatusByCode(statusCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a new DoneStatus that defaults to NOT_DONE."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d DoneStatusCode.NOT_DONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid status code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDoneStatus(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        DoneStatusCode ds \u003d DoneStatusCode.getDoneStatusByCode(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return ds !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof DoneStatus"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 status.equals(((DoneStatus) other).status));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DoneStatusCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public enum DoneStatusCode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    NOT_DONE(0, \"Not done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    DONE(1, \"Done\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    OVERDUE(2, \"Overdue\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final Map\u003cInteger, DoneStatusCode\u003e BY_STATUS_CODE \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final int statusCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (DoneStatusCode ds : values()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            BY_STATUS_CODE.put(ds.statusCode, ds);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private DoneStatusCode(int statusCode, String label) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.statusCode \u003d statusCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static DoneStatusCode getDoneStatusByCode(int statusCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return BY_STATUS_CODE.get(statusCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int getStatusCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return statusCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"EVENT\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskDate eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskTime eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor without DoneStatus."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Event(Title title, Description description, Priority priority,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                 TaskDate eventDate, TaskTime eventTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor with DoneStatus."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Event(Title title, Description description, Priority priority,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                 TaskDate eventDate, TaskTime eventTime, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate getEventDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskTime getEventTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(otherTask instanceof Event)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event otherTask \u003d (Event) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getEventTime().equals(getEventTime())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, eventDate, eventTime, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Event Date: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Event Time: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getEventTime())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s priority in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            \"Priority level should be Low, Medium or High\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_LOW \u003d \"LOW\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_MEDIUM \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_HIGH \u003d \"HIGH\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final PriorityLevel level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param level A valid priority level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Priority(String level) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidPriority(level), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        switch(level.toUpperCase()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.LOW;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.MEDIUM;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.HIGH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid priority level."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_LOW)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_MEDIUM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_HIGH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return level.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 level.equals(((Priority) other).level)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return level.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/PriorityLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public enum PriorityLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    LOW(\"Low\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    MEDIUM(\"Medium\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    HIGH(\"High\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private PriorityLevel(String label) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task in the task manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Priority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final DoneStatus status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Create new Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task(Title title, Description description, Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(title, priority, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d new DoneStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Create new Task with DoneStatus."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task(Title title, Description description, Priority priority, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(title, priority, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus getStatus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s date in the task manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code TaskDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param dateString A valid date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate(String dateString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            LocalDate.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return date.format(FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 date.equals(((TaskDate) other).date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s time in task manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be in the format HH:MM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code TaskTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param timeString A valid time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskTime(String timeString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidTime(timeString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.time \u003d LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            LocalTime.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return time.format(FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 time.equals(((TaskTime) other).time));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s title in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 17,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/ToDo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"TODO\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDo(Title title, Description description, Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDo(Title title, Description description, Priority priority, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The yask identity of {@code editedTask} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Contains utility methods for populating {@code TaskManager} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new ToDo(new Title(\"cs2103 tp\"), new Description(\"Team Project\"), new Priority(\"High\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                getTagSet(\"cs2103\", \"projects\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new Deadline(new Title(\"cs2103 peer review\"), new Description(\"Peer reviews for tp\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new Priority(\"Medium\"), new TaskDate(\"2020-10-10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                getTagSet(\"cs2103\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new Event(new Title(\"cs2103 lecture\"), new Description(\"Weekly lecture\"), new Priority(\"Low\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new TaskDate(\"2020-10-09\"), new TaskTime(\"12:00\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static ReadOnlyTaskManager getSampleTaskManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager sampleTm \u003d new TaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            sampleTm.addTask(sampleTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return sampleTm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 26,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.DoneStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Integer doneStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String deadlineDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String eventDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String eventTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code JsonAdaptedTodo} with the given task details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"priority\") String priority, @JsonProperty(\"doneStatus\") Integer doneStatus,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"type\") String type, @JsonProperty(\"deadlineDate\") String deadlineDate,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"eventDate\") String eventDate, @JsonProperty(\"eventTime\") String eventTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.doneStatus \u003d doneStatus;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d source.getPriority().level.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        doneStatus \u003d source.getStatus().status.getStatusCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (source instanceof Deadline) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d Deadline.TASK_TYPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d ((Deadline) source).getDeadlineDate().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } else if (source instanceof Event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d Event.TASK_TYPE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d ((Event) source).getEventDate().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d ((Event) source).getEventTime().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d ToDo.TASK_TYPE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts this Jackson-friendly adapted todo object into the model\u0027s {@code ToDo} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted todo."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Description modelDesc \u003d new Description(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (doneStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    DoneStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!DoneStatus.isValidDoneStatus(doneStatus)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(DoneStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final DoneStatus modelStatus \u003d new DoneStatus(doneStatus);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case Deadline.TASK_TYPE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (deadlineDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskDate.isValidDate(deadlineDate)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskDate modelDlDate \u003d new TaskDate(deadlineDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new Deadline(modelTitle, modelDesc, modelPriority, modelDlDate, modelStatus, modelTags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case Event.TASK_TYPE:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskDate.isValidDate(eventDate)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskDate modelEventDate \u003d new TaskDate(eventDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (eventTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskTime.isValidTime(eventTime)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskTime modelEventTime \u003d new TaskTime(eventTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new Event(modelTitle, modelDesc, modelPriority,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    modelEventDate, modelEventTime, modelStatus, modelTags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case ToDo.TASK_TYPE:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new ToDo(modelTitle, modelDesc, modelPriority, modelStatus, modelTags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(\"Stored Task matches no known patterns.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * An Immutable TaskManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "@JsonRootName(value \u003d \"taskmanager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "class JsonSerializableTaskManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskManager} with the given taskss."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonSerializableTaskManager(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonSerializableTaskManager(ReadOnlyTaskManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts this task manager into the model\u0027s {@code TaskManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (taskManager.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class JsonTaskManagerStorage implements TaskManagerStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskManagerStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonTaskManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return readTaskManager(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Similar to {@link #readTaskManager()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Optional\u003cJsonSerializableTaskManager\u003e jsonTaskManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                filePath, JsonSerializableTaskManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!jsonTaskManager.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return Optional.of(jsonTaskManager.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager addressBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        saveTaskManager(addressBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Similar to {@link #saveTaskManager(ReadOnlyTaskManager)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManager);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskManager(taskManager), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 19,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface Storage extends TaskManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Manages storage of TaskManager data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskManagerStorage taskManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TaskManagerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public StorageManager(TaskManagerStorage taskManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManagerStorage \u003d taskManagerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerStorage.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return readTaskManager(taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerStorage.readTaskManager(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        saveTaskManager(taskManager, taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManagerStorage.saveTaskManager(taskManager, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TaskManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface TaskManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns TaskManager data as a {@link ReadOnlyTaskManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @see #getTaskManagerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param taskManager cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @see #saveTaskManager(ReadOnlyTaskManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 7,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority.setText(task.getPriority().level.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status.setText(task.getStatus().status.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 18,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 49
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 7
    }
  }
]
