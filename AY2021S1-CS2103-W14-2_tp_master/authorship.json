[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook is a desktop app for hotel receptionists to efficiently"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "manage guest bookings via a Command Line Interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI).\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "If you can type fast, ConciergeBook can help you optimise how you manage your rooms,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Download the latest `conciergebook.jar` from [here](https://github.com/AY2021S1-CS2103-W14-2/tp/releases)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Copy the file to the folder you want to use as the _home folder_ for your ConciergeBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Run `java -jar conciergebook.jar` in your terminal/cmd."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Main features"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Manage hotel bookings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2. Manage hotel guests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3. Order room services and return total bill for a booking"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "For more details on how to use the app, you can"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "look at our [User Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "If you would like to extend this project, you can"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "look at our [Developer Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* This project is created as part of National University of Singapore CS2103 module in AY20/21. "
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 26,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    archiveName \u003d \u0027conciergebook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 5,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "ConciergeBook (CB) is a desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Sherman Lim"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/shermz-lim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/shermz-lim)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[[portfolio](team/shermz-lim.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Integration)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for maintaining the code repository and integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for coordinating technical efforts to adhere to the software architecture."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Gene Chua"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/iamgenechua.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](http://github.com/iamgenechua)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "[[portfolio](team/iamgenechua.md)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Logic and Model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for ensuring that the code is clean, readable, and bug-free so others can easily contribute to the codebase."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for keeping track of deliverables and deadlines to prevent occurrences of poorly-written, buggy code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Long Zeling"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/zeling595.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/zeling595)] "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/zeling595.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Ui)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Works on the UI of AB3 to fits the desired product."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Create tests for the app UI."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * Responsible for the documentation of the UI."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Hazel Tan"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cimg src\u003d\"images/hazel1603.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](http://github.com/Hazel1603)]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[[portfolio](team/hazel1603.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for ensuring that model fits well into code without much hassle. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Wu Yujin"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cimg src\u003d\"images/sherrywu178.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/SherryWu178)]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "[[portfolio](team/SherryWu178.md)]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Logic and Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for the tests of Storage."
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 1,
      "Hazel1603": 1,
      "-": 28,
      "iamgenechua": 4,
      "zeling595": 47
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103-W14-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-W14-2/tp) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103-W14-2/tp/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![Architecture Diagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-W14-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `deletePerson pid/1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "![Sequence Diagram of the Architecture](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BookingListPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletePerson pid/1\")` API call."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![Interactions Inside the Logic Component for the `deletePerson pid/1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* stores the person book, booking book, room book and room service book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cBooking\u003e` that can be \u0027observed\u0027 "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `PersonBook`, which `Person` references. This allows `PersonBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-W14-2/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* can save the person book, booking book and room service book data in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Create Booking Class --\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Booking Class"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "A `Booking` class is created as an association class of the Person and Room class. Accordingly, `BookingBook` and a"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "series of other commands associated with Booking are also created. A `Booking` object is created using the `addBooking`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "feature; it can be modified using `editBooking` and can be deleted from the database using `deleteBooking`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Create Booking Class --\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003c!-- Add Booking feature --\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Add Booking feature  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Add Booking: adds a booking. A person, a particular room, and a specified range of dates is tied to that booking - `addBooking`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The add booking feature is facilitated by:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. `Booking` class. `Booking` objects represent the booking made by the person when booking is added."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2. `BookingBook`. BookingBook tracks all the bookings created. It implements the following"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "operation that support the add booking feature:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    `BookingBook#addBooking()` - adds a new booking."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#addBooking()`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Given below is the example usage scenario:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Step 1. The user launches the ConciergeBook application. Data will be loaded from the storage to the application"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "memory. The `BookingBook` will be populated with `bookings` and the `PersonBook` will be populated with `persons`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Step 2. The user executes `addBooking pid/3641 rid/2105 sd/2020-12-25 ed/2020-12-28` command to add a booking. The booking"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "contains several values, a person ID of 3641, a room ID of 2105, and start date and end date of 25th December 2020"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "and 28th December 2020 respectively. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 3. If the parameters entered by the user is valid, the application will create a new `booking` with its own unique"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "booking ID that is stored in the `Model`. "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "This `booking` stores the information entered by the user. Else, ConciergeBook will display an error message"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "indicating that the user did not type in the parameters correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The following sequence diagram shows how the add booking operation works:  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "![AddBookingSequenceDiagram](images/AddBookingSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the person ID or room ID "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "that the user keys into the system does not exist, or the start date and end dates are not in the correct format,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "a CommandException will be thrown and the error will be displayed to the user. Also, if the start date is after the "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "end date, an error message will be similarly shown as well. Furthermore, if the user tries to add a booking that ties a person"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "with a room which has already been booked for that specified period, then an error message will be shown to the user as well."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "The following activity diagram summarises what happens when a user executes a `addBooking` command:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "![AddBookingActivityDiagram](images/AddBookingActivityDiagram.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "##### Aspect: Whether to store the Person in the Room class or create a separate Booking class"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Alternative 1 (current choice):** Create a Booking class."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Pros: No coupling between Person and Room. We can implement feature without modifying Room at all."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Cons: More work to create model, storage classes for Booking."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Alternative 2:** Stores Person directly in Room class."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Pros: More convenient."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Cons: Strong coupling between Person and Room. If we modify our Person object, we will have to modify Room."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003c!-- Add Booking feature --\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Edit booking feature --\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Edit Booking feature "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The edit booking feature is facilitated by:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. `Booking` class. `Booking` objects represent the target booking to be replaced and edited booking."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2. `BookingBook`. BookingBook tracks all the bookings created. It implements the following"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "operation that support the edit booking feature:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    `BookingBook#setBooking()` - set the target booking to the edited booking    "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "These operation is exposed in the `Model` interface as `Model#setBooking()`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 1. The user launches the ConciergeBook application. Data will be loaded from the storage to the application "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "memory. The `BookingBook` will be populated with `bookings` and the `PersonBook` will be populated with `persons`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 2. (Optional) The user executes `listBooking` command to list out all the bookings and find out the booking ID of"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "the booking to edit."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 3. The user executes `editBooking bid/2 rid/2103 sd/2020-12-30 ed/2020-12-31` command to edit booking with booking"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "ID 2. The room ID will be overwritten by 2103, start date by 30 December 2020, end date by 31 December 2020. Person ID"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "and booking ID cannot be modified. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 4. If the booking ID exists and there is at least one other parameters to edit, the application will create a new"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "`booking` to replace the old booking with the booking ID and store it in `Model`. Else, ConciergeBook will display"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "error message to show sample usage."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Given below is the sequence diagram that shows how the edit booking operation works."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "![EditBookingSequenceDiagram](images/EditBookingSequenceDiagram.png)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the booking ID that the user keys"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "into the system does not exist, a CommandException will be thrown and the error will be displayed to the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Also, if the only booking ID is specified, an error message will be shown to ask user to provide at least one field."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "If the edited booking duplicates or conflicts with existing booking, an error message will be shown as well. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The following activity diagram summarises what happens when a user executes a `editBooking` command:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "![EditBookingActivityDiagram](images/EditBookingActivityDiagram.png)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zeling595"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zeling595"
        },
        "content": "##### Aspect: Whether to update the existing booking or create new booking with edited fields to replace the existing booking."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Alternative 1 (current choice):** Create new booking with edited fields to replace the existing booking."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * Pros: Making `Booking` an immutable object increases the testability of the code and makes the command less error-prone."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * Cons: More work to create new booking and replace it in the list of bookings in model."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Alternative 2:** Update the existing booking"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * Pros: Easier to implement."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * Cons: More difficult to test."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Edit booking feature --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Find Booking feature --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Find Booking feature"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Find Booking: finds booking(s) with the following parameters: person ID, room ID, start date, end date and isArchived state - `findBooking`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The Find Booking feature is facilitated by:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. `Booking` class. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2. `BookingBook` class. BookingBook tracks all the bookings created. It implements the following"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "      operation that supports delete booking feature:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    `updateFilteredBookingList()` - update filteredBookingList with a predicate."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#updateFilteredBookingList`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "FindBooking features will be used in different scenarios:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. When the user wishes to know the detailed information about a booking. For example, a customer wishes to know which room"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "is he/she allocated to. The user can find the room based on the person ID, the start date and the end date of the booking.                                      "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2. When the user wish to delete/edit a Booking, the user will find the Booking with the relevant parameter first. For"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "example, if a customer wish to cancel his booking, the person ID, the start date and the end date of the booking will"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "be provided. The user then can use the above information to find out about the booking ID which is needed by"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "other features."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Given below is the example usage scenario:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 1: As the user launch the App, the Booking book will load the data from memory, the filteredBookings includes all"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "the bookings in the bookingList."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 2: The user will execute `findBooking pid/3 sd/2020-09-12 ed/2020-09-13`, trying to find the Booking "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "associated with person ID 3 which starts on 2020-09-12 and end on 2020-09-13. If such booking exist, the Command will "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "update the filteredList in the model so UI will update to only show the relevant bookings. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The user then can view the complete information about the booking(s), "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "including the booking ID, the room ID, the person ID, the start and end date, and the isArchived state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 3: If the user input is invalid, an error message will be displayed regarding the wrong fields. If no booking"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "which meet the parameters can be found, the filteredList will be empty hence no booking will be displayed in UI."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The following sequence diagram shows how the findBooking operation works:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "![FindBookingDiagram](images/FindBookingDiagram.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "##### Aspect: which parameters should be allowed to use in find Booking?"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Alternative 1 (current choice)**: room ID, person ID, startDate, endDate, and isArchived state"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Pros: Easy to implement."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Cons: Not as convenient as the user would have to search up for the person ID first."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Alternative 2**: person\u0027s name or phone number"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Pros: More user-friendly as the user only need to use one command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Cons: There are more complexity involved for one feature. When a booking cannot be found, it could be due to"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    there is no person information matches up with the given details (the person is not present in the database), or "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    due to a field provided by the customer is incorrect so there is no matching."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Find Booking feature --\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Delete Booking feature --\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Delete Booking feature"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Delete Booking: Delete the booking with the given booking ID `deleteBooking`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The delete booking feature is facilitated by:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. `Booking` class. "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2. `BookingBook` class. BookingBook tracks all the bookings created. It implements the following"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "   operation that supports delete booking feature:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    `deleteBooking()` - delete the booking object provided argument."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#deleteBooking()`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 1. The user launches the ConciergeBook application. Data will be loaded from the storage to the application "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        memory. The `BookingBook` will be populated with bookings."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 2. The user receives a request to cancel a booking, and the user deems that it is unnecessary to leave and data of the cancelled booking in the database."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 3. The user keys in the `deleteBooking` command, with parameters `bid/BOOKING_ID` where BOOKING_ID is the id of the booking for that guest."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 4. If the parameters entered by the user is valid, the booking will be removed from the booking book. "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        When the input is invalid (e.g. no booking with booking ID can be found), ConciergeBook will display an error message."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "The following sequence diagram shows how the deleteBooking operation works:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "![DeleteBookingSequenceDiagram](images/DeleteBookingSequenceDiagram.png)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "##### Aspect: Should user use display index or booking ID to locate the Booking"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Alternative 1 (current choice)**: booking ID"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Pros: Since bid/Booking ID is also used in other command (e.g. addBooking and findBooking), its usage is standardised.  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Cons: Not as convenient as the user need to look for the booking ID."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Alternative 2**: display index"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Pros: Easy to implement: can reuse addressBook code"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    - Cons: Since we have multiple lists in the app, it is possible that the user will be jumping between different lists. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    For example, a person might remember there is a booking to be deleted at index 4, but he proceeds to change the `personBook` which results in a change in the bookingBook (eg. deletePerson)."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Generally, referencing using ID is more reliable as ID is fixed and unique."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Delete Booking feature --\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003c!-- Archive and Unarchive Booking feature --\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "### Archive and Unarchive Booking feature"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The archive and unarchive booking feature is facilitated by:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. `active` boolean flag in `Booking` class. When `active \u003d false`, a booking is considered \"archived\"."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. The archive booking feature simply sets this flag in the Booking class to false in order to archive a booking. Similarly, "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "the unarchive booking feature would set this flag back to true to unarchive a booking."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#setBookingInactive()`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "The archive operation is used when a user wants to \"delete\" a Booking, but still want to retain the Booking in the hard disk. This Booking will be considered \"deleted\", and another guest will be able to stay in the same room during the same period as this Booking."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "In case a booking had been mistakenly archived, or that an archived booking had to be unarchived to meet business requirements, the unarchive operation allows the user to reverse his/her decision and restore the archived booking."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003c!-- Archive and Unarchive Booking feature --\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c!-- Room service feature --\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Order Room Service feature "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "The order room service feature is facilitated by:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. `RoomService` class. `RoomService` objects represent the room service that a person has ordered. It is tied to a"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "booking through the booking ID field."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2. `RoomServiceBook`. RoomServiceBook tracks all the RoomService that has been ordered. It implements the following"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "operations that support the order room service feature:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. `RoomServiceBook#addRoomService()` - adds a new room service."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. `RoomServiceBook#getRoomServicesForBooking()` - returns the room services ordered for a particular booking."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    This gives user access to room services that has been ordered for a particular booking."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addRoomService()`, and"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "`Model#getRoomServicesForBooking()` respectively."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Step 1. The user launches the application for the first time. The empty `RoomServiceBook`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "will be instantiated."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 2. The user checks in a guest into a room. A new Booking object will be created with a booking ID."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Step 3. The user receives a request from that guest to order room service."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Step 4. The user keys in the `orderRoomService` command, with parameters `bid/BOOKING_ID`, `rst/ROOM_SERVICE_TYPE`,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "where BOOKING_ID is the id of the booking for that guest, and ROOM_SERVICE_TYPE is the type of room service"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "to be ordered. "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Step 5. The room service will be added and tracked in the RoomServiceBook. When the user calls `getBill` , the bill for"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "the room services ordered will be reflected as well."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Given below is the sequence diagram that shows how the orderRoomService operation works (in step 5)."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "![RoomServiceSequenceDiagram](images/RoomServiceSequenceDiagram.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the booking ID that the user keys"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "into the system does not exist, a CommandException will be thrown and the error will be displayed to the user."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Also, if the booking ID that the user keys in is for a booking that has already been archived, an error"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "will be similarly shown as well. "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "##### Aspect: Whether to have a RoomService class"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Alternative 1 (current choice):** Create a RoomService class."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Pros: Decoupling between RoomService and Booking. We can implement feature without modifying Booking at all."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Cons: More work to create model, storage classes for RoomService."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Alternative 2:** Stores room services ordered directly in Booking class."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Pros: More convenient."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Cons: Strong coupling between Booking and feature. Will have to modify Booking if we want to modify our feature."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "##### Aspect: Whether to use subclass or enum to represent different types of RoomService"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Alternative 1 (current choice):** Use RoomServiceType enum."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Pros: Allow us to easily add new types without creating new classes. Easy storage also (as String)."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Cons: Can have limited difference between different types of RoomService."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Alternative 2:** Use subclasses extending from RoomService."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Pros: Can have added functionality for different types of RoomService."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  * Cons: A lot of inconvenience to add new types, and to store and retrieve from disk."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c!-- Room service feature --\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c!-- Filter Room feature --\u003e "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Filter Room feature "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ConciergeBook allows our user to run the `addBooking` Command with a Room ID that is not being occupied "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "between the indicated start and end date. "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Our user can find out which rooms of certain types are available within a stated start and end dates using the "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "`FilterRoom` Command. This room ID can subsequently be used for adding a booking for a guest. "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The Filter Room feature is facilitated by the `FilterRoomCommand`. It has the following fields: "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `sd`: The start date"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `ed`: The end date"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `typ`: The type of room that the user is filtering. The possible types are `SINGLE` (indicated by `1`), `DOUBLE` "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "(indicated by `2`) and `SUITE` (indicated by `3`). "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The start date and end date are compulsory fields, while the room type is optional. Omission of the room type will "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "result in displaying rooms of all types. "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given are several examples of usage scenarios when the user prompts to Filter Rooms: "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Scenario 1**. When the user provides a command with incomplete compulsory fields (e.g. end date), the "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "`FilterRoomCommandParser` will throw a `ParseException`, informing that the command is invalid and will return a "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "message indicating the correct usage for the `FilterRoomCommand`. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![FilterRoomSequenceDiagram](images/FilterRoomSequenceDiagram1.png)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "A similar flow will occur if the user provides an end date that is earlier than the inputted start date. "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The `FilterRoomCommandParser` will throw a `ParseException(“Start Date must be before End Date!”)`. The same will occur"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if the `typ` parameter is invalid (e.g. not 1, 2, or 3). It will throw a "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "`ParseException(“Invalid Room Type. Only 1, 2, 3 allowed.”)`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Scenario 2 (Ideal Scenario)**. Here is the Sequence Diagram for the `FilterRoomCommand` for an ideal case "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "(minor method calls are omitted). "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![FilterRoomSequenceDiagram](images/FilterRoomSequenceDiagram2.png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Obtaining the list of rooms of the indicated room type which are available between the start and end date is done "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "in a 3-step process: "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. Retrieve the unavailable rooms from the `BookingBook` using the `getUnavailableRooms` method. "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. Retrieve a list of available rooms by passing the list of unavailable rooms into the `RoomBook` using the "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "`getAvailableRooms` method. "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3. The list of available rooms is then filtered by room type, as indicated by the user. "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The following activity diagram summarises what happens when a user executes a `filterRoom` command:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![FilterRoomActivityDiagram](images/FilterRoomActivityDiagram.png)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "##### Aspect: Retrieving available rooms"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Alternative 1 (current choice)**: Retrieve unavailable rooms from BookingBook first, then retrieve the "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "desired list from RoomBook. "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Pros: Ensures that less dependency on the rooms in RoomBook. "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Cons: Have a slightly lower execution time. "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Alternative 2**: Rooms should have a field to indicate when they are occupied. "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Pros: Reduces a 2-step process into a 1-step process. "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Cons: Strong coupling between Room and Booking. "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Increases the complexity of other commands, such as editBooking and archive due to the increased dependency. "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "We also concluded that there was no need for rooms to know when they are occupied - this should be handled by the Bookings. "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c!-- Filter Room feature --\u003e "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c!-- Get Bill feature --\u003e "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Get Bill feature "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The get bill feature is facilitated by: "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. `BookingBook`. The Booking Book keeps track of details of all the Bookings available in the system. "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. `RoomBook`. The Room Book keeps track of the price and types of all Rooms available in the system. "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. `RoomServiceBook`. The Room Service Book keeps track of all room services ordered by all rooms. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given below is an example usage scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 1. The user adds a booking to the system, which creates a new Booking with a booking ID. \u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 2. The user requests for several room services for the room using the booking ID. \u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Step 3. The user wants to calculate the total bill for the stay, including the room services ordered. \u003cbr\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Step 4. The user keys in `getBill` command, with the `booking ID` as the parameter, where booking ID is the id of the booking for that guest. \u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Step 5. A receipt will be generated, informing the user of the total bill and a breakdown of the bill. \u003cbr\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given below is the sequence diagram that shows how the `getBill` operation works in Step 5. "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![GetBillActivityDiagram](images/GetBillSequenceDiagram.png)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the booking ID that the user keys"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "into the system does not exist, a CommandException will be thrown and the error will be displayed to the user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Obtaining the total price of the stay is achieved in a 5-step process. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. Using the booking ID inputted by the user, the `BookingBook` will be accessed to retrieve the details of the booking."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. The roomId of the booking will be used to access the `RoomBook`. The room associated with the booking will be retrieved. "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. The base price of the room is calculated using the price of the room and the number of nights stayed, which is taken from the details of the booking. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. The booking ID will also be used to retrieve the list of room services ordered by the guest from the `RoomServiceBook`. "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. The total bill for the stay is then computed and a receipt is generated. "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "The following activity diagram summarises what happens when a user executes a `getBill` command: "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "![GetBillActivityDiagram](images/GetBillActivityDiagram.png)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "##### Aspect: Calculating the total price"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Alternative 1 (current choice)**: Compute the final bill only when requested."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Pros: Ensures that there is less dependency on the bookings and allows for modifications to the duration of the stay.  "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Cons: Have a slightly lower execution time. "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Alternative 2**: Maintain a total bill field in every booking and update the price whenever a change happens (e.g. room service ordered or edit booking duration). "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Pros: Reduces the steps needed.  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Cons: Have to ensure price is always maintained correctly when a change happens."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "If the application is developed further to accommodate the removal of room services, it would complicate the procedure and make it prone to bugs. "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Bookings can also be edited. Hence, editing the duration of the booking would affect this initially computed price and there is a need to calculate the price again. "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c!-- Get Bill feature --\u003e "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix A: Effort**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This section aims to document the effort that our team has put into creating ConciergeBook, which we estimate took"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "more than the effort it takes to create AB3 due to the various complexities involved."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Challenges \u0026 Effort Required"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. The most crucial challenge for ConciergeBook was the need to create and manage a lot more entities as compared to "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "AB3. We had to extend AB3, which only had the `Person` entity, and add other entities needed to be represented in a hotel booking: these includes the `Room` entity and the `Booking` entity itself. We thus required the following effort:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Creating these new entities entail creating the appropriate classes in the `model` package to manage these entities in memory."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. We also had to create `storage` classes to save the bookings on the hard disk."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. To allow our user to manage the hotel bookings, we also have to create new user features which required us to manage complexities involved in dealing with multiple entities. For example,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. To allow our user to see which rooms are available for booking, we have to manage both the `Room` and `Booking` entites, in order to find out which rooms are not booked at a particular time period."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Allowing users to manage Booking objects also span multiple entities - as a `Booking` is defined to have a `Room` and a `Person` as well. As such, we have to manage complexities such as checking whether the Person/Room exists before creating the Booking, and also complexities that come with dealing with dates, such as checking whether a booking is in conflict with another booking. i.e. they occupy the same room during the same period."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. To enhance the user experience, we also added extension functionalities that required significant effort from our end:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Notably, we added another entity `RoomService` (along with `model` and `storage` classes) to allow our user to track the room services ordered by the hotel guests. This entity combined with the `getBill` command allows the user to return the total bill for a booking - including the cost of stay and room services ordered."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. To support the management of bookings, we extended the AB3\u0027s UI to show the list of bookings as well. We also added in a home page to show useful information to the user. These required changes to the UI, and throughout the app as well to allow the `logic` of our app to switch between the different UIs available."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Achievements"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Added more than **12,000** lines of code to AB3."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2. Added 3 more entities (`Room`, `Booking`, `RoomService`) on top of AB3\u0027s `Person` entity"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3. Have a total of 20 user commands (AB3 has 8)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "4. Have a total of 496 test cases (compared to the original 200+ in AB3) and increased test coverage to 74% despite adding a lot more code."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix B: Product scope**"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* receptionist at a small hotel"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* has to handle the bookings of guests"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* has to manage other details of hotel stay (e.g. guest information, bill)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* can type reasonably fast"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Value proposition**: allows receptionist to handle the bookings of guests "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "faster than a typical mouse/GUI driven app and gives both the receptionist and guests a pleasant experience."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix C: User stories**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| Priority | As a …​              | I want to …​                                                                                         | So that I …​                                                            |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| -------- | --------------------| ----------------------------------------------------------------------------------------------------| ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | [EPIC] can manage the bookings in the hotel.                                                        |                                                                        |"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "| `* * *`  | hotel receptionist  | answer guest queries about which rooms are available for a block of dates                           | know which rooms I can book for them                                   |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | add bookings associated with a particular room in our system                                        | can keep track of the rooms occupied.                                  |"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | archive cancelled bookings and make the room available again                                        | other guests can book the room                                             |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | [EPIC] keep track of the hotel’s customer profiles                                                  |                                                                        |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | create new customer profiles as they book rooms                                                     | keep track of their past bookings                                      |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* *`    | hotel receptionist  | search the room he/she has booked with the guest\u0027s id                                               | locate details of persons without having to go through the entire list |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | [EPIC] keep track of guests’ billings                                                               |                                                                        |"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | bill them by the number of nights they stay and room service ordered in a particular room           | I can answer queries from guests after a stay.                         |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | [EPIC] keep track of room services ordered by guests.                                               |                                                                        |"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist  | provide `WIFI`, `DINING` and `MASSAGE` room services for guests.                                    |                                                                        |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix D: Use cases**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "(For all use cases below, the **System** is the `ConciergeBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC01`: Add a guest profile**  "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User inputs the guest\u0027s information"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook creates the guest\u0027s profile"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. Guest\u0027s information is invalid  \u003cbr\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* 1a1. ConciergeBook displays error message and requests for the correct data.  \u003cbr\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* 1a2. User enters new data. \u003cbr\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Use case resumes from step 2.\u003cbr\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case:`UC02`: Find a guest profile**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User enters a list of keywords. "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook shows a list of guests whose name contains any of the keywords. "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. User does not enter any input. "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* 1a1. ConciergeBook shows an error message. \u003cbr\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Use case resumes at step 1. "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. No guest match the keywords. \u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* 2a1. ConciergeBook shows an empty list. \u003cbr\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC03`: Delete a guest profile**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User requests to list or \u003cins\u003efind guests (UC02)\u003c/ins\u003e."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook shows a list of guests. "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3.  User request to delete a specific guest in the list. "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "4.  ConciergeBook deletes the guest\u0027s profile and all associated bookings and room service ordered. "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. The list is empty. \u003cbr\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3a. The given index is invalid.  \u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* 3a1. ConciergeBook shows an error message  \u003cbr\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC04`: Edit a guest profile**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User requests to list or \u003cins\u003efind guests (UC02)\u003c/ins\u003e."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook shows a list of guests. "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3.  User request to edit a specific guest in the list and provides the new information. "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "4.  ConciergeBook updates the guest\u0027s profile"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extensions** \u003cbr\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. The list is empty. \u003cbr\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3a. The given index is invalid.  "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3a1. ConciergeBook shows an error message.  "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3b. The information provided is invalid format or no new information is provided. \u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3b1.  ConciergeBook requests for correct data. \u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3b2.  User enters new data.\u003cbr\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "      Steps 3b1-3b2 are repeated until the data entered are correct.\u003cbr\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "      Use case resumes from step 4."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC05`: Filter rooms**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. User inputs a start date, end date and a optional room type. "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. ConciergeBook lists out all the matching rooms which are available within the start and end date. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. User inputs a start date that is after the end date. \u003cbr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 1a1. ConciergeBook throws a error message. \u003cbr\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 1. "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1b. User inputs an invalid room type. \u003cbr\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 1b1. ConciergeBook throws an error message. \u003cbr\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 1. "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC06`: List rooms**  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**  "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. User inputs an optional room type.  "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. ConciergeBook lists out all matching rooms.  "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. Room type is in invalid.  "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\t* 1a1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC07`: Find a booking**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. User enters a list of requirements. "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. ConciergeBook displays a list of bookings that match the requirements. "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. User enters invalid information or no new information. \u003cbr\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 1a1. ConciergeBook throws an error message and request for correct information. \u003cbr\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 1a2. User inputs correct information. \u003cbr\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Step 1a1-1a2 are repeated until the information is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 2. "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. No bookings match the requirements. \u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a1. ConciergeBook shows an empty list. \u003cbr\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC08`: Edit bookings**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User requests to list or \u003cins\u003efind bookings (UC07)\u003c/ins\u003e."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook shows a list of bookings. "
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3.  User request to edit a specific booking in the list and provides the new information. "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "4.  ConciergeBook updates the booking"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extensions** \u003cbr\u003e "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. The list is empty. "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "3a. The given booking ID is invalid.  "
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3a1. ConciergeBook shows an error message.  "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3b. The start date is after the end date. \u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3b1. ConciergeBook shows an error message.\u003cbr\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3c. The information provided is invalid format or no new information is provided. \u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3c1.  ConciergeBook requests for correct data. \u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3c2.  User enters new data. \u003cbr\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "      Steps 3c1-3c2 are repeated until the data entered are correct.\u003cbr\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "      Use case resumes from step 4."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "      "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3d. The modified booking overlaps with another existing booking or is a duplicate booking. \u003cbr\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3d1. ConciergeBook shows an error message and requests for the correct data. \u003cbr\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3d2. User enters new data. \u003cbr\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Steps 3d1-3d2 are repeated until the data entered are correct.\u003cbr\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes from step 4."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC09`: Delete a booking**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1.  User requests to list or \u003cins\u003efind bookings (UC07)\u003c/ins\u003e. "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2.  ConciergeBook shows a list of bookings. "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3.  User request to delete a booking. "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "4.  ConciergeBook deletes the booking and all associated room service ordered and shows a success message. "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2a. There are no bookings in the ConciergeBook. \u003cbr\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case ends. \u003cbr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3a. User enters an invalid Booking Id. \u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3a1. ConciergeBook shows an error message and request for the correct data. \u003cbr\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 3a2. User enters new data. \u003cbr\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes from step 4."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC10`: Add a booking**  "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. User \u003cins\u003efinds a guest (UC02)\u003c/ins\u003e.  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. User \u003cins\u003efinds an available room (UC05)\u003c/ins\u003e."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3. User inputs the person’s ID, room ID, start date and end date.  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "4. ConciergeBook creates a booking and saves it.  "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Use case ends.  "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1a. Person cannot be found.  "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 1a1: User \u003cins\u003ecreates a profile for the person (UC01)\u003c/ins\u003e.  "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2a. User inputs invalid room ID.  "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\t* 2a1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3a. User inputs start date and/or end date in wrong format.  "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\t* 3a1: ConciergeBook throws error message. "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3b. End date is earlier than start date.  "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\t* 3b1: ConciergeBook throws error message. "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3c. Start date and end date are more than 30 nights apart.    "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\t* 3c1: ConciergeBook throws error message. "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC11`: Find Booking ID associated with Guest**"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "1. User \u003cins\u003efinds the guest id (UC02)\u003c/ins\u003e associated with the guest. "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. User \u003cins\u003efinds the booking (UC07)\u003c/ins\u003e associated with the person. "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1a. No guest ID associated. \u003cbr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2a. No booking ID found. \u003cbr\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use case `UC12`: Order Room Service**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. User \u003cins\u003efinds the booking ID associated with a guest (UC11)\u003c/ins\u003e or "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cins\u003e finds the booking ID associated with room Id (UC07)\u003c/ins\u003e."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. User request for room service. "
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3. ConciergeBook saves the room service and shows a success message. "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2a. User inputs an invalid booking ID or room service type. \u003cbr\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a1. ConciergeBook shows an error message and requests for correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a2. User inputs correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Step 2a1-2a2 are repeated until the data provided is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Use Case `UC13`: Get Bill**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User \u003cins\u003efinds the booking ID associated with a guest (UC11)\u003c/ins\u003e or "
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u003cins\u003e finds the booking ID associated with room ID (UC07)\u003c/ins\u003e. "
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "2. User requests for the bill for the booking. "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "3. ConciergeBook shows a receipt and displays the total bill. "
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2a. User inputs invalid booking ID. \u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a1. ConciergeBook shows an error message and requests for correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a2. User inputs correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Step 2a1-2a2 are repeated until the data provided is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use Case `UC14`: Archive a booking**"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User \u003cins\u003efinds the booking ID associated with a guest (UC11)\u003c/ins\u003e or "
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cins\u003e finds the booking ID associated with room Id (UC07)\u003c/ins\u003e."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  User requests to archive the booking with the booking ID found in step 1. "
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3.  ConciergeBook shows a success message and archives the booking. "
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2a. User inputs invalid booking ID. \u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a1. ConciergeBook shows an error message and requests for correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a2. User inputs correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Step 2a1-2a2 are repeated until the data provided is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2b. User requests to archive a booking that has already been archived. \u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2b1. ConciergeBook shows an error message.\u003cbr\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case resumes at step 1. "
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use Case `UC15`: Unarchive a booking**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User \u003cins\u003efinds the booking ID associated with a guest (UC11)\u003c/ins\u003e or "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cins\u003e finds the booking ID associated with room Id (UC07)\u003c/ins\u003e."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  User requests to unarchive the booking with the booking ID found in step 1. "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3.  ConciergeBook shows a success message and unarchives the booking. "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**Extension** \u003cbr\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "2a. User inputs invalid booking ID. \u003cbr\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a1. ConciergeBook shows an error message and requests for correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2a2. User inputs correct information.\u003cbr\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Step 2a1-2a2 are repeated until the data provided is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Use case resumes at step 3. "
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2b. User requests to unarchive a booking that has not been archived. \u003cbr\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2b1. ConciergeBook shows an error message.\u003cbr\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case resumes at step 1. "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2c. User requests to unarchive a booking even though an active duplicate or active conflicting booking exists. \u003cbr\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * 2c1. ConciergeBook shows an error message.\u003cbr\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case resumes at step 1. "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    "
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix E: Non-Functional Requirements**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2.  Should be able to hold up to 1000 records of bookings without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "4.  Should have a UI that looks like a modern desktop app."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "5.  A receptionist new to the app should be able to pick it up quickly."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "6.  Should provide helpful prompts and guides receptionist to accomplish tasks. "
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix F: Glossary**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Receptionist**: User of the application as defined in the target user profile."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Hotel Guest**: The customer of the hotel who will be making a booking with the hotel."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Booking**: Records that track the information of a Hotel Guest\u0027s stay with the hotel."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Room**: The hotel room that the Hotel Guest is staying in."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## **Appendix G: Instructions for manual testing**"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample bookings. The window size may not be optimum."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Deleting a person while all persons are being shown."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisites: List all persons using the `listPerson` command. Multiple persons in the list. Choose a person to delete by noting down his/her person ID."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `deletePerson pid/1`\u003cbr\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Person in the list with person ID `1` will be deleted from the list. Success message shown in the status message. All bookings associated with the person will be deleted at the same time."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `deletePerson pid/x` (where x is non-existent person ID)\u003cbr\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `deletePerson pid/abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Command not executed as person ID format is invalid. Error details shown in the status bar. Status bar remains unchanged."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect delete commands to try: `deletePerson`, `deletePerson pid/`, `deletePerson bid/abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Add a booking"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Add a booking with provided details."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listPerson` to find out the ID of the person for the new booking."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `addBooking pid/5 rid/2120 sd/2020-12-12 ed/2020-12-25`\u003cbr\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Add booking for person with person ID 5 into room ID 2120 from 12 December 2020 to 25 December 2020. Success message shown in the status message. A new booking will be shown in the booking list panel. "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `addBooking pid/5 rid/20 sd/2020-12-12 ed/2020-12-25`\u003cbr\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Error of invalid room ID shown in the status bar. No booking will be added."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `addBooking pid/5 rid/2120 sd/2020-12-12`\u003cbr\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Error of invalid command format and command usage shown in the status bar. No booking will be added."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect addBooking commands to try: `addBooking pid/5 rid/2120 sd/2020-12-13 ed/2020-12-10`(start date is after end date), `addBooking pid/x rid/2120 sd/2020-12-12 ed/2020-12-25`(where x is non-existent person ID).\u003cbr\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Edit a booking"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Edit the room ID, start date and/or end date of a booking."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to be edited."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `editBooking bid/1 rid/2105`\u003cbr\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Edits the room ID of the booking with ID 1 to be 2105. Success message shown in status bar."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `editBooking bid/x sd/2021-12-13`(where x is non-existent booking ID)\u003cbr\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Error of invalid booking ID shown in status bar. No booking is edited."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect editBooking commands to try: `editBooking bid/2 sd/2021-12-13 ed/2020-12-12`(start date after end date), `addBooking pid/1 rid/2120 sd/2020-12-12 ed/2020-12-25` followed by `editBooking bid/1 rid/2120 sd/2020-12-12 ed/2020-12-25`(duplicate booking)."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Delete a booking"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Delete a booking specified by booking ID."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to be deleted."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `deleteBooking bid/1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Delete booking with booking ID 1. Success message shown in status bar."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `deleteBooking bid/x` (where x is non-existent booking ID)\u003cbr\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: No booking is deleted. Error of invalid booking ID shown in status bar."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect delete commands to try: `deleteBooking`, `deleteBooking bid/`, `deleteBooking pid/abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         Expected: Similar to previous."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Find a booking"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Find the bookings which match all the given predicates, namely person ID, room ID, start date, end date and isArchived status."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. No prerequisite."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `findBooking pid/3`(provided person ID 3 exists)\u003cbr\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: List the booking with booking ID 3 in booking list panel. Success message shown in status bar."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `findBooking sd/2020-11-12 ed/2020-11-16`\u003cbr\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: List all the bookings which starts from 12 Nov 2020 and ends on 16 Nov 2020."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `findBooking`\u003cbr\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Error of invalid command format and command usage shown in the status bar."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect commands to try `findBooking 1`, `findBooking bid/abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Archive a booking"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Archive a booking marks the booking as archived. It is still stored in the hard disk."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to be archived."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `archiveBooking bid/42`\u003cbr\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Booking with booking ID 42 is archived. Success message shown in status bar."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `archiveBooking bid/x`(where x is non-existent booking ID)\u003cbr\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: No booking is archived. Error details shown in the status bar."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect commands to try `archiveBooking`, `archiveBooking pid/abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Similar to the previous."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  "
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Unarchive a booking"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Unarchive an already archived booking (undos the previous command)."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to be unarchived."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `unarchiveBooking bid/42`\u003cbr\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Booking with booking ID 42 is unarchived. Success message shown in status bar."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     "
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `addBooking pid/5 rid/2120 sd/2020-12-12 ed/2020-12-25` creates booking with booking ID 1, `archiveBooking bid/1` archives the booking, `addBooking pid/5 rid/2120 sd/2020-12-12 ed/2020-12-25` creates a booking with same details as the previous booking but different booking ID. `unarchiveBooking bid/1` unarchives the previous booking \u003cbr\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: The booking is not archived. Duplicate booking error shown in status bar."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  "
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect commands include unarchive a booking that conflicts with an existing booking.\u003cbr\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Similar to the previous."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Order room service"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Order room service for a particular booking. Available room service types are WIFI, DINING and MASSAGE."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    "
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to order room service for."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `orderRoomService bid/1 rst/WIFI`\u003cbr\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Orders WIFI room service for booking with ID 1. Success message shown in status bar."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      "
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect commands to try `orderRoomService bid/2`, `orderRoomService pid/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Similar to the previous."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### View a bill"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "zeling595"
        },
        "content": "1. Gets the bill of a specified booking ID. A bill will be display in the UI."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisite: `listBooking` to find out the ID of the booking to get bill."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `getBill bid/6`\u003cbr\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: The bill for the booking ID 6 shown in status bar."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: `getBill bid/x`(where x is a non-existent booking ID)\u003cbr\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Error message of invalid booking ID shown in status bar. The bill is not displayed."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Other incorrect commands to try `getBill pid/1`, `getBill 1`.\u003cbr\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: Similar to the previous.       "
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Prerequisites: Removing or Modifying files in data folder residing in same directory as ConciergeBook.jar."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   "
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: Deleting the entire data folder.\u003cbr\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: ConciergeBook will attempt to access the folder. If it does not exists, the data folder will be automatically created with default settings. Other jsons beside preferences.json will be created upon modification of sample data loaded."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "   1. Test case: Corrupting data files by modifying its entries.\u003cbr\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      Expected: ConciergeBook will try its best to parse the data. If it is not valid, it must be corrupted. Therefore the application will load up with default settings and sample data."
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 146,
      "shermz-lim": 101,
      "Hazel1603": 325,
      "-": 277,
      "iamgenechua": 108,
      "zeling595": 144
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [ConciergeBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). ConciergeBook is designed as a hotel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "booking management system that provides a core set of functionalities for guests and hotel bookings management."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "The [Quick Start](#quick-start) section shows you how to quickly get ConciergeBook up and running on your computer.\u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "If you are a new user, it is recommended to start from the [Walk-through](#walk-through) section.\u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "If you are an experienced user, and just want to refer to the list of features, you may head straight to "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "either the [Features](#features) section (which is more detailed) or the [Command Summary](#command-summary) section."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Ensure you have `Java 11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Download the latest `conciergebook.jar` file from [here](https://github.com/AY2021S1-CS2103-W14-2/tp/releases)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ConciergeBook app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Open your terminal at where the home folder is and run `java -jar conciergebook.jar` to start the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. You should now see ConciergeBook\u0027s home page:\u003cbr/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Now that you have got ConciergeBook up and running, you may go through the rest of this user guide to learn how"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "you can use the app!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Walk-through"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This section aims to introduce to a new user the core set of entities and functionalities in ConciergeBook. It provides"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "the user with an overview of how the app is designed, and how it is meant to be used."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Guests Management"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "One of the core entities in ConciergeBook is `Person`, which represents the guests of our hotel."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Each person registered is assigned a unique person ID.\u003cbr/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook provides `CRUD` (Create, Read, Update \u0026 Delete) functionalities to manage the records of guests in the hotel"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "system."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Hotel Rooms"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Another core entity in ConciergeBook is `Room`, which represents the hotel rooms available in the system."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Each hotel room has a unique room ID. \u003cbr/\u003eWe have different types"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "of rooms in the system, and they have different prices. Each room is only tied to 1 guest for easier management. Guest(s) can stay in the room for a particular period, and this is managed by the `Booking` entity which will be introduced in the next section."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Bookings Management"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "The entity `Booking` ties the guest we have registered in our system to a room, thus representing a hotel booking. Each `Booking`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "has a unique ID and lasts for a specific duration which is capped at `30 nights` (the maximum duration a guest can stay in a hotel room)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook provides `CRUD` functionalities for the management of hotel bookings in the system."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "In addition, ConciergeBook also provides the following extension functionalities:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The receptionist can order `RoomService` for a particular booking if requested by the guest. There are various types of room services available with different prices."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The receptionist can easily compute the bill for a particular booking, so the guests can know how much they have to pay for their stay. The bill includes the price for the stay, as well as the cost of any additional room services ordered."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### End of Walk-through"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "We hope you now have a better understanding of how ConciergeBook works and are excited to get started. You should now head to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "[Features](#features) section, which specifies the CLI commands you could use to access the various functionalities as introduced."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "The features are categorised into 4 core set of functionalities as introduced in the [Walk-through](#walk-through),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "with an additional section for miscellaneous features."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* [Guests Management Features](#guest-management-features)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* [Hotel Rooms Features](#hotel-rooms-features)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* [Booking Management Features](#booking-management-features)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* [Extension Features](#extension-features)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* [Miscellaneous Features](#miscellaneous-features)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**:information_source: Some Notes about the Command Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  e.g. in `addPerson n/NAME`, `NAME` is a parameter which can be used as `addPerson n/John Doe`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  e.g in `findBooking [sd/START_DATE]`, the parameter start date is optional."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/VIP`, `t/VIP t/halal food` etc."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* If parameters are inputted multiple times where only one is expected, the last instance will be accepted. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  e.g. if the command specifies `editBooking bid/2 sd/2020-11-12 sd/2020-11-15`, the new start date will be taken as `2020-11-15`. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Guest Management Features "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This set of features allows you to manage the guests in the system. You will be able to Create, Read, Update and Delete the Person objects, and also search for any Person currently registered in the system. When using these features, the Person UI will be displayed"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "and it should look like that:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "![Person list UI](images/personList.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Listing all persons : `listPerson`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Lists all persons in ConciergeBook.\u003cbr/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This feature should be used when you want to switch to the Person UI, and view all the guests currently registered in the system."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `listPerson`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Locating persons by name: `findPerson`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Finds persons whose names contain any of the given keywords.\u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This feature is used when you want to check whether a particular person is already registered in the system before creating a booking for him/her with the person\u0027s ID. You can search via the person\u0027s name. If the person is not registered, you can look at the `addPerson` command to see how you can do so."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `findPerson KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `findPerson John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* `findPerson tan ho` returns `Amy Tan`, `James Ho`, `Bob Tan`\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  ![result for \u0027find tan ho\u0027](images/findTanHoResult.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Adding a person: `addPerson`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Adds a person to the ConciergeBook. After doing so, you will be able to create a booking for the person with the newly assigned person ID. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `addPerson n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Prefixes that are not listed in the format of the command may be parsed as part of another. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Address allows special characters e.g. `/`, `#`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `addPerson n/Damith C Rajapakse p/90123456 e/dcsdcr@nus.edu.sg a/NUS SOC t/VVIP`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `addPerson n/Amanda Leow p/82340582 e/amanda@yahoo.com.sg a/Orchard`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `addPerson n/Amy Tan p/91233344 e/amy@gmail.com a/Cinnamon College pid/2` will create a person with `Cinnamon College pid/2`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "as the address. "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* `addPerson n/Amy Tan pid/2 p/91233344 e/amy@gmail.com a/Cinnamon College` will throw an error as `/` is not allowed in name."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Editing a person : `editPerson`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Edits an existing person in ConciergeBook to update the guest\u0027s personal information."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Format: `editPerson pid/PERSON_ID [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Edits the person with ID `PERSON_ID`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The PERSON_ID refers to the unique ID of the person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The PERSON_ID **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Prefixes that are not listed in the format of the command may be parsed as part of another. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "*  `editPerson pid/1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the person with ID 1 to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "*  `editPerson pid/3 n/Betsy Crower` Edits the name of the 2nd person to be `Betsy Crower`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027editPerson pid/3\u0027](images/editPersonpid3.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Deleting a person : `deletePerson`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Deletes the specified person from ConciergeBook."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Format: `deletePerson pid/PERSON_ID`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Deletes the person with ID `PERSON_ID`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The PERSON_ID refers to the unique ID of the person."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The PERSON_ID **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `deletePerson pid/2` deletes the person with ID `2` in ConciergeBook."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027deletePerson pid/2\u0027](images/deletePersonpid2.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Hotel Rooms Features"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This set of features allows you to view the hotel rooms available in the system, so that you can find a suitable hotel room for the guest! The rooms will be listed as their unique room IDs, which can be used as the `ROOM_ID` in the `rid/ROOM_ID` parameter for managing the bookings."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Listing hotel rooms: `listRoom`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Shows a list of all the rooms in the room book with their unique room IDs."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `listRoom [typ/ROOM_TYPE]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* An optional `ROOM_TYPE` can be provided to filter the list based on the hotel room’s type. Only 1, 2, and 3 are accepted "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  as parameters. 1 indicates Single Rooms, 2 indicates Double Rooms, 3 indicates Suite Rooms. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `listRoom` will list all the rooms in the Room Book with their unique room IDs. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `listRoom typ/3` will list all the suite rooms in the Room Book with their unique room IDs. "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027listRoom typ/3\u0027](images/listRoomTyp3.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Filtering hotel rooms: `filterRoom`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Allows user to quickly search for the available rooms during a time period.\u003cbr/\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This feature is used for you to find a suitable room for the guest who is planning to stay during a particular time period. The rooms available will be returned as an array of unique room IDs which can then be used to create the booking."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `filterRoom sd/START_DATE ed/END_DATE [typ/ROOM_TYPE]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Both `START_DATE` and `END_DATE` have to be provided to list all the hotel rooms that are available within those dates."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Dates have to be in the format `yyyy-MM-dd`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* An optional `ROOM_TYPE` can be provided to filter the list based on the hotel room’s type. Only 1, 2, and 3 are accepted "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "as parameters. 1 indicates Single Rooms, 2 indicates Double Rooms, 3 indicates Suite Rooms. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `filterRoom sd/2020-09-14 ed/2020-09-17` filters all the hotel rooms which are available from Sept 14 2020 to Sept 17 2020."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `filterRoom sd/2020-11-09 ed/2020-11-15 typ/2` filters all double rooms which are available from Nov 9 2020 to Nov 15 2020."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027filterRoom\u0027](images/filterRoom.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Booking Management Features"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This set of features allows you to manage the bookings in the system. You will be able to Create, Read, Update and Delete the Booking objects, and also search for any Booking currently created in the system. When using these features, the Booking UI will be displayed"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "and it should look like that:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "![Booking list UI](images/bookingList.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Listing bookings: `listBooking`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Lists the bookings sorted by start date. Bookings with latest start date will be shown first. Archived bookings will be shown at the end.\u003cbr/\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This feature should be used when you want to switch to the Booking UI, and view all the bookings currently in the system."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `listBooking`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Lists all the bookings."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* `listBooking` lists all the bookings."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Adding Booking: `addBooking`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "A Booking is tied to a person specified by the PERSON_ID and a room specified by the ROOM_ID, for a particular time period."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "To add a booking, this is the recommended workflow:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. If the person to be added has not been registered, use `addPerson` command to register the person in the system."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2. Use `findPerson` command to search for the person using his/her name and take note of his/her PERSON_ID."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3. Use `filterRoom` to find all available rooms during that particular time period and take note of the ROOM_ID."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "4. Use the `addBooking` command to add the booking into the system with PERSON_ID and ROOM_ID."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `addBooking pid/PERSON_ID rid/ROOM_ID sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Add a booking for a person with `PERSON_ID` at the specified `ROOM_ID` from `START_DATE` to `END_DATE`.     "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* The specified `PERSON_ID` of the person **must be a positive integer** and **must have been added to ConciergeBook**."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* The `ROOM_ID` **must be a positive integer** and **have to correspond to an existing room in the hotel.** "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* The `ROOM_ID` determines what type of hotel room it is. Single rooms ($70/night) are from `ROOM_ID` 2103 to 2112."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Double rooms ($100/night) are from `ROOM_ID` 2113 to 2122. Suite rooms ($150/night) are from `ROOM_ID` 2123 to 2132."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Both the `START_DATE` and `END_DATE` **must be in valid date format in the format yyyy-MM-dd.**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* `START_DATE` must be before `END_DATE`, and the maximum duration of stay must be less than or equal to 30 nights."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* All the fields must be provided."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* The added booking cannot be a duplicate booking or conflict with any existing bookings.  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Note: only a single person should be tied to a booking, as we only require a single point-of-contact to be registered in the system. More than 1 person can definitely stay in the hotel room."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Note: ConciergeBook believes the user knows best. ConciergeBook will give users the autonomy to add bookings as he/she"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "sees fit. Hence, users are allowed to add bookings far into the future or in the past if it is necessary for the user to do so.  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "*  `addBooking pid/5 rid/2120 sd/2020-12-12 ed/2020-12-25` Add booking for person with person ID `5` into room ID `2120`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "from 12 December 2020 to 25 December 2020."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027addBooking\u0027](images/addBooking.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Editing a booking : `editBooking`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Edits an existing booking in the booking book. You should search for the booking you want to edit first using `findBooking` and "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "note its BOOKING_ID."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Format: `editBooking bid/BOOKING_ID [rid/ROOM_ID] [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Edits the booking with booking ID `BOOKING_ID`. The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Date must have the format of `yyyy-MM-dd`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* The edited booking cannot be a duplicate booking or conflicts with any existing booking."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "*  `editBooking bid/2 rid/2105` Edits the room ID of the booking with ID `2` to be `2105`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "*  `editBooking bid/1 sd/2021-11-23` Edits the start date of the booking with ID `2` to be `2021-12-13`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027editBooking\u0027](images/editBooking.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Deleting a booking : `deleteBooking`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Deletes a booking in the booking book. You should search for the booking you want to delete first using `findBooking` and "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "note its BOOKING_ID."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: `deleteBooking bid/BOOKING_ID`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Deletes the booking with booking ID `BOOKING_ID`. The ID **must be a positive integer** 1, 2, 3, …​ "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " and must be present in the bookingBook."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "*  `deleteBooking bid/1` Deletes the booking with ID 1."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Locating bookings: `findBooking`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Finds the bookings which match all the given predicates. This feature is used when you want to find a booking related to a"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "particular person, room, for a particular period and whether it is archived. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: `findBooking [pid/PERSON_ID] [rid/ROOM_ID] [sd/START_DATE] [ed/END_DATE] [ac/IS_ARCHIVED]`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The order of the parameters does not matter. e.g. `findBooking pid/3 rid/2103` is the same as `findBooking rid/2103 pid/3 `"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* the input room ID and person ID must be valid (registered in the database)."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* At least one parameter should be provided."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* `findBooking pid/3` returns all the bookings related to the person with person ID 3."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* `findBooking sd/2020-11-12 ed/2020-11-16` returns all the bookings which starts from 12 Nov 2020 and ends on 16 Nov 2020."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027findBooking\u0027](images/findBooking.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Archiving a booking: `archiveBooking`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Archives a booking - similar to deleting, but we still store it on the disk. The room for the booking can"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zeling595"
        },
        "content": "now be occupied by a guest in the same period. Bookings in the past are not necessarily archived as the data might still be used for hotel management purposes such as customer preference data analysis."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `archiveBooking bid/BOOKING_ID`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Archives booking with the specified `BOOKING_ID`.  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` refers to the unique identifier of the booking. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` must be a valid booking ID of an unarchived booking in the BookingBook.  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `archiveBooking bid/10` archives booking with the valid booking ID of `1`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027archive bid/10\u0027](images/archivebid10.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Unarchiving a booking: `unarchiveBooking`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Unarchives an already archived booking (undos the previous command).  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "For consistency, a booking cannot be unarchived if there is an existing active duplicate booking or an existing"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "active conflicting booking."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `unarchiveBooking bid/BOOKING_ID`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Unarchives booking with the specified `BOOKING_ID`.  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` refers to the unique identifier of the booking. "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` must be a valid booking ID of an archived booking in the BookingBook.  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `unarchiveBooking bid/10` unarchives booking with the valid booking ID of `10`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027unarchive bid/10\u0027](images/unarchivebid10.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Extension Features"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "This set of features extend the Booking Management features, and provides additional functionalities related to Bookings."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "The Booking UI will be shown for this set of features."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Ordering Room Service : `orderRoomService`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Order room service for a particular booking to provide the guest with a more enjoyable stay.\u003cbr/\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "To find out the BOOKING_ID of the booking you want to order the room service for, you can use the `findBooking` command.\u003cbr/\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Also, check out the home page via the `home` command to see the available list of room services and their prices."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `orderRoomService bid/BOOKING_ID rst/ROOM_SERVICE_TYPE`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Adds room service to booking with booking ID `BOOKING_ID`. The id **must be a valid integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` must be a valid booking ID in the BookingBook."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* The room service type must be one of the following values: `WIFI`, `DINING`, `MASSAGE`. These values are case-insensitive."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Only one room service can be added at one time. If you input multiple room services, only the last one is added."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "*  `orderRoomService bid/2 rst/DINING` Orders DINING room service for booking with ID `2`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "*  `orderRoomService bid/10 rst/WIFI` Orders WIFI room service for booking with ID `10`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027order wifi for bid/10\u0027](images/orderRoomServicebid10.png)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Viewing a bill: `getBill`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Gets the bill of a specified booking ID.  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "The bill displayed will show the details of the:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Number of nights stayed  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Price per night  "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Room services ordered, if there is any. Else, it will show \"No room services ordered\"  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Nett bill for the BOOKING_ID queried"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "To find out the BOOKING_ID of the booking you want to get the bill for, you can use the `findBooking` command."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `getBill bid/BOOKING_ID`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` refers to the unique identifier of the booking.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* The `BOOKING_ID` must be a valid booking ID in the BookingBook.    "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `getBill bid/9` shows the bill for the booking ID `9`.  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  ![result for \u0027getBill bid/9\u0027](images/getBillbid9.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "### Miscellaneous Features"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Showing home page: `home`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Shows the home page of ConciergeBook"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Viewing help : `help`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Clears all entries from ConciergeBook. Use with caution.  "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Exiting the program : `exit`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Saving the data"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually. The data will be saved in a `data/` folder inside the home folder for ConciergeBook."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**List Person** | `listPerson`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Find Person** | `findPerson KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `findPerson James Jake`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Add Person** | `addPerson n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `addPerson n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/vip t/vegetarian`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Edit Person** | `editPerson pid/PERSON_ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`editPerson pid/2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Delete Person** | `deletePerson pid/PERSON_ID`\u003cbr\u003e e.g., `deletePerson pid/3`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "**List Room** | `listRoom`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Filter Room** | `filterRoom sd/START_DATE ed/END_DATE [typ/ROOM_TYPE]`\u003cbr\u003e e.g., `filterRoom sd/2020-09-14 ed/2020-09-17 typ/3`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zeling595"
        },
        "content": "**List Booking** | `listBooking`\u003cbr\u003e e.g., `listBooking`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Find Booking** | `findBooking [rid/ROOM_ID] [pid/PERSON_ID] [sd/START_DATE] [ed/END_DATE] [ac/IS_ARCHIVED]` \u003cbr\u003e e.g. `findBooking pid/1 rid/2104`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Add Booking** | `addBooking pid/PERSON_ID rid/ROOM_ID sd/START_DATE ed/END_DATE`\u003cbr\u003e e.g., `addBooking pid/5 rid/2105 sd/2020-12-12 ed/2020-12-25`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zeling595"
        },
        "content": "**Edit Booking** | `editBooking bid/BOOKING_ID [rid/ROOM_ID] [sd/START_DATE] [ed/END_DATE]` \u003cbr\u003e e.g. `editBooking bid/1 rid/2104`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Delete Booking** | `deleteBooking bid/BOOKING_ID`\u003cbr\u003e e.g., `deleteBooking bid/3`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Archive Booking** | `archiveBooking bid/BOOKING_ID`\u003cbr\u003e e.g., `archiveBooking bid/3`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Unarchive Booking** | `unarchiveBooking bid/BOOKING_ID`\u003cbr\u003e e.g., `unarchiveBooking bid/3`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Order Room Service** | `orderRoomService bid/BOOKING_ID rst/ROOM_SERVICE_TYPE`\u003cbr\u003e e.g., `orderRoomService bid/1 rst/WIFI`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Get Bill** | `getBill bid/BOOKING_ID`\u003cbr\u003e e.g., `getBill bid/6`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Home** | `home`\u003cbr/\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Help** | `help`\u003cbr/\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Clear** | `clear`\u003cbr/\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**A**: Install the app on the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ConciergeBook home folder."
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 37,
      "shermz-lim": 220,
      "Hazel1603": 37,
      "-": 113,
      "iamgenechua": 41,
      "zeling595": 21
    }
  },
  {
    "path": "docs/diagrams/AddBookingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    :Send error message to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    user indicating the invalid parameter(s) entered in the command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "else ([valid parameters entered])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    :Create Booking that stores the parameters entered;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    :Save Booking to BookingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 15
    }
  },
  {
    "path": "docs/diagrams/AddBookingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "participant \"c:AddBookingCommand\" as AddBookingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "participant \":BookingBook\" as BookingBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "[-\u003e LogicManager : execute(addBooking)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(addBooking)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "create AddBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddressBookParser -\u003e AddBookingCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate AddBookingCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddBookingCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate AddBookingCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "LogicManager -\u003e AddBookingCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate AddBookingCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddBookingCommand -\u003e Model : addBooking()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Model -\u003e BookingBook : addBooking()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "BookingBook --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Model --\u003e AddBookingCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddBookingCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate AddBookingCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "AddBookingCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "destroy AddBookingCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 52
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"deletePerson pid/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"deletePerson pid/1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBookingByPersonId(1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : savePersonBook(personBook)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 9,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/DeleteBookingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":DeleteBookingCommandParser\" as DeleteBookingCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \"d:DeleteBookingCommand\" as DeleteBookingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "[-\u003e LogicManager : execute(\"deleteBooking bid/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"deleteBooking bid/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "create DeleteBookingCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "AddressBookParser -\u003e DeleteBookingCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate DeleteBookingCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate DeleteBookingCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "AddressBookParser -\u003e DeleteBookingCommandParser : parse(\"delete pid/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate DeleteBookingCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "create DeleteBookingCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommandParser -\u003e DeleteBookingCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate DeleteBookingCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommand --\u003e DeleteBookingCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate DeleteBookingCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate DeleteBookingCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "destroy DeleteBookingCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "LogicManager -\u003e DeleteBookingCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate DeleteBookingCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommand -\u003e Model : getBookingWithId(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Model --\u003e DeleteBookingCommand: bookingToDelete"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommand -\u003e Model : deleteBooking(bookingToDelete)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Model --\u003e DeleteBookingCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "CommandResult --\u003e DeleteBookingCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "DeleteBookingCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate DeleteBookingCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 77
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[-\u003e LogicManager : execute(\"deletePerson pid/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"deletePerson pid/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"deletePerson pid/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "DeleteCommand -\u003e Model : deleteBookingByPersonId(1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4,
      "Hazel1603": 5,
      "-": 66
    }
  },
  {
    "path": "docs/diagrams/EditBookingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    :Send error message to indicate"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    the invalid parameter(s) entered in the command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "else ([booking id \u0026 valid parameters])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    if () then ([duplicated or conflicting booking])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        :Send error message to indicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        duplicated or conflicting booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    :Replace target booking with edited booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    :Save edited booking to BookingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeling595": 21
    }
  },
  {
    "path": "docs/diagrams/EditBookingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "participant \"c:EditBookingCommand\" as EditBookingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "participant \":BookingBook\" as BookingBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[-\u003e LogicManager : execute(editBooking)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(editBooking)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "create EditBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "AddressBookParser -\u003e EditBookingCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate EditBookingCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "EditBookingCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate EditBookingCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "LogicManager -\u003e EditBookingCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate EditBookingCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "EditBookingCommand -\u003e Model : setBooking()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Model -\u003e BookingBook : setBooking()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "BookingBook --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Model --\u003e EditBookingCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "EditBookingCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate EditBookingCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "EditBookingCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "destroy EditBookingCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeling595": 52
    }
  },
  {
    "path": "docs/diagrams/FilterRoomActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":User executes FilterRoomCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    :Send error message to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    user indicating the invalid parameter(s) entered in the command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "else ([valid parameters entered])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    :Query BookingBook for a list of unavailable room Ids;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    :Retrieve a list of available room Ids from RoomBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 14
    }
  },
  {
    "path": "docs/diagrams/FilterRoomSequenceDiagram0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "box \"Logic\" LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant FilterRoomCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[-\u003e LogicManager: execute(\"filterRoom sd/2020-11-12\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(\"filterRoom sd/2020-11-12\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser -\u003e FilterRoomCommandParser: parse(\"sd/2020-11-12\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate FilterRoomCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "FilterRoomCommandParser --\u003e AddressBookParser: throw ParseException(\"Invalid Command Input.\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate FilterRoomCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy FilterRoomCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser --\u003e LogicManager: throw ParseException(\"Invalid Command Input.\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 28
    }
  },
  {
    "path": "docs/diagrams/FilterRoomSequenceDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":FilterRoomCommandParser\" as FilterRoomCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":FilterRoomCommand\" as FilterRoomCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":BookingBook\" as BookingBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":RoomBook\" as RoomBook MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[-\u003e LogicManager: execute(filterRoom)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(filterRoom)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser -\u003e FilterRoomCommandParser: parse()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate FilterRoomCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "FilterRoomCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate FilterRoomCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy FilterRoomCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser --\u003e LogicManager: FilterRoomCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e FilterRoomCommand: execute()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate FilterRoomCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "FilterRoomCommand -\u003e Model : getUnavailableRooms()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e BookingBook : getUnavailableRooms()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingBook --\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e FilterRoomCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "FilterRoomCommand -\u003e Model : getAvailableRooms()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e RoomBook : getAvailableRooms()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate RoomBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomBook --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate RoomBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e FilterRoomCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "FilterRoomCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate FilterRoomCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy FilterRoomCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " [\u003c-- LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 67
    }
  },
  {
    "path": "docs/diagrams/FindBookingDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":findBookingCommandParser\" as findBookingCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \"c:findBookingCommand\" as findBookingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "participant \":BookingBook\" as BookingBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "-\u003e LogicManager: execute (\"findBooking pid/2103\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(\"findBooking pid/2103\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "create findBookingCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "AddressBookParser -\u003e findBookingCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate findBookingCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "create findBookingCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommandParser -\u003e findBookingCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate findBookingCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommand --\u003e findBookingCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate findBookingCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommandParser --\u003e AddressBookParser : c"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate findBookingCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "LogicManager -\u003e findBookingCommand : execute()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate findBookingCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommand -\u003e Model : updateFilteredList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Model -\u003e BookingBook : updateFilteredList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "BookingBook --\u003e Model :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Model --\u003e findBookingCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate findBookingCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "findBookingCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "destroy findBookingCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 61
    }
  },
  {
    "path": "docs/diagrams/GetBillActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":User executes Get Bill Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    :Send error message to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    user indicating the invalid parameter(s) entered in the command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "else ([valid parameters entered])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    if () then ([Booking Id not found])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        :Send error message to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        user indicating that the Booking Id is not found;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        :Retrieve Room from Room Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        :Compute base price of the room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        :Get Room Services ordered by room from Room Service Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        :Prepare receipt and compute final price of stay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 23
    }
  },
  {
    "path": "docs/diagrams/GetBillSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":GetBillCommandParser\" as GetBillCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":GetBillCommand\" as GetBillCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":BookingBook\" as BookingBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":RoomBook\" as RoomBook MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "participant \":RoomServiceBook\" as RoomServiceBook MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[-\u003e LogicManager: execute(getBill)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(getBill)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser -\u003e GetBillCommandParser: parse()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate GetBillCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate GetBillCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy GetBillCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "AddressBookParser --\u003e LogicManager: GetBillCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy AddressBookParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "LogicManager -\u003e GetBillCommand: execute()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate GetBillCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommand -\u003e Model : hasBookingWithId()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e BookingBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingBook --\u003e Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e GetBillCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommand -\u003e Model : getBookingWithId()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e BookingBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate BookingBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingBook --\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate BookingBook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e GetBillCommand : Booking"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommand -\u003e Model : getRoom()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e RoomBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate RoomBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomBook --\u003e Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate RoomBook"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e GetBillCommand : Room"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommand -\u003e Model : getRoomServicesForBooking()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model -\u003e RoomServiceBook"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "activate RoomServiceBook"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomServiceBook --\u003e Model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate RoomServiceBook"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Model --\u003e GetBillCommand : ObservableList\u003cRoomService\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "GetBillCommand --\u003e LogicManager : Result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate GetBillCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "destroy GetBillCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 92
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface ReadOnlyPersonBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class PersonBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface ReadOnlyPersonBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class BookingBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface ReadOnlyBookingBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class RoomBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface ReadOnlyRoomBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class RoomServiceBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface ReadOnlyRoomServiceBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package Booking {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class Booking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class UniqueBookingList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package Room {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Abstract Room"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class Single"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class Double"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class Suite"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class UniqueRoomList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package RoomService {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class RoomService"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "PersonBook ..|\u003e ReadOnlyPersonBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomServiceBook ..|\u003e ReadOnlyRoomServiceBook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingBook ..|\u003e ReadOnlyBookingBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomBook ..|\u003e ReadOnlyRoomBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ModelManager o--\u003e \"1\" PersonBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ModelManager o------\u003e \"1\" RoomBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ModelManager o--\u003e \"1\" BookingBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ModelManager o-------\u003e \"1\" RoomServiceBook"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "PersonBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingBook *--\u003e \"1\" UniqueBookingList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "UniqueBookingList o--\u003e \"*\" Booking"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomBook *--\u003e \"1\" UniqueRoomList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "UniqueRoomList o--\u003e \"*\" Room"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Single .up.|\u003e Room"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Double .up.|\u003e Room"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Suite .up.|\u003e Room"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "RoomServiceBook *--\u003e \"*\" RoomService"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ModelManager --\u003e\"1\" Booking : filtered list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 47,
      "-": 50
    }
  },
  {
    "path": "docs/diagrams/RoomServiceSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "participant \"r:RoomServiceCommand\" as RoomServiceCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "participant \":RoomServiceBook\" as RoomServiceBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[-\u003e LogicManager : execute(orderRoomService)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(orderRoomService)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "create RoomServiceCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "AddressBookParser -\u003e RoomServiceCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate RoomServiceCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "RoomServiceCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate RoomServiceCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "AddressBookParser --\u003e LogicManager : r"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "LogicManager -\u003e RoomServiceCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate RoomServiceCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "RoomServiceCommand -\u003e Model : addRoomService()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Model -\u003e RoomServiceBook : addRoomService()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "activate RoomServiceBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "RoomServiceBook --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate RoomServiceBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Model --\u003e RoomServiceCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "RoomServiceCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate RoomServiceCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "RoomServiceCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "destroy RoomServiceCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 52
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package PersonBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface PersonBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonPersonBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonSerializablePersonBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonAdaptedPerson"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package BookingBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface BookingBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonBookingBookStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonSerializableBookingBook"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonAdaptedBooking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Package RoomServiceStorage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Interface RoomServiceBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonRoomServiceBookStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonSerializableRoomServiceBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class JsonAdaptedRoomService"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "StorageManager o--\u003e PersonBookStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "StorageManager o--\u003e BookingBookStorage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "StorageManager o--\u003e RoomServiceBookStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonPersonBookStorage .up.|\u003e PersonBookStorage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonPersonBookStorage .down.\u003e JsonSerializablePersonBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonSerializablePersonBook .down.\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonAdaptedPerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonBookingBookStorage .up.|\u003e BookingBookStorage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonBookingBookStorage .down.\u003e JsonSerializableBookingBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonSerializableBookingBook .down.\u003e JsonAdaptedBooking"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonRoomServiceBookStorage .up.|\u003e RoomServiceBookStorage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonRoomServiceBookStorage .down.\u003e JsonSerializableRoomServiceBook"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "JsonSerializableRoomServiceBook .down.\u003e JsonAdaptedRoomService"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 41,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class BookingListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Class BookingCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "MainWindow *-down-\u003e BookingListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingListPanel -down-\u003e BookingCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "PersonCard .down.\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "BookingCard .down.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 6,
      "-": 59
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "title: ConciergeBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-2/tp/actions/)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-W14-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-W14-2/tp/)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook is a desktop app for hotel receptionists to efficiently"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "manage guest bookings via a Command Line Interface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI).\u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "If you can type fast, ConciergeBook can help you optimise how you manage your rooms,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Download the latest `conciergebook.jar` from [here](https://github.com/AY2021S1-CS2103-W14-2/tp/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Copy the file to the folder you want to use as the _home folder_ for your ConciergeBook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Run `java -jar conciergebook.jar` in your terminal/cmd."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Main features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Manage hotel bookings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2. Manage hotel guests"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3. Order room services and return total bill for a booking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "For more details on how to use the app, you can"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "look at our [User Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "If you would like to extend this project, you can"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "look at our [Developer Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* This project is created as part of National University of Singapore CS2103 module in AY20/21. "
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 9,
      "-": 11,
      "iamgenechua": 15
    }
  },
  {
    "path": "docs/team/SherryWu178.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "title: Wu Yujin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "## Project: ConciergeBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "ConciergeBook is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dW14-2\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dSherryWu178\u0026tabRepo\u003dAY2021S1-CS2103-W14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **New Feature**: Add the ability to find Booking with different parameters [#68](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/68)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * What it does: allows the user to find booking(s) with specific room ID, person ID, start date, end date and isArchived state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Justification: This feature improves the product significantly because a user need this command to find the booking when he/she only has partial information about the booking, e.g. to find out which room a customer is allocated to within the start date and end date period."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Highlights: This enhancement takes multiple parameters, and they can also be optional. The implementation also involves writing multiple predicates and compressing multiple predicates into one in the command level to feed into the filteredList in model. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **New Feature**: Add the ability to delete booking [#89](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/89) [#109](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/109)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * What it does: allows the user to delete the booking permanently with the given booking ID. This is different from archiving as it wipes out the entry from the database entirely."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Justification: This feature is essential for the users to manage bookings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **New Feature**: Implement the Booking class [#50](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/50)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * What it does: The Booking class keeps information about a booking in the form of person ID, room ID, start date and end date and archive state."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Justification: It is essential to the app\u0027s main purpose: manage bookings."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Highlights: This enhancement include change to both model and storage, which require in-depth knowledge about the programme flow. It is also closely related to the Person and Room class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **Contribution to team-based task**: Implement BookingBook [#58](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/58)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Modify model and storage "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Add tests for JsonAdaptedBooking, JsonBookingBookStorage [#136](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/136)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **Contribution to team-based task**: Refactor addressBook to bookingBook [#199](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/199)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Rename occurrence in relevant code and .json files"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  * Modify delete person feature so that when a person is deleted, all the related booking(s) are deleted (cascading delete). [#04](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/204)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Add the section on findBooking, deleteBooking and Booking class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Add the UML sequence diagram for findBooking and deleteBooking."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    * Add the section on findBooking and deleteBooking command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 47
    }
  },
  {
    "path": "docs/team/hazel1603.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "title: Hazel\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "## Project: ConciergeBook "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ConciergeBook (CB) is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **New Feature**: Room Management"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    1. Listing Room "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * What it does: allows the user to list all rooms. Users can list rooms by types as well. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Justification: This feature allows the user to swiftly know all rooms available in the system. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    1. Filtering Room"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * What it does: allows the user to know which rooms are available within a certain start and end date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Justification: This feature allows the user to swiftly select a room id to attach to a new booking. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Highlights: This feature allows the user to filter by room types as well to match the guests\u0027 requirements."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Code Contributed**: [RepoSense Link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhazel1603\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026until\u003d2020-11-09\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dHazel1603\u0026tabRepo\u003dAY2021S1-CS2103-W14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Did cosmetic tweaks to existing documentation of features `addPerson`, `findPerson`, `deletePerson`, `editPerson` and `listPerson` "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            [\\#18](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/18) [\\#196]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Added documentation for new command: `getBill` [\\#18](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/18) "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Modified `filterRoom` and `listRoom` documentation [\\#115](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/115)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Updated UML Diagrams of Architecture [\\#129](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/129/files)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Added Filter Room Feature [\\#105](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/105)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Added Get Bill Feature [\\#230](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/230)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Updated User Stories [\\#129](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/129/files), [\\#230](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/230)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Updated Use Cases [\\#129](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/129/files), [\\#230](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/230)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "       "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Enhancements to Existing Features**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Wrote additional test cases to increase test coverage of Room Book to 100% and UniqueRoomList to 93% "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        (Pull Request [\\#112](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/112), [\\#120](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/120))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Modified and refactored the names of AB3 Commands (Pull Request [\\#117](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/117))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Standardised Error Messages across the application "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    (Pull Request [\\#117](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/117), [\\#121](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/121))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Created Rooms of different room types to be used as the premise for our application. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    (Pull Requests [\\#42](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/42) [\\#88](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/88))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Contributions to teammates**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Created a new feature under Bookings: Restriction of Stay Duration (Pull Request [\\#195]())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * What it does: Prevents the user from creating or editing a booking to be longer than 30 days. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Justification: This feature allows the app to model after reality better, where there are usually restrictions on the length of stay. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        * Affected: addBooking and editBooking commands "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Made small tweaks to Home Page display under UI (Pull Request [\\#194](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/194))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Contributions to Developer Guide (Extracts)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Diagrams drawn for Get Bill Feature "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * The following diagram is the Activity Diagram for Get Bill. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cimg src\u003d\"hazel_images/Hazel_GetBillActivityDiagram.png\" width\u003d\"800\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * The following diagram is the Sequence Diagram for Get Bill. \u003cbr\u003e "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cimg src\u003d\"hazel_images/Hazel_GetBillSequenceDiagram.png\" width\u003d\"800\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Similar Diagrams were drawn for the Filter Room Feature. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Diagrams drawn for Architecture Component "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * The following diagram was used for the Storage component in Architecture. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cimg src\u003d\"hazel_images/Hazel_StorageClassDiagram.png\" width\u003d\"800\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * The following diagram was used for the Model component in Architecture. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cimg src\u003d\"hazel_images/Hazel_ModelClassDiagram.png\" height\u003d\"800\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * The following diagram was used for the UI component in Architecture. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cimg src\u003d\"hazel_images/Hazel_UiClassDiagram.png\" width\u003d\"800\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 71
    }
  },
  {
    "path": "docs/team/iamgenechua.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "title: Chua Eugene\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Project: ConciergeBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook (CB) is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003diamgenechua\u0026tabRepo\u003dAY2021S1-CS2103-W14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **New user feature**: Add Booking [#51](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/51), [#213](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/213)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1. What it does: allows the user to add booking with various parameters tied to the booking."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    These parameters are the person ID, room ID, start date and end date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    2. Justification: this feature is essential, as bookings need to be made to book the room for the hotel\u0027s guests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    so that they can stay at the hotel. Without this service, the hotel would not be able to house guests and be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    profitable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    3. Highlight: the implementation does multiple validation checking of dates, ensuring that the start date is before the end date, and that the dates are not more than 30 nights apart."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **New user feature**: Unarchive Booking [#216](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/216)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1. What it does: allows the user to unarchive bookings, so that they can restore an archived booking in the future "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    should they change their mind, or if they accidentally archived a booking that was not meant to be archived.  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    2. Justification: this feature is a good-to-have for users, as an unarchive functionality serves as an \u0027undo\u0027 function"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    for users who want to restore an archived booking back to an active booking. This provides an excellent opportunity"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    for users to recover from mistakes, which is aligned with rule number #9 of Jakob Nielsen\u0027s 10 Usability Heuristics for User Interface Design.  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **New user feature**: Get Bill [#71](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/71)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1. What it does: allows the user to get the current bill of a particular booking."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    2. Justification: this feature is essential for users. A hotel is only profitable when it is able to bill its customers."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    This feature is useful when the customer wants to enquire about their bill for that particular booking, or when the hotel intends to charge the "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    customer. This feature allows users to see how much the customer owes the hotel so that the customer is being billed fairly."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    3. Highlight: The bill displayed is broken down into the base cost (price of staying in the room) and the additional cost "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    incurred from ordering room services. This allows the user to understand how the bill is derived in case customers dispute"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    the costs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Enhancements to existing features**: Allowed user input for ordering room service to be case-insensitive [#213](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/213)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * User may find it troublesome to have to type the room services fully in capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Contribution to team-based tasks**: Implemented Storage Feature for Room Service Book [#97](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/97)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * Ensure that room service details are saved even if the application is closed and reopened again"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [#230](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/230#discussion_r519246460)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "   1. User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        1. Revamped the user guide to remove multiple typos  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        2. Documented usage for addBooking feature [#225](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/225)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        3. Improved Documentation usage for getBill feature [#225](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/225)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "   2. Developer Guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        1. Documented implementation for AddBooking feature [#227](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/227)        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        2. Documented implementation for UnarchiveBooking feature to merge with ArchiveBooking feature [#233](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/233)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        3. Made initial draft for Use Cases [#34](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/34)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        4. Update Use Case for Archive and Unarchive feature [#233](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/233)  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 59
    }
  },
  {
    "path": "docs/team/shermz-lim.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "title: Sherman\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Project: ConciergeBook "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook (CB) is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dshermz-lim\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dshermz-lim\u0026tabRepo\u003dAY2021S1-CS2103-W14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Project Management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Managed release `v1.3.trial` (1 release) on GitHub."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. Managed release `v1.2` (1 release) on GitHub."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    3. Set up GitHub team org/repo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **New user feature**: Order Room Service [#93](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/93),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[#94](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/94), [#95](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/95)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. What it does: allows the user to order room services of various types. Upon ordering a room service, we will add"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    the cost for the room service to their total bill as well."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. Justification: this feature is essential, as room services are part and parcel of hotels - ensuring that guests have"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    an enjoyable stay. By enabling this functionality, we allow the receptionist to order and track room services"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    for the guests, and finally charge them the correct amount for their stay."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    3. Highlight: the implementation allows us to easily extend the room services that we offer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    4. Challenges: this feature required the creation of a new class RoomService, as well as a class in model to track"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    all the room services and tie them to the correct booking. There was also the challenge of decoupling the implementation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    from the Booking class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **New user feature**: Archive Booking [#53](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/53),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[#59](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/59), [#207](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/207)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. What it does: allows the user to archive bookings, so that they can kind of delete a booking with the ability to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    recover it again in the future should they change their mind."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. Justification: this feature is a good-to-have for users, as an archive functionality is present in many applications"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    where deletion is allowed. This is because users may sometimes change their mind about whether they want to delete an item."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Enhancements**: Booking GUI [#66](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/66)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Implemented the GUI that enables us to list bookings as cards, just like in AB3 for the person class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. Challenges: this enhancement required the creation of a right abstraction to join the logic and UI, in order"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    to allow for the logic to easily switch between showing the person list and booking list in the UI."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Enhancements**: Home page GUI [#135](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/135), [#209](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/209)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Implemented the home page of our app to provide the user with summarised information - namely the rooms that we have"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    available, and the most recently added bookings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    2. Challenges: this enhancement required the use of the Observer pattern to show the correct recently added bookings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    in the home page."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Contribution to team-based tasks**: Improved GUI [#74](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/74)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Implemented a new UI theme for our project mainly using CSS and javafx."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Contribution to team-based tasks**: Refactored Person class [#44](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/44)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    1. Refactored the Person class to have an ID field, and implemented the assignment of a unique ID to each person added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "   1. User Guide:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        1. Revamped the user guide to make it more understandable and user-friendly [#210](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/210)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        2. Documented usage for order room service [#132](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/132)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        3. Documented usage for archive booking [#210](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/210)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "   2. Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        1. Documented implementation for Order Room Service feature [\\#100](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/100)        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        2. Documented implementation for archiveBooking feature [#231](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/231)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        3. Documented team\u0027s effort in Effort Appendix [#231](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/231)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "   3. Updated project\u0027s README [\\#24](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/24)"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 66
    }
  },
  {
    "path": "docs/team/zeling595.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "title: Long Zeling\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "## Project: ConciergeBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "ConciergeBook is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **New Feature**: Ability to edit booking specified by booking ID. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * What it does: allow users to edit the start date, end date and room ID of an existing booking."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Justification: This feature is an essential feature of the product as editing a booking is a functionality that will be used very frequently. It is common for guests to change their bookings due to various reasons such as change of travel plan and emergencies. It is also common for the user to make mistakes when he/she keys in data. It is more convenient to edit than delete and add a new one."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Highlights: The implementation of the command is challenging as it needs to check for multiple errors such as duplicate booking error and conflicting booking error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Credit: I have reused and modified code in AB3 to suit my needs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **New Feature**: Ability to list all bookings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * What it does: list all the bookings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Justification: This feature is simple but necessary. It allows user to see all the bookings and relevant booking information. The booking ID is a mandatory input for many other commands and therefore this command precedes most other booking-related commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Credit: I have reused and modified code in AB3 to suit my needs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Contribution to team-based project**: Implement BookingBook class "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Implement UniqueBookingList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dW14\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dzeling595\u0026tabRepo\u003dAY2021S1-CS2103-W14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Managed release `v1.3` (1 release) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Enhancements to existing features**: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Remove indexes from GUI (Pull Request [#198](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/198))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Update editPerson and deletePerson commands to use person ID instead indexes ([#201](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/201))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Added sections for list booking and edit booking features."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Added appendix for manual testing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * About US:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Update information for team members."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#50](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/50), [\\#122](https://github.com/AY2021S1-CS2103-W14-2/tp/pull/122)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  * PlantUML."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeling595": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Double;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Single;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Suite;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.BookingBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonBookingBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonPersonBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.storage.JsonRoomServiceBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.PersonBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.storage.RoomServiceBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PersonBook \u0026 BookingBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing RoomServiceBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBookStorage personBookStorage \u003d new JsonPersonBookStorage(userPrefs.getPersonBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBookStorage bookingBookStorage \u003d new JsonBookingBookStorage(userPrefs.getBookingBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        RoomServiceBookStorage roomServiceBookStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                new JsonRoomServiceBookStorage(userPrefs.getRoomServiceBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        storage \u003d new StorageManager(personBookStorage, bookingBookStorage, userPrefsStorage, roomServiceBookStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ReadOnlyRoomBook initRooms() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing roomData ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook ret \u003d new RoomBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        final List\u003cRoom\u003e roomData \u003d IntStream.rangeClosed(2103, 2132)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                .mapToObj(x -\u003e initRoomsHelper(x))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret.setRooms(roomData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Room initRoomsHelper(int x) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (x \u003e\u003d 2103 \u0026\u0026 x \u003c 2113) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return new Single(x);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (x \u003c 2123) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return new Double(x);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return new Suite(x);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cReadOnlyPersonBook\u003e personBookOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Optional\u003cReadOnlyBookingBook\u003e bookingBookOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Optional\u003cReadOnlyRoomServiceBook\u003e roomServiceBookOptional;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ReadOnlyPersonBook initialData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ReadOnlyBookingBook bookingData;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ReadOnlyRoomServiceBook roomServiceData;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ReadOnlyRoomBook roomData \u003d initRooms();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            personBookOptional \u003d storage.readPersonBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            if (!personBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PersonBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            initialData \u003d personBookOptional.orElseGet(SampleDataUtil::getSamplePersonBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingBookOptional \u003d storage.readBookingBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (!bookingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookingBook\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d bookingBookOptional.orElseGet(SampleDataUtil::getSampleBookingBook);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PersonBook\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            initialData \u003d new PersonBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PersonBook\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            initialData \u003d new PersonBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // read bookingBook data"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingBookOptional \u003d storage.readBookingBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (!bookingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookingBook\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d bookingBookOptional.orElseGet(SampleDataUtil::getSampleBookingBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookingBook\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d new BookingBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingBook\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d new BookingBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // read roomServiceBook data"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            roomServiceBookOptional \u003d storage.readRoomServiceBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            if (!roomServiceBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RoomServiceBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            roomServiceData \u003d roomServiceBookOptional.orElseGet(SampleDataUtil::getSampleRoomServiceBook);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RoomServiceBook\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            roomServiceData \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RoomServiceBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            roomServiceData \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new ModelManager(initialData, userPrefs, roomData, bookingData, roomServiceData);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PersonBook\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(\"Starting ConciergeBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Concierge Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 20,
      "shermz-lim": 6,
      "Hazel1603": 29,
      "-": 163,
      "iamgenechua": 14,
      "zeling595": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_INVALID_START_END_DATE \u003d \"Start Date must be before End Date!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // person"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_ID \u003d \"PersonId must be a positive integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_PERSON_ID_MISSING \u003d \"No existing personId can be found.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // room"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_ROOM_ID_MISSING \u003d \"No existing roomId can be be found. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"RoomId should be within 2103 to 2132.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_TYPE \u003d \"Invalid Room Type. Only 1, 2, 3 allowed.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"1 for Single Rooms.\\n2 for Double Rooms. \\n3 for Suite Rooms.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // booking"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOKING_DISPLAYED_ID \u003d \"The bookingId provided is invalid.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_BOOKINGS_LISTED_OVERVIEW \u003d \"%1$d booking listed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_CONFLICTING_BOOKING \u003d \"The room has already been booked during this period.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_BOOKING_MISSING \u003d \"No valid booking can be found.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"This booking already exists in the booking book.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_EXCEED_DURATION \u003d \"Booking duration cannot be longer than 30 nights.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "Hazel1603": 14,
      "-": 12,
      "zeling595": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the PersonBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see seedu.address.model.Model#getPersonBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    ReadOnlyPersonBook getPersonBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bookings */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /* Returns an unmodifiable view of full list of bookings */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 5,
      "shermz-lim": 7,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            storage.savePersonBook(model.getPersonBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            storage.saveBookingBook(model.getBookingBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            storage.saveRoomServiceBook(model.getRoomServiceBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return model.getPersonBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return model.getFilteredBookingList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return model.getBookingBook().getBookingList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return model.getPersonBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 6,
      "shermz-lim": 11,
      "-": 76,
      "iamgenechua": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFLICTING_BOOKING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOKING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXCEED_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.booking.exception.ExceedDurationStayException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Encapsulates the AddBooking feature."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class AddBookingCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBooking\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking to the hotel. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Dates should be in the format yyyy-MM-dd. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"The start date should be before the end date and start and end dates should be \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"within 30 nights of each other.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + PREFIX_PERSON_ID + \"PERSON_ID (must be an existing person Id) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_ROOM_ID + \"ROOM_ID (must be an existing room Id) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_PERSON_ID + \"5 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_ROOM_ID + \"2121 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_START_DATE + \"2020-09-14 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_END_DATE + \"2020-09-17\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Person id: %1$d, Room Id: %2$d, Start date: %3$s, End date: %4$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added booking: %s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final int personId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final int roomId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Creates a AddBookingCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param personId the personId of the person who is staying at the hotel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param roomId the roomId of the room that the person is going to stay in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param startDate the start date of the booking"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param endDate the end date of the booking"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public AddBookingCommand(int personId, int roomId, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireAllNonNull(personId, roomId, startDate, endDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Booking booking;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert roomId \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert startDate.isBefore(endDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        logger.info(String.format(\"adding a booking involving person with id %s and room %s\", personId, roomId));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!model.hasPersonWithId(personId)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert model.hasPersonWithId(personId);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!model.hasRoom(roomId)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_ID_MISSING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert model.hasRoom(roomId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        booking \u003d new Booking(roomId, personId, startDate, endDate, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int bookingId \u003d booking.getId();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            model.addBooking(booking);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, booking), false, false, false, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (ConflictingBookingException conflictE) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            Booking.setNextAvailableId(bookingId);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_CONFLICTING_BOOKING);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (DuplicateBookingException duplicateE) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            Booking.setNextAvailableId(bookingId);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (ExceedDurationStayException exceedE) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            Booking.setNextAvailableId(bookingId);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new CommandException(MESSAGE_EXCEED_DURATION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!(other instanceof AddBookingCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        AddBookingCommand e \u003d (AddBookingCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return personId \u003d\u003d e.personId"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 roomId \u003d\u003d e.roomId"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 startDate.isEqual(e.startDate)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 endDate.isEqual(e.endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 3,
      "Hazel1603": 11,
      "iamgenechua": 99,
      "zeling595": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addPerson\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_TAG + \"vip\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 3,
      "Hazel1603": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Archive (change booking to inactive) the booking with a particular booking id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class ArchiveBookingCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archiveBooking\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Archives a booking. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_BOOKING_ID + \"BOOKING_ID (must be a valid booking id)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_BOOKING_ID + \"3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully archived booking: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"You have already archived this booking.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final int bookingId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a ArchiveBookingCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @param bookingId booking to archive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ArchiveBookingCommand(int bookingId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireAllNonNull(bookingId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Archives booking with the bookingId"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert bookingId \u003e\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(String.format(\"Archiving booking with id %s\", bookingId));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!model.hasBookingWithId(bookingId)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!model.getBookingWithId(bookingId).isActive()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.setBookingInactive(bookingId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert !model.getBookingWithId(bookingId).isActive();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(String.format(\"Archived booking with id %s\", bookingId));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getBookingWithId(bookingId)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!(other instanceof ArchiveBookingCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand o \u003d (ArchiveBookingCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.bookingId \u003d\u003d o.bookingId;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 77,
      "Hazel1603": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.RoomServiceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Concierge Book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model.setPersonBook(new PersonBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        model.setBookingBook(new BookingBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        model.setRoomServiceBook(new RoomServiceBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "Hazel1603": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /** The application should show personList. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final boolean showPersonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /** The application should show bookingList. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final boolean showBookingList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Constructs a {@code CommandResult} with additional fields for showing person and booking list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                         boolean showPersonList, boolean showBookingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.showPersonList \u003d showPersonList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.showBookingList \u003d showBookingList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.showPersonList \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.showBookingList \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean isShowPersonList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return showPersonList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean isShowBookingList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return showBookingList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showPersonList, showBookingList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 29,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Deletes a booking identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class DeleteBookingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBooking\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \": Deletes the booking identified by the bookingId.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_BOOKING_ID + \"BOOKING_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_BOOKING_ID + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted Booking: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer bookingId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public DeleteBookingCommand(Integer bookingId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Executing deleteBooking ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assert bookingId \u003e 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!model.hasBookingWithId(bookingId)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Non-existent bookingId\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking bookingToDelete \u003d model.getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof DeleteBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 bookingId.equals(((DeleteBookingCommand) other).bookingId)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 57,
      "shermz-lim": 4,
      "Hazel1603": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletePerson\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + \"Parameters: \" + PREFIX_PERSON_ID + \"PERSON_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" pid/1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public DeleteCommand(Integer personId) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!model.hasPersonWithId(personId)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person personToDelete \u003d model.getPersonWithId(personId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model.deleteBookingByPersonId(personId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 personId.equals(((DeleteCommand) other).personId)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "shermz-lim": 2,
      "Hazel1603": 1,
      "-": 37,
      "zeling595": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFLICTING_BOOKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOKING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXCEED_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.booking.exception.ExceedDurationStayException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBooking\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // can edit room id, start date, end date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // cannot edit person id"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // at least one field is edited"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the booking identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"by the index number used in the displayed booking list. \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Dates should be in the format yyyy-MM-dd. \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \" + PREFIX_BOOKING_ID + \"BOOKING_ID (must be a valid booking id)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + \"[\" + PREFIX_ROOM_ID + \"ROOM ID] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE] \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" pid/1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + PREFIX_ROOM_ID + \"2103 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + PREFIX_START_DATE + \"2020-12-25\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOKING_SUCCESS \u003d \"Edited Booking: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer bookingId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final EditBookingCommand.EditBookingDescriptor editBookingDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param bookingId of the booking in the filtered booking list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param editBookingDescriptor details to edit the booking with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingCommand(Integer bookingId, EditBookingCommand.EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(bookingId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(editBookingDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.editBookingDescriptor \u003d new EditBookingCommand.EditBookingDescriptor(editBookingDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert bookingId \u003e\u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!model.hasBookingWithId(bookingId)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking bookingToEdit \u003d model.getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d createEditedBooking(bookingToEdit, editBookingDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // start date after end date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!editedBooking.getStartDate().isBefore(editedBooking.getEndDate())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.log(Level.WARNING, \"start date after end date\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // invalid room id, 2103 - 2132"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!model.hasRoom(editedBooking.getRoomId())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.log(Level.WARNING, \"invalid room id\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_ID_MISSING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            model.setBooking(bookingToEdit, editedBooking);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (ConflictingBookingException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.log(Level.WARNING, \"conflicting booking\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_CONFLICTING_BOOKING);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (DuplicateBookingException de) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.log(Level.WARNING, \"duplicated booking\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (ExceedDurationStayException cde) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            logger.log(Level.WARNING, \"exceed 30 day limit\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new CommandException(MESSAGE_EXCEED_DURATION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ editBooking success ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!(other instanceof EditBookingCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand e \u003d (EditBookingCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookingId.equals(e.bookingId)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 editBookingDescriptor.equals(e.editBookingDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Creates and returns a {@code Booking} with the details of {@code bookingToEdit}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * edited with {@code editBookingDescriptor}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static Booking createEditedBooking(Booking bookingToEdit,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                                               EditBookingCommand.EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert bookingToEdit !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Integer roomId \u003d editBookingDescriptor.getRoomId().orElse(bookingToEdit.getRoomId());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int personId \u003d bookingToEdit.getPersonId(); // person id cannot be modified"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        LocalDate startDate \u003d editBookingDescriptor.getStartDate().orElse(bookingToEdit.getStartDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        LocalDate endDate \u003d editBookingDescriptor.getEndDate().orElse(bookingToEdit.getEndDate());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        boolean isActive \u003d bookingToEdit.isActive(); // isActive cannot be modified"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int id \u003d bookingToEdit.getId(); // id cannot be modified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new Booking(roomId, personId, startDate, endDate, isActive, id);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Stores the details to edit the booking with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * corresponding field value of the booking."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static class EditBookingDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        private Integer roomId;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        private LocalDate startDate;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        private LocalDate endDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public EditBookingDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public EditBookingDescriptor(EditBookingCommand.EditBookingDescriptor toCopy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            setRoomId(toCopy.roomId);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return CollectionUtil.isAnyNonNull(roomId, startDate, endDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setRoomId(Integer roomId) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public Optional\u003cInteger\u003e getRoomId() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return Optional.ofNullable(roomId);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public Optional\u003cLocalDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public Optional\u003cLocalDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (!(other instanceof EditBookingCommand.EditBookingDescriptor)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            EditBookingCommand.EditBookingDescriptor e \u003d (EditBookingCommand.EditBookingDescriptor) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return getRoomId().equals(e.getRoomId())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "Hazel1603": 13,
      "zeling595": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editPerson\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Parameters: \" + PREFIX_PERSON_ID + \"PERSON_ID (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_PERSON_ID + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param personId of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditCommand(Integer personId, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert personId \u003e\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!model.hasPersonWithId(personId)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person personToEdit \u003d model.getPersonWithId(personId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer id \u003d personToEdit.getId(); // id cannot be modified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, id);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return personId.equals(e.personId)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 5,
      "Hazel1603": 1,
      "-": 203,
      "zeling595": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class FilterRoomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filterRoom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters rooms that are of the indicated room type \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"(if applicable) and are not occupied within the start and end date. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"typ/1 filters single rooms; typ/2 filters double rooms; typ/3 filters suite rooms. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Dates should be in the format yyyy-MM-dd. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"[\" + PREFIX_ROOM_TYPE + \"ROOM TYPE] (must be valid room type) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sd/2020-11-12 ed/2020-11-15 typ/2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully filtered available rooms: \\n%s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final int roomType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a FilterRoomCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public FilterRoomCommand(LocalDate startDate, LocalDate endDate, int roomType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomType \u003d roomType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assert roomType \u003e\u003d 0 \u0026\u0026 roomType \u003c\u003d 3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Executing filterRoom ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e unavailableRooms \u003d model.getUnavailableRooms(startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e availableRooms \u003d model.getAvailableRooms(unavailableRooms);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (this.roomType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displayRooms(availableRooms);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (this.roomType \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displaySingleRooms(availableRooms);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (this.roomType \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displayDoubleRooms(availableRooms);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displaySuiteRooms(availableRooms);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, result));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (!(other instanceof FilterRoomCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand e \u003d (FilterRoomCommand) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.startDate.isEqual(e.startDate)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 this.endDate.isEqual(e.endDate)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 this.roomType \u003d\u003d e.roomType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "Hazel1603": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ACTIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Finds and list the active booking in booking book which roomId corresponding input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class FindBookingCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findBooking\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the booking(s) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"with one or more parameters including personId, roomId, start date, end date, isArchived state. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"There must at least be 1 parameter. Dates should be in the format yyyy-MM-dd. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"Parameters:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"[\" + PREFIX_ROOM_ID + \"ROOM_ID] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"[\" + PREFIX_PERSON_ID + \"PERSON_ID] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"[\" + PREFIX_IS_ACTIVE + \"IS_ARCHIVED] (\\\"true\\\" or \\\"false\\\")\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + PREFIX_ROOM_ID + \"2104 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + PREFIX_PERSON_ID + \"2 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + PREFIX_START_DATE + \"2020-09-14 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            + PREFIX_IS_ACTIVE + \"false\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Optional\u003cInteger\u003e roomId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Optional\u003cInteger\u003e personId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final List\u003cPredicate\u003cBooking\u003e\u003e predicates;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Constructs a FindBookingCommand with list of predicates."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Optional roomId and personId is used to check if such room and person is present in roomBook and personBook."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param predicates a list of predicates."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param roomId an optional roomId if roomId is provided to filter the booking."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param personId an optional personId if personId is provided to filter the booking."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public FindBookingCommand(List\u003cPredicate\u003cBooking\u003e\u003e predicates, Optional\u003cInteger\u003e roomId,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              Optional\u003cInteger\u003e personId) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Executing findBooking ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (roomId.isPresent() \u0026\u0026 !model.hasRoom(roomId.get())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Missing roomId\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_ID_MISSING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (personId.isPresent() \u0026\u0026 !model.hasPersonWithId(personId.get())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.warning(\"Missing personId\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Predicate\u003cBooking\u003e predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW, model.getFilteredBookingList().size()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!(other instanceof FindBookingCommand)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand otherFindBookingCommand \u003d (FindBookingCommand) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return predicates.equals(otherFindBookingCommand.predicates)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 roomId.equals(otherFindBookingCommand.roomId)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 personId.equals(otherFindBookingCommand.personId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 104,
      "shermz-lim": 1,
      "Hazel1603": 2,
      "zeling595": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findPerson\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 3,
      "Hazel1603": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetBillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Calculates the total bill for a particular occupied room."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class GetBillCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getBill\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets total bill for a particular occupied room.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_BOOKING_ID + \"BOOKING ID\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_BOOKING_ID + \"8\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"getBill command not implemented yet\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Room id: %1$d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_SUCCESS_GET_BILL \u003d \"Nett bill for booking id %1$d \u003d $%2$d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_NIGHTS_STAYED \u003d \"Number of nights stayed: %1$d\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_PRICE_PER_NIGHT \u003d \"Price per night: $%1$d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final int bookingId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Creates a GetBillCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param bookingId the room id of which to get the bill for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public GetBillCommand(int bookingId) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireAllNonNull(bookingId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Booking booking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Room room;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!model.hasBookingWithId(bookingId)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert model.hasBookingWithId(bookingId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            booking \u003d model.getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (BookingNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int roomId \u003d booking.getRoomId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        room \u003d model.getRoom(roomId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int pricePerNight \u003d room.getPrice();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int numNights \u003d booking.getDuration();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int totalPrice \u003d pricePerNight * numNights;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert numNights \u003e 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        ObservableList\u003cRoomService\u003e roomServices \u003d model.getRoomServicesForBooking(booking.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String servicesBillBreakdown \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        for (RoomService roomService : roomServices) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            RoomServiceType roomServiceType \u003d roomService.getType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            servicesBillBreakdown +\u003d roomServiceType.getVerboseName() + \": $\" + roomServiceType.getPrice() + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            totalPrice +\u003d roomServiceType.getPrice();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String resultMessage \u003d String.format(MESSAGE_NIGHTS_STAYED, numNights) + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        resultMessage +\u003d String.format(MESSAGE_PRICE_PER_NIGHT, pricePerNight) + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!servicesBillBreakdown.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            resultMessage +\u003d \"Room services ordered:\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            resultMessage +\u003d servicesBillBreakdown + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            resultMessage +\u003d \"No room services ordered\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        resultMessage +\u003d String.format(MESSAGE_SUCCESS_GET_BILL, bookingId, totalPrice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(resultMessage, false, false, false, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!(other instanceof GetBillCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand e \u003d (GetBillCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return bookingId \u003d\u003d e.bookingId;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "Hazel1603": 3,
      "iamgenechua": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String HOME_SUCCESS_MESSAGE \u003d \"Showing home page.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(HOME_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class ListBookingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBooking\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bookings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Executing listBooking ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW, model.getFilteredBookingList().size()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listPerson\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "Hazel1603": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class ListRoomCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listRoom\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all rooms.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully retrieved all rooms\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final int roomType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a ListRoomCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ListRoomCommand(int roomType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomType \u003d roomType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Executing listRoom ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cRoom\u003e roomList \u003d model.getRoomBook().getRoomList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e retList \u003d FXCollections.observableArrayList(roomList.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .map(Room::getRoomID).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (roomType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displayRooms(retList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (roomType \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displaySingleRooms(retList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (roomType \u003d\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displayDoubleRooms(retList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (roomType \u003d\u003d 3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            result \u003d model.displaySuiteRooms(retList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + result);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return other instanceof ListRoomCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RoomServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_SERVICE_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Command to order room service for a particular booking"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomServiceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"orderRoomService\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Orders room service for booking.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Valid room service types are: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + RoomServiceType.getAllNames()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + PREFIX_BOOKING_ID + \"BOOKING_ID \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_ROOM_SERVICE_TYPE + \"TYPE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_BOOKING_ID + \"3 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_ROOM_SERVICE_TYPE + \"DINING\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ordered room service:\\n%s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_BOOKING_MISSING \u003d \"No booking with id %s can be found.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_BOOKING_INVALID \u003d \"Booking with id %s is archived.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final RoomService roomService;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a RoomServiceCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceCommand(RoomService roomService) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomService \u003d roomService;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Orders room service given that the booking id exists and the booking is active"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(String.format(\"Ordering room service: %s\", roomService));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!model.hasBookingWithId(roomService.getBookingId())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOKING_MISSING, roomService.getBookingId()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!model.getBookingWithId(roomService.getBookingId()).isActive()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOKING_INVALID, roomService.getBookingId()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addRoomService(roomService);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert model.getRoomServicesForBooking(roomService.getBookingId()).size() \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        logger.info(String.format(\"Ordered room service: %s\", roomService));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomService), false, false,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                || (other instanceof RoomServiceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 roomService.equals(((RoomServiceCommand) other).roomService));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 74,
      "Hazel1603": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFLICTING_BOOKING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Unarchive (change an inactive booking back to active) the booking with a particular booking id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class UnarchiveBookingCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchiveBooking\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unarchive a booking. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_BOOKING_ID + \"BOOKING_ID (must be a valid booking id)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_BOOKING_ID + \"3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully unarchived booking: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_NOT_YET_ARCHIVED \u003d \"This booking is not archived yet.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final int bookingId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Creates a UnarchiveBookingCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param bookingId booking to archive"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public UnarchiveBookingCommand(int bookingId) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireAllNonNull(bookingId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Unarchive booking with the bookingId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert bookingId \u003e\u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.info(String.format(\"Unarchiving booking with id %s\", bookingId));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!model.hasBookingWithId(bookingId)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (model.getBookingWithId(bookingId).isActive()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_YET_ARCHIVED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            model.setBookingActive(bookingId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } catch (ConflictingBookingException conflictE) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new CommandException(MESSAGE_CONFLICTING_BOOKING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } catch (DuplicateBookingException duplicateE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert model.getBookingWithId(bookingId).isActive();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.info(String.format(\"Unarchived booking with id %s\", bookingId));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getBookingWithId(bookingId)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!(other instanceof UnarchiveBookingCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand o \u003d (UnarchiveBookingCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return this.bookingId \u003d\u003d o.bookingId;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 10,
      "iamgenechua": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "iamgenechua": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.AddBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Parses input arguments and creates a new {@code AddBookingCommand} object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class AddBookingCommandParser implements Parser\u003cAddBookingCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddBookingCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * and returns a {@code AddBookingCommand} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public AddBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID, PREFIX_ROOM_ID,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_ID, PREFIX_ROOM_ID, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert argMultimap.getValue(PREFIX_PERSON_ID).isPresent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert argMultimap.getValue(PREFIX_ROOM_ID).isPresent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert argMultimap.getValue(PREFIX_START_DATE).isPresent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert argMultimap.getValue(PREFIX_END_DATE).isPresent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int roomId \u003d ParserUtil.parseRoomId(argMultimap.getValue(PREFIX_ROOM_ID).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!startDate.isBefore(endDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert startDate.isBefore(endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new AddBookingCommand(personId, roomId, startDate, endDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 2,
      "iamgenechua": 55,
      "zeling595": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.AddBookingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.ArchiveBookingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.FilterRoomCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.FindBookingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.GetBillCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.ListBookingCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.ListRoomCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.RoomServiceCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.UnarchiveBookingCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        case AddBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return new AddBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        case ArchiveBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new ArchiveBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        case UnarchiveBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return new UnarchiveBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        case ListBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return new ListBookingCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        case ListRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return new ListRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        case FilterRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return new FilterRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        case GetBillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return new GetBillCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        case FindBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return new FindBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        case DeleteBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return new DeleteBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        case EditBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return new EditBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        case RoomServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new RoomServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 7,
      "shermz-lim": 11,
      "Hazel1603": 6,
      "-": 76,
      "iamgenechua": 12,
      "zeling595": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.ArchiveBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class ArchiveBookingCommandParser implements Parser\u003cArchiveBookingCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveBookingCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * and returns a ArchiveBookingCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ArchiveBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_BOOKING_ID).isEmpty() || !argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                    ArchiveBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert argMultiMap.getValue(PREFIX_BOOKING_ID).isPresent();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        int bookingId \u003d ParserUtil.parseBookingId(argMultiMap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new ArchiveBookingCommand(bookingId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Prefix PREFIX_PERSON_ID \u003d new Prefix(\"pid/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_ROOM_ID \u003d new Prefix(\"rid/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Prefix PREFIX_IS_ACTIVE \u003d new Prefix(\"ac/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Prefix PREFIX_ROOM_TYPE \u003d new Prefix(\"typ/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Prefix PREFIX_BOOKING_ID \u003d new Prefix(\"bid/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Prefix PREFIX_ROOM_SERVICE_TYPE \u003d new Prefix(\"rst/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 2,
      "Hazel1603": 1,
      "-": 15,
      "iamgenechua": 3,
      "zeling595": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Parses input arguments and creates a new DeleteBookingCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBookingCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * and returns a DeleteBookingCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public DeleteBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BOOKING_ID).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            Integer bookingId \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return new DeleteBookingCommand(bookingId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON_ID).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            Integer personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return new DeleteCommand(personId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "zeling595": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingCommandParser implements Parser\u003cEditBookingCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID, PREFIX_ROOM_ID, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BOOKING_ID).isEmpty() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Integer bookingId \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor editBookingDescriptor \u003d new EditBookingCommand.EditBookingDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_ID).isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            editBookingDescriptor.setRoomId(ParserUtil.parseRoomId(argMultimap.getValue(PREFIX_ROOM_ID).get()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            editBookingDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            editBookingDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!editBookingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(EditBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new EditBookingCommand(bookingId, editBookingDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON_ID).isEmpty() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Integer personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new EditCommand(personId, editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "zeling595": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.FilterRoomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Parses input arguments and creates a new {@code FilterRoomCommand} object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class FilterRoomCommandParser implements Parser\u003cFilterRoomCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code FilterRoomCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * and returns a {@code FilterRoomCommand} object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public FilterRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Parsing filterRoom ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                PREFIX_ROOM_TYPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (!startDate.isBefore(endDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            roomType \u003d ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new FilterRoomCommand(startDate, endDate, roomType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ACTIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.FindBookingCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesEndDatePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesIsActivePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesPersonIdPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesRoomIdPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesStartDatePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Parses input arguments and creates a new FindBookingCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class FindBookingCommandParser implements Parser\u003cFindBookingCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindBookingCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * and returns a FindBookingCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public FindBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID, PREFIX_ROOM_ID,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_IS_ACTIVE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        List\u003cPredicate\u003cBooking\u003e\u003e predicates \u003d new ArrayList\u003cPredicate\u003cBooking\u003e\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cInteger\u003e optionalRoomId \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cInteger\u003e optionalPersonId \u003d Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_ID).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            Integer roomId \u003d ParserUtil.parseRoomId(argMultimap.getValue(PREFIX_ROOM_ID).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            optionalRoomId \u003d Optional.of(roomId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            predicates.add(new BookingMatchesRoomIdPredicate(roomId));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON_ID).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            Integer personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            optionalPersonId \u003d Optional.of(personId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            predicates.add(new BookingMatchesPersonIdPredicate(personId));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            predicates.add(new BookingMatchesStartDatePredicate(startDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            LocalDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            predicates.add(new BookingMatchesEndDatePredicate(endDate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_ACTIVE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            boolean isActive \u003d ParserUtil.parseIsActive(argMultimap.getValue(PREFIX_IS_ACTIVE).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            predicates.add(new BookingMatchesIsActivePredicate(!isActive));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (predicates.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new FindBookingCommand(predicates, optionalRoomId, optionalPersonId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 77,
      "zeling595": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GetBillCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.GetBillCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Parses input arguments and creates a new {@code GetBillCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class GetBillCommandParser implements Parser\u003cGetBillCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code GetBillCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * and returns a {@code GetBillCommand} object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public GetBillCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_BOOKING_ID) || !argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetBillCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int bookingId \u003d ParserUtil.parseBookingId(argMultiMap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return new GetBillCommand(bookingId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.ListRoomCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class ListRoomCommandParser implements Parser\u003cListRoomCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ListRoomCommand}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * and returns a {@code ListRoomCommand} object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ListRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_TYPE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            roomType \u003d ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new ListRoomCommand(roomType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_ID \u003d \"Room Id is entered in invalid format\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOKING_ID \u003d \"Booking Id is entered in invalid format\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is entered in invalid format\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_ID \u003d \"Person Id is entered in invalid format\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_INVALID_IS_ACTIVE \u003d \"Invalid archived state\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Parses a {@code String person Id} into a {@code int}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param id person id as entered by user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @return person id as an integer"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @throws ParseException if the given {@code person Id} is invalid"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static int parsePersonId(String id) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            int personId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return personId;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses a {@code String room Id} into a {@code int}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param id room id as entered by user"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @return room id as an integer"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @throws ParseException if the given {@code room Id} is invalid"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static int parseRoomId(String id) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            int roomId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return roomId;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ROOM_ID);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Parses a {@code String booking Id} into a {@code int}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param id booking id as entered by user"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @return booking id as an integer"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws ParseException if the given {@code booking Id} is invalid"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static int parseBookingId(String id) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return Integer.parseInt(id);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_BOOKING_ID);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param date the date entered by the user"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @return the date as a LocalDate"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            LocalDate newDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return newDate;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Checks if the input is a valid representation of a {@code boolean}, case-insensitive."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static boolean isValidBooleanString(String input) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return \"true\".equalsIgnoreCase(input) || \"false\".equalsIgnoreCase(input);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses a {@code String date} into a {@code boolean}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param bool the boolean entered by the user"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @return the boolean as a boolean"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static boolean parseIsActive(String bool) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!isValidBooleanString(bool)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        boolean isActive \u003d Boolean.parseBoolean(bool);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Parses a {@code String room type} into a {@code int}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param roomType room type as entered by user"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return room type as an integer"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws ParseException if the given {@code room type} is invalid"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static int parseRoomType(String roomType) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(roomType);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            int value \u003d Integer.parseInt(roomType.trim());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (value \u003e\u003d 1 \u0026\u0026 value \u003c\u003d 3) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                return value;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new ParseException(\"Only 1, 2, 3 allowed.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_ROOM_TYPE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 34,
      "shermz-lim": 13,
      "Hazel1603": 23,
      "-": 124,
      "iamgenechua": 44,
      "zeling595": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RoomServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_SERVICE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.RoomServiceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomServiceCommandParser implements Parser\u003cRoomServiceCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RoomServiceCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * and returns a {@code RoomServiceCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID, PREFIX_ROOM_SERVICE_TYPE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKING_ID, PREFIX_ROOM_SERVICE_TYPE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoomServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert argMultimap.getValue(PREFIX_BOOKING_ID).isPresent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert argMultimap.getValue(PREFIX_ROOM_SERVICE_TYPE).isPresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer bookingId \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String type \u003d argMultimap.getValue(PREFIX_ROOM_SERVICE_TYPE).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // make user input case insensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String processedType \u003d type.toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // matching case-insensitive room services"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String dining \u003d RoomServiceType.DINING.getName().toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String wifi \u003d RoomServiceType.WIFI.getName().toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String massage \u003d RoomServiceType.MASSAGE.getName().toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (processedType.equals(dining)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new RoomServiceCommand(new RoomService(bookingId, RoomServiceType.DINING));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } else if (processedType.equals(wifi)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new RoomServiceCommand(new RoomService(bookingId, RoomServiceType.WIFI));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } else if (processedType.equals(massage)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new RoomServiceCommand(new RoomService(bookingId, RoomServiceType.MASSAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoomServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 53,
      "iamgenechua": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.UnarchiveBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class UnarchiveBookingCommandParser implements Parser\u003cUnarchiveBookingCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveBookingCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * and returns an UnarchiveBookingCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public UnarchiveBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_BOOKING_ID).isEmpty() || !argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                    UnarchiveBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assert argMultiMap.getValue(PREFIX_BOOKING_ID).isPresent();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int bookingId \u003d ParserUtil.parseBookingId(argMultiMap.getValue(PREFIX_BOOKING_ID).get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return new UnarchiveBookingCommand(bookingId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.UniqueBookingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBook implements ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final UniqueBookingList bookings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookings \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Creates an PersonBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook(ReadOnlyBookingBook toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the contents of the booking list with {@code bookings}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code persons} must not contain duplicate bookings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookings.setBookings(bookings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the given booking {@code target} in the list with {@code editedBooking}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code target} must exist in the booking book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * The booking identity of {@code editedBooking} must not be the same as"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * another existing booking in the booking book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookings.setBooking(target, editedBooking);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Resets the existing data of this {@code BookingBook} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        setBookings(newData.getBookingList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Adds a booking to the booking book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must not already exist in the booking book and conflict with existing booking."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void addBooking(Booking bookingToAdd) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookings.add(bookingToAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Removes {@code booking} from this {@code BookingBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code booking} must exist in the booking book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void removeBooking(Booking booking) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookings.removeBooking(booking);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Removes {@code booking} with matching {@code PersonId} from this {@code BookingBook}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void removeBookingWithPersonId(Integer personId) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookings.removeBookingWithPersonId(personId);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Get an active room."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param roomID"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @return An active room with matching room Id."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking getBooking(int roomID) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookings.getBooking(roomID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Set the isActive state to false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void setBookingInactive(int bookingId) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        bookings.setBookingInactive(bookingId);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Set the isActive state to true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void setBookingActive(int bookingId) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        bookings.setBookingActive(bookingId);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a booking with the same identity as {@code booking} exists in the booking book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.contains(booking);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a booking with the id is in the person book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.hasBookingWithId(id);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if booking itself is active and there exists a duplicate of it."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean containsActiveDuplicate(Booking booking) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.containsActiveDuplicate(booking);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the booking with matching ID."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Booking getBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return bookings.getBookingWithId(id);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns a list of rooms that are available from the startDate to the endDate."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getUnavailableRooms(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return bookings.getUnavailableRooms(startDate, endDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                || (other instanceof BookingBook // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 bookings.equals(((BookingBook) other).bookings));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 71,
      "shermz-lim": 7,
      "Hazel1603": 5,
      "iamgenechua": 4,
      "zeling595": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the user prefs\u0027 person book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the user prefs\u0027 person book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void setPersonBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the user prefs\u0027 booking book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the user prefs\u0027 booking book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void setBookingBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Replaces person book data with the data in {@code personBook}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void setPersonBook(ReadOnlyPersonBook personBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /** Returns the PersonBook */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    ReadOnlyPersonBook getPersonBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Replaces booking book data with the data in {@code bookingBook}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void setBookingBook(ReadOnlyBookingBook bookingBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /** Returns the BookingBook */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    ReadOnlyBookingBook getBookingBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the person book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a person with the id is in the person book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    boolean hasPersonWithId(Integer id);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Return person with matching id."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    Person getPersonWithId(Integer id);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The person must exist in the person book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code person} must not already exist in the person book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code target} must exist in the person book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the person book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // Room Book Methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds the given room."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * {@code rooom} must not already exist in the room book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void addRoom(Room r);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces current room list with {@code rooms}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void setRooms(List\u003cRoom\u003e rooms);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces current {@code ReadOnlyRoomBook} with {@code newData}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void resetData(ReadOnlyRoomBook newData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces current {@code ReadOnlyBookingBook} with {@code newData}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void resetData(ReadOnlyBookingBook newData);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays all rooms."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String displayRooms(ObservableList\u003cInteger\u003e rooms);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays all Single rooms."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String displaySingleRooms(ObservableList\u003cInteger\u003e rooms);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays all Double rooms."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String displayDoubleRooms(ObservableList\u003cInteger\u003e rooms);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays all Suite rooms."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String displaySuiteRooms(ObservableList\u003cInteger\u003e rooms);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if the roomId exist in the room book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    boolean hasRoom(int roomId);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code Room} with the corresponding {@code roomId}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Room getRoom(Integer roomId);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code ObservableList} of all available rooms given a list of unavailable rooms."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ObservableList\u003cInteger\u003e getAvailableRooms(ObservableList\u003cInteger\u003e unavailableRooms);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code ReadOnlyRoomBook}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ReadOnlyRoomBook getRoomBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // Booking Book Methods"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    boolean hasBooking(Booking booking);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a person with the id is in the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    boolean hasBookingWithId(Integer id);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    Booking getBookingWithId(Integer id);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Deletes the given booking."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must exist in the booking book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void deleteBooking(Booking target);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Deletes all booking associated with the personId."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must exist in the booking book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void deleteBookingByPersonId(Integer personId);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Adds the given booking."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must not exist in the booking book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void addBooking(Booking b);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Replaces bookings in the booking book with the list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void setBookings(List\u003cBooking\u003e bookings);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Replaces the given booking {@code target} with {@code editedBooking}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The {@code editedBooking} must not conflict with existing bookings."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void setBooking(Booking target, Booking editedBooking);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ObservableList\u003cInteger\u003e getUnavailableRooms(LocalDate startDate, LocalDate endDate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the isActive state to be false."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void setBookingInactive(int bookingId);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the isActive state to be true."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    void setBookingActive(int bookingId);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /** Returns an unmodifiable view of the filtered booking list */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // Room Service Methods"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a Room Service."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void addRoomService(RoomService rs);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code ObservableList} of all room services."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ObservableList\u003cRoomService\u003e getRoomServicesForBooking(Integer bookingId);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces room service book data with the data in {@code roomServiceBook}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void setRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code ReadOnlyRoomServiceBook}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ReadOnlyRoomServiceBook getRoomServiceBook();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 69,
      "shermz-lim": 16,
      "Hazel1603": 81,
      "-": 78,
      "iamgenechua": 2,
      "zeling595": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final PersonBook personBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final RoomBook roomBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final BookingBook bookingBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final RoomServiceBook roomServiceBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final FilteredList\u003cBooking\u003e filteredBookings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Initializes a ModelManager with the given personBook, bookingBook, roomBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ModelManager(ReadOnlyPersonBook personBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                        ReadOnlyRoomBook roomBook, ReadOnlyBookingBook bookingBook,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                        ReadOnlyRoomServiceBook roomServiceBook) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireAllNonNull(personBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + personBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personBook \u003d new PersonBook(personBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook \u003d new RoomBook(roomBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook \u003d new BookingBook(bookingBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomServiceBook \u003d new RoomServiceBook(roomServiceBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personBook.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        filteredBookings \u003d new FilteredList\u003c\u003e(this.bookingBook.getBookingList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // Initialize the nextAvailableId of Person class so that each new person gets a unique id"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer nextAvailableId \u003d this.personBook.getPersonList().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .mapToInt(Person::getId).max().orElse(0) + 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(nextAvailableId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // Initialize the nextAvailableId of Booking class so that each new booking gets a unique id"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Integer nextAvailableIdBooking \u003d this.bookingBook.getBookingList().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .mapToInt(Booking::getId).max().orElse(0) + 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking.setNextAvailableId(nextAvailableIdBooking);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this(new PersonBook(), new UserPrefs(), new RoomBook(), new BookingBook(), new RoomServiceBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return userPrefs.getPersonBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return userPrefs.getBookingBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setPersonBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath(Path bookingBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(bookingBookFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setBookingBookFilePath(bookingBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBook(ReadOnlyPersonBook personBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personBook.resetData(personBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook.hasPerson(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook.hasPersonWithId(id);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Person getPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return personBook.getPersonWithId(id);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.removePerson(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.addPerson(person);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ReadOnlyRoomBook getRoomBook() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this.roomBook;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.addRoom(r);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.setRooms(rooms);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.resetData(newData);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.bookingBook.resetData(newData);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getAvailableRooms(ObservableList\u003cInteger\u003e unavailableRooms) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getAvailableRooms(unavailableRooms);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String displayRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Displaying All Rooms ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.displayRooms(rooms);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String displaySingleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Displaying Single Rooms ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getSingleRooms(rooms);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String displayDoubleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Displaying Double Rooms ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getDoubleRooms(rooms);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String displaySuiteRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Displaying Suite Rooms ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getSuiteRooms(rooms);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean hasRoom(int roomId) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.hasRoom(roomId);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(Integer roomId) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getRoom(roomId);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBook(ReadOnlyBookingBook bookingBook) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingBook.resetData(bookingBook);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ReadOnlyBookingBook getBookingBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this.bookingBook;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBook.hasBooking(booking);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBook.hasBookingWithId(id);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Return booking with this booking id"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Booking getBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return bookingBook.getBookingWithId(id);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void deleteBookingByPersonId(Integer personId) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookingBook.removeBookingWithPersonId(personId);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void deleteBooking(Booking target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookingBook.removeBooking(target);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void addBooking(Booking b) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.addBooking(b);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.setBookings(bookings);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.setBooking(target, editedBooking);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getUnavailableRooms(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.bookingBook.getUnavailableRooms(startDate, endDate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void setBookingInactive(int bookingId) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingBook.setBookingInactive(bookingId);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void setBookingActive(int bookingId) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.bookingBook.setBookingActive(bookingId);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Booking List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return filteredBookings;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        filteredBookings.setPredicate(predicate);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomServiceBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void addRoomService(RoomService rs) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomServiceBook.addRoomService(rs);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ObservableList\u003cRoomService\u003e getRoomServicesForBooking(Integer bookingId) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.roomServiceBook.getRoomServicesForBooking(bookingId);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void setRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomServiceBook.resetData(roomServiceBook);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ReadOnlyRoomServiceBook getRoomServiceBook() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.roomServiceBook;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook.equals(other.personBook)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 bookingBook.equals(other.bookingBook)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 filteredBookings.equals(other.filteredBookings)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 roomServiceBook.equals(other.roomServiceBook);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 70,
      "shermz-lim": 49,
      "Hazel1603": 70,
      "-": 136,
      "iamgenechua": 5,
      "zeling595": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class PersonBook implements ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Creates an PersonBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBook(ReadOnlyPersonBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Resets the existing data of this {@code PersonBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void resetData(ReadOnlyPersonBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if a person with the id is in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return persons.hasPersonWithId(id);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Person getPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return persons.getPersonWithId(id);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Removes {@code key} from this {@code PersonBook}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof PersonBook // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonBook) other).persons));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 9,
      "shermz-lim": 8,
      "Hazel1603": 3,
      "-": 111,
      "zeling595": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public interface ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRoomBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public interface ReadOnlyRoomBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns an unmodifiable view of the Room list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * This list will not contain any duplicate rooms."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRoomServiceBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Unmodified view of room service book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public interface ReadOnlyRoomServiceBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns an unmodifiable view of the room service list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    ObservableList\u003cRoomService\u003e getRoomServiceList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBook implements ReadOnlyRoomBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final UniqueRoomList rooms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        rooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBook() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates an RoomBook using the rooms in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBook(ReadOnlyRoomBook tobeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        resetData(tobeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// list level operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code ObservableList} that gets all available rooms."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getAvailableRooms(ObservableList\u003cInteger\u003e unavailableRooms) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getComplementRooms(unavailableRooms);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a room to the room book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * The room must not already exist in the room book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        rooms.add(r);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces the contents of the room list with {@code rooms}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.rooms.setRooms(rooms);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that lists in rooms according to room types."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String displayRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getAllRooms(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that lists only Single Rooms."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getSingleRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getSingleRooms(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that lists only Double Rooms."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getDoubleRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getDoubleRooms(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that lists only Suite Rooms."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getSuiteRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getSuiteRooms(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Resets the existing data of this {@code RoomBook} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// room level operations"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if a room with the same roomId exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean hasRoom(Integer roomId) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.contains(roomId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a room to the room book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getRoom(roomId);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// util methods"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                || (other instanceof RoomBook // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 rooms.equals(((RoomBook) other).rooms));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomServiceBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Manages model for room services."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomServiceBook implements ReadOnlyRoomServiceBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final ObservableList\u003cRoomService\u003e internalRoomServiceList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final ObservableList\u003cRoomService\u003e internalUnmodifiableRoomServiceList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalRoomServiceList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBook() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a RoomServiceBook using the RoomService in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBook(ReadOnlyRoomServiceBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Adds room service to model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void addRoomService(RoomService roomService) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(roomService);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        internalRoomServiceList.add(roomService);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns all the room services for this booking, identified by bookingId"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ObservableList\u003cRoomService\u003e getRoomServicesForBooking(Integer bookingId) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(bookingId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert bookingId \u003e\u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return internalRoomServiceList.stream().filter(rs -\u003e rs.belongsToBooking(bookingId)).collect("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                Collectors.toCollection(FXCollections::observableArrayList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Resets the existing data of this {@code RoomServiceBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void resetData(ReadOnlyRoomServiceBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        internalRoomServiceList.setAll(newData.getRoomServiceList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public ObservableList\u003cRoomService\u003e getRoomServiceList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return internalUnmodifiableRoomServiceList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                || (other instanceof RoomServiceBook // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 internalRoomServiceList.equals(((RoomServiceBook) other).internalRoomServiceList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path personBookFilePath \u003d Paths.get(\"data\" , \"personbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path bookingBookFilePath \u003d Paths.get(\"data\" , \"bookingbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private Path roomServiceBookFilePath \u003d Paths.get(\"data\", \"roomservicebook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        setPersonBookFilePath(newUserPrefs.getPersonBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        setBookingBookFilePath(newUserPrefs.getBookingBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBookFilePath(Path personBookFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(personBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personBookFilePath \u003d personBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBookFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath(Path bookingBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(bookingBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingBookFilePath \u003d bookingBookFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Path getRoomServiceBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return roomServiceBookFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void setRoomServiceBookFilePath(Path roomServiceBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(roomServiceBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.roomServiceBookFilePath \u003d roomServiceBookFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 personBookFilePath.equals(o.personBookFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 bookingBookFilePath.equals(o.bookingBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return Objects.hash(guiSettings, personBookFilePath, bookingBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        sb.append(\"\\nLocal data file location for personBook: \" + personBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        sb.append(\"\\nLocal data file location for bookingBook: \" + bookingBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 24,
      "-": 82,
      "iamgenechua": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Booking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static Integer nextAvailableId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer roomId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final boolean isActive;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Every field must be present and not null. Used for creating a new Booking with a unique id."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking(Integer roomId, Integer personId, LocalDate startDate, LocalDate endDate, boolean isActive) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireAllNonNull(roomId, personId, startDate, endDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d nextAvailableId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        nextAvailableId +\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Every field must be present and not null. Used for creating a Booking with an existing id."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking(Integer roomId, Integer personId, LocalDate startDate, LocalDate endDate, boolean isActive,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                   Integer id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireAllNonNull(roomId, personId, startDate, endDate, id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets next available id to be used"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static void setNextAvailableId(Integer id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking.nextAvailableId \u003d id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getRoomId() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return roomId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getPersonId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the number of the nights of a booking."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        long noOfDaysBetween \u003d DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        int duration \u003d (int) noOfDaysBetween;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if two booking conflict with each other."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param otherBooking Another Booking object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @return a boolean."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasConflict(Booking otherBooking) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!otherBooking.getRoomId().equals(getRoomId())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (isActive() \u003d\u003d false || otherBooking.isActive() \u003d\u003d false) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate start \u003d getStartDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate end \u003d getEndDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate otherBookingStart \u003d otherBooking.getStartDate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate otherBookingEnd \u003d otherBooking.getEndDate();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return otherBookingStart.isBefore(end) \u0026\u0026 otherBookingEnd.isAfter(start);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if Booking has overlap with given {@code startDate} and {@code endDate}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean hasOverlap(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (this.startDate.isEqual(startDate) || this.endDate.isEqual(endDate)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                || this.endDate.isEqual(startDate) || this.startDate.isEqual(endDate)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return isActive \u0026\u0026 startDate.isBefore(this.endDate) \u0026\u0026 endDate.isAfter(this.startDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns true if the room id, person id, start date, end date are the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param otherBooking the other booking to compare."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean isSameBooking(Booking otherBooking) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (otherBooking.equals(this)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return otherBooking.getRoomId().equals(getRoomId())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 otherBooking.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 otherBooking.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 otherBooking.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 otherBooking.isActive() \u003d\u003d isActive();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if both bookings have the same identity and data fields."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!(other instanceof Booking)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking otherBooking \u003d (Booking) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return otherBooking.getId().equals(getId())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getRoomId().equals(getRoomId())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.isActive() \u003d\u003d isActive();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return Objects.hash(roomId, personId, startDate, endDate, isActive);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        builder.append(\"Id: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Room Id: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getRoomId())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Person Id: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getPersonId())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(\" Archived: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(!isActive());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 155,
      "shermz-lim": 2,
      "Hazel1603": 10,
      "iamgenechua": 2,
      "zeling595": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesBookingIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingMatchesBookingIdPredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer bookingId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingMatchesBookingIdPredicate(Integer bookingId) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookingId.equals(booking.getId());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                || (other instanceof BookingMatchesBookingIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 bookingId.equals(((BookingMatchesBookingIdPredicate) other).bookingId)); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesEndDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code endDate} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesEndDatePredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingMatchesEndDatePredicate(LocalDate endDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return endDate.equals(booking.getEndDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof BookingMatchesEndDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 endDate.equals(((BookingMatchesEndDatePredicate) other).endDate)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesIsActivePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code roomId} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesIsActivePredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final boolean isActive;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingMatchesIsActivePredicate(boolean isActive) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return isActive \u003d\u003d booking.isActive();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof BookingMatchesIsActivePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 isActive \u003d\u003d ((BookingMatchesIsActivePredicate) other).isActive); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesPersonIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code personId} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesPersonIdPredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingMatchesPersonIdPredicate(Integer personId) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personId.equals(booking.getPersonId());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof BookingMatchesPersonIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 personId.equals(((BookingMatchesPersonIdPredicate) other).personId)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesRoomIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code roomId} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesRoomIdPredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer roomId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingMatchesRoomIdPredicate(Integer roomId) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return roomId.equals(booking.getRoomId());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof BookingMatchesRoomIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 roomId.equals(((BookingMatchesRoomIdPredicate) other).roomId)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingMatchesStartDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code startDate} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesStartDatePredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingMatchesStartDatePredicate(LocalDate startDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return startDate.equals(booking.getStartDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                || (other instanceof BookingMatchesStartDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 startDate.equals(((BookingMatchesStartDatePredicate) other).startDate)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/UniqueBookingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.booking.exception.ExceedDurationStayException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class UniqueBookingList implements Iterable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if the list contains an equivalent booking as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean contains(Booking toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBooking);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if the list contains an equivalent active booking as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean containsActiveDuplicate(Booking toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .filter(booking -\u003e booking.isActive() \u003d\u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .anyMatch(toCheck::isSameBooking);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if the list contains a booking with the given id."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return internalList.stream().anyMatch(booking -\u003e booking.getId().equals(id));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the booking with the given id."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Or BookingNotFoundException is thrown."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Booking getBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!hasBookingWithId(id)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .filter(booking -\u003e booking.getId().equals(id))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .findFirst().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Removes a booking from the List."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must already exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Or BookingNotFoundException is thrown."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void removeBooking(Booking toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Removes bookings associated with a personId from the List."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void removeBookingWithPersonId(Integer personID) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(personID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        setBookings(internalList.stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .filter(booking -\u003e !booking.getPersonId().equals(personID))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Adds a booking to the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The booking must not already exist in the list if the booking is active"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add(Booking toAdd) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // check if exceed duration of 30-day stay"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (toAdd.getDuration() \u003e 30) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ExceedDurationStayException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // check active duplicate"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (containsActiveDuplicate(toAdd)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // check if conflict"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        boolean hasConflict;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        hasConflict \u003d internalList.stream().anyMatch(booking -\u003e booking.hasConflict(toAdd));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (hasConflict) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ConflictingBookingException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns a booking with the room ID"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param roomId The room ID of the booking"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @return The booking that contains the room ID"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking getBooking(int roomId) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(booking -\u003e booking.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(Booking::isActive)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .orElseThrow(() -\u003e new BookingNotFoundException());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets a booking to inactive. Create new booking and set."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @param bookingId The booking id to be set inactive"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void setBookingInactive(int bookingId) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(bookingId);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Booking booking \u003d getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d new Booking(booking.getRoomId(), booking.getPersonId(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                booking.getStartDate(), booking.getEndDate(), false, booking.getId());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        setBooking(booking, editedBooking);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets a booking to active. Create new booking and set."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param bookingId The booking id to be set inactive"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void setBookingActive(int bookingId) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(bookingId);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Booking booking \u003d getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Booking editedBooking \u003d new Booking(booking.getRoomId(), booking.getPersonId(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                booking.getStartDate(), booking.getEndDate(), true, booking.getId());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        setBooking(booking, editedBooking);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets a target booking to edited booking."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param target The booking to be replaced."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param editedBooking The edited booking to be added to the unique booking list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireAllNonNull(target, editedBooking);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Check if booking exists"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Check if duplicate booking"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!target.isSameBooking(editedBooking) \u0026\u0026 containsActiveDuplicate(editedBooking)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            System.out.println(\"containsActive\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Check conflict"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        boolean hasConflict;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        hasConflict \u003d internalList.stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(booking -\u003e !booking.equals(target))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .anyMatch(booking -\u003e booking.hasConflict(editedBooking));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (hasConflict) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ConflictingBookingException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Check if exceed duration"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (editedBooking.getDuration() \u003e 30) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new ExceedDurationStayException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.set(index, editedBooking);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the bookings in the current list with bookings in replacement unique booking list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(UniqueBookingList replacement) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the contents of this list with {@code bookings}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code bookings} must not contain duplicate bookings."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireAllNonNull(bookings);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!bookingsAreUnique(bookings)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.setAll(bookings);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns true if {@code bookings} contains only unique bookings."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private boolean bookingsAreUnique(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                if (bookings.get(i).equals(bookings.get(j))) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns a list of unavailable rooms that overlap with the period from start date to end date."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getUnavailableRooms(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return FXCollections.observableArrayList(internalList.stream().filter(x -\u003e x.hasOverlap(startDate, endDate))"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                    .map(Booking::getRoomId)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Iterator\u003cBooking\u003e iterator() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                || (other instanceof UniqueBookingList // instanceof handles nulls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBookingList) other).internalList));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 72,
      "shermz-lim": 5,
      "Hazel1603": 21,
      "iamgenechua": 11,
      "zeling595": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/BookingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/ConflictingBookingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class ConflictingBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/DuplicateBookingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class DuplicateBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/ExceedDurationStayException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class ExceedDurationStayException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static Integer nextAvailableId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Every field must be present and not null. Used for creating a new Person with a unique id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d nextAvailableId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        nextAvailableId +\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Every field must be present and not null. Used for creating a Person with existing id."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Integer id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets next available id to be used"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static void setNextAvailableId(Integer id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.nextAvailableId \u003d id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return otherPerson.getId().equals(getId())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        builder.append(\"Id: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 35,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if the list contains a person with the given id"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getId().equals(id));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code Person} with the corresponding id."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws PersonNotFoundException if person does not exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Person getPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!hasPersonWithId(id)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(person -\u003e person.getId().equals(id))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .findFirst().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 8,
      "Hazel1603": 9,
      "-": 132,
      "zeling595": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Double.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Double extends Room {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int doublePrice \u003d 100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a Double Room Object with the standard {@code DOUBLE_PRICE} and given room ID."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Double(int roomID) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(roomID);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d doublePrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public abstract class Room {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected int price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected final int roomID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room(int roomID) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireAllNonNull(roomID);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomID \u003d roomID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getRoomID() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setPrice(int newPrice) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d newPrice;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if both rooms have the same price and roomId."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Room otherRoom) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return otherRoom !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 otherRoom.getPrice() \u003d\u003d (getPrice())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 otherRoom.getRoomID() \u003d\u003d (getRoomID());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Room{\" + \"price\u003d\" + price + \", roomID\u003d\" + roomID + \u0027}\u0027;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Single.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Single extends Room {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int singlePrice \u003d 70;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a Single Room Object with the standard {@code SINGLE_PRICE} and given room ID."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Single(int roomID) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(roomID);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d singlePrice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Suite.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Suite extends Room {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int suitePrice \u003d 150;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a Suite Room Object with the standard {@code SUITE_PRICE} and given room ID."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Suite(int roomID) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(roomID);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d suitePrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/UniqueRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room EMPTY_ROOM \u003d new Single(-1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalRoomList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableRoomList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalRoomList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean contains(int roomId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalRoomList.stream().anyMatch(n -\u003e n.getRoomID() \u003d\u003d (roomId));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a Room to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (internalRoomList.contains(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalRoomList.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a Room to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assert roomId \u003e\u003d 2103 \u0026\u0026 roomId \u003c 2133;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room ret \u003d EMPTY_ROOM;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c internalRoomList.size(); k++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            Room curr \u003d internalRoomList.get(k); // get the roomID"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (curr.getRoomID() \u003d\u003d roomId) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret \u003d curr;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns an {@code ObservableList} of roomIDs that are not in the input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input {@code ObservableList} of roomIDs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return {@code ObservableList} of rooms"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getComplementRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assert !internalRoomList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e ret \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c internalRoomList.size(); k++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            int curr \u003d internalRoomList.get(k).getRoomID(); // get the roomID"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (!input.contains(curr)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret.add(curr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireAllNonNull(rooms);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (!roomsAreUnique(rooms)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalRoomList.setAll(rooms);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(UniqueRoomList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalRoomList.setAll(replacement.internalRoomList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalUnmodifiableRoomList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalRoomList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if {@code persons} contains only unique rooms."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                if (rooms.get(i).equals(rooms.get(j))) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that lists in rooms according to room types."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getAllRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e singleRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e doubleRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e suiteRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i : rooms) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (i \u003c 2103) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2113) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                singleRooms.add(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2123) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                doubleRooms.add(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2133) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                suiteRooms.add(i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String singleRoomsData \u003d \"Single Rooms: \" + singleRooms.size() + \" \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + Arrays.toString(singleRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String doubleRoomsData \u003d \"Double Rooms: \" + doubleRooms.size() + \" \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + Arrays.toString(doubleRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String suiteRoomsData \u003d \"Suite Rooms: \" + suiteRooms.size() + \" \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + Arrays.toString(suiteRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return singleRoomsData + doubleRoomsData + suiteRoomsData;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays only the single rooms available in the {@code rooms}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getSingleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e singleRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i : rooms) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (i \u003c 2103) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2113) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                singleRooms.add(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Single Rooms: \" + singleRooms.size() + \" \" + Arrays.toString(singleRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays only the double rooms available in the {@code rooms}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getDoubleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e doubleRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i : rooms) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (i \u003c 2113) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2123) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                doubleRooms.add(i);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Double Rooms: \" + doubleRooms.size() + \" \" + Arrays.toString(doubleRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a {@code String} that displays only the suite rooms available in the {@code rooms}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getSuiteRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e suiteRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i : rooms) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (i \u003c 2123) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else if (i \u003c 2133) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                suiteRooms.add(i);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Suite Rooms: \" + suiteRooms.size() + \" \" + Arrays.toString(suiteRooms.toArray()) + \"\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                || (other instanceof UniqueRoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 internalRoomList.equals(((UniqueRoomList) other).internalRoomList));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/roomservice/RoomService.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model.roomservice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Class for different types of room service"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomService {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer bookingId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final RoomServiceType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Instantiates room service with booking id and type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomService(Integer bookingId, RoomServiceType type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireAllNonNull(bookingId, type);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Integer getBookingId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.bookingId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Checks whether this room service belongs to the booking with bookingId"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean belongsToBooking(Integer bookingId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assert bookingId \u003e\u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.getBookingId().equals(bookingId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceType getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if both room service have the same booking id"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!(other instanceof RoomService)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomService otherRoomService \u003d (RoomService) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return otherRoomService.getBookingId().equals(getBookingId())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 otherRoomService.type \u003d\u003d type;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return String.format(\"[BookingID: %s; Service type: %s; Price: $%s]\", this.bookingId,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                this.type.getVerboseName(), this.type.getPrice());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/roomservice/RoomServiceType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model.roomservice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public enum RoomServiceType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    WIFI(\"WIFI\", \"Wifi service\", 15),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    DINING(\"DINING\", \"Dining in service\", 50),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    MASSAGE(\"MASSAGE\", \"Massaging service\", 70);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final String verboseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    RoomServiceType(String name, String verboseName, Integer price) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.verboseName \u003d verboseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public String getVerboseName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.verboseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Integer getPrice() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static String getAllNames() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return Arrays.stream(values()).map(RoomServiceType::getName).collect(Collectors.toList()).toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Contains utility methods for populating {@code PersonBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(\"VIP\"), 1),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(\"VIP\"), 2),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(), 3),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(\"VIP\"), 4),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(), 5),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                getTagSet(\"VVIP\"), 6)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static ReadOnlyPersonBook getSamplePersonBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook sampleAb \u003d new PersonBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // 2103 - 2133"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static Booking[] getSampleBookings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new Booking[] {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2103, 1, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), true, 1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2104, 2, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), true, 2),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2105, 3, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), true, 3),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2106, 4, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), false, 4),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2107, 5, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), false, 5),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new Booking(2108, 6, LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                LocalDate.now().plusMonths(1).plusDays(1), false, 6),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static ReadOnlyBookingBook getSampleBookingBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook sampleBb \u003d new BookingBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        for (Booking sampleBooking : getSampleBookings()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            sampleBb.addBooking(sampleBooking);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static RoomService[] getSampleRoomService() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new RoomService[] {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static ReadOnlyRoomServiceBook getSampleRoomServiceBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceBook sampleRsb \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        for (RoomService sampleRoomService : getSampleRoomService()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            sampleRsb.addRoomService(sampleRoomService);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return sampleRsb;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 9,
      "shermz-lim": 22,
      "-": 49,
      "zeling595": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Represents a storage for {@link seedu.address.model.BookingBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface BookingBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns BookingBook data as a {@link ReadOnlyPersonBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #getBookingBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Saves the given {@link ReadOnlyBookingBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param bookingBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #saveBookingBook(ReadOnlyBookingBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 15,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBooking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class JsonAdaptedBooking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer roomId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final boolean isActive;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Constructs a {@code JsonAdaptedBooking} with the given booking details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public JsonAdaptedBooking(@JsonProperty(\"id\") Integer id,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"roomId\") Integer roomId,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"personId\") Integer personId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"startDate\") LocalDate startDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"endDate\") LocalDate endDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                              @JsonProperty(\"isActive\") Boolean isActive) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Converts a given {@code Booking} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public JsonAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        roomId \u003d source.getRoomId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        personId \u003d source.getPersonId();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        startDate \u003d source.getStartDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        endDate \u003d source.getEndDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        isActive \u003d source.isActive();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Converts this Jackson-friendly adapted booking object into the model\u0027s {@code Booking} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } else if (id \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelId \u003d id;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (roomId \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"roomId\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else if (roomId \u003e 2132 || roomId \u003c 2103) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ROOM_ID_MISSING);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelRoomId \u003d roomId;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"personId\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } else if (personId \u003c\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelPersonId \u003d personId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"startDate\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"endDate\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else if (!startDate.isBefore(endDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        long noOfDaysBetween \u003d DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int duration \u003d (int) noOfDaysBetween;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (duration \u003e 30) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EXCEED_DURATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final LocalDate modelStartDate \u003d startDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final LocalDate modelEndDate \u003d endDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final boolean modelIsActive \u003d isActive;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new Booking(modelRoomId, modelPersonId, modelStartDate, modelEndDate, modelIsActive, modelId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 12,
      "Hazel1603": 11,
      "zeling595": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"id\") Integer id,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final Integer modelId \u003d id;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelId);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 11,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoomService.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class JsonAdaptedRoomService {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"RoomService\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final Integer bookingId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final RoomServiceType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoomService} with the given room service details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public JsonAdaptedRoomService(@JsonProperty(\"bookingId\") Integer bookingId,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                                  @JsonProperty(\"type\") RoomServiceType type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Converts a given {@code RoomService} into this class for JSON use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public JsonAdaptedRoomService(RoomService source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        bookingId \u003d source.getBookingId();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        type \u003d source.getType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Converts this JSON-friendly adapted booking object into the model\u0027s {@code RoomService} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public RoomService toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (bookingId \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"bookingId\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"type\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return new RoomService(bookingId, type);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBookingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * A class to access BookingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonBookingBookStorage implements BookingBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookingBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonBookingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readBookingBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #readBookingBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cJsonSerializableBookingBook\u003e jsonBookingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                filePath, JsonSerializableBookingBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!jsonBookingBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return Optional.of(jsonBookingBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        saveBookingBook(bookingBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #saveBookingBook(ReadOnlyBookingBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(bookingBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBookingBook(bookingBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 22,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPersonBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * A class to access PersonBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonPersonBookStorage implements PersonBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonPersonBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readPersonBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readPersonBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #readPersonBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readPersonBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cJsonSerializablePersonBook\u003e jsonPersonBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                filePath, JsonSerializablePersonBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!jsonPersonBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return Optional.of(jsonPersonBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook(ReadOnlyPersonBook personBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        savePersonBook(personBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #savePersonBook(ReadOnlyPersonBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook(ReadOnlyPersonBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRoomServiceBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ReadOnlyRoomServiceBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class JsonRoomServiceBookStorage implements RoomServiceBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public JsonRoomServiceBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Path getRoomServiceBookFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return readRoomServiceBook(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Similar to {@link #readRoomServiceBook()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook(Path filePath)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Optional\u003cJsonSerializableRoomServiceBook\u003e jsonRoomServiceBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                filePath, JsonSerializableRoomServiceBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!jsonRoomServiceBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return Optional.of(jsonRoomServiceBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        saveRoomServiceBook(roomServiceBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(roomServiceBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRoomServiceBook(roomServiceBook), filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "iamgenechua": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * An Immutable BookingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@JsonRootName(value \u003d \"bookingBook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "class JsonSerializableBookingBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"Bookings list contains duplicate active booking(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Constructs a {@code JsonSerializableBookingBook} with the given bookings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializableBookingBook(@JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookings.addAll(bookings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts a given {@code ReadOnlyBookingBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBookingBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializableBookingBook(ReadOnlyBookingBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookings.addAll(source.getBookingList().stream().map(JsonAdaptedBooking::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts this booking book into the model\u0027s {@code BookingBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            Booking booking \u003d jsonAdaptedBooking.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            if (bookingBook.containsActiveDuplicate(booking)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            bookingBook.addBooking(booking);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * An Immutable PersonBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@JsonRootName(value \u003d \"personbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "class JsonSerializablePersonBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializablePersonBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts a given {@code ReadOnlyPersonBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializablePersonBook(ReadOnlyPersonBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts this person book into the model\u0027s {@code PersonBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            if (personBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            personBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRoomServiceBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ReadOnlyRoomServiceBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.RoomServiceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * An Immutable RoomServiceBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "@JsonRootName(value \u003d \"roomServiceBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class JsonSerializableRoomServiceBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final List\u003cJsonAdaptedRoomService\u003e roomServices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Constructs a {@code JsonSerializableRoomServiceBook} with the given bookings."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public JsonSerializableRoomServiceBook(@JsonProperty(\"roomServices\") List\u003cJsonAdaptedRoomService\u003e roomServices) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.roomServices.addAll(roomServices);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Converts a given {@code ReadOnlyRoomServiceBook} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRoomServiceBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public JsonSerializableRoomServiceBook(ReadOnlyRoomServiceBook source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        roomServices.addAll(source.getRoomServiceList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .map(JsonAdaptedRoomService::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Converts this room service book into the model\u0027s {@code RoomServiceBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public RoomServiceBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        RoomServiceBook roomServiceBook \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        for (JsonAdaptedRoomService jsonAdaptedRoomService : roomServices) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            RoomService roomService \u003d jsonAdaptedRoomService.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            roomServiceBook.addRoomService(roomService);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return roomServiceBook;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PersonBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Represents a storage for {@link PersonBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface PersonBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns PersonBook data as a {@link ReadOnlyPersonBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readPersonBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #getPersonBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readPersonBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param personBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void savePersonBook(ReadOnlyPersonBook personBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #savePersonBook(ReadOnlyPersonBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void savePersonBook(ReadOnlyPersonBook personBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RoomServiceBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ReadOnlyRoomServiceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RoomServiceBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public interface RoomServiceBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Path getRoomServiceBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns RoomServiceBook data as a {@link ReadOnlyPersonBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @see #getRoomServiceBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Saves the given {@link ReadOnlyRoomServiceBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param roomServiceBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @see #saveRoomServiceBook(ReadOnlyRoomServiceBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "iamgenechua": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface Storage extends PersonBookStorage, BookingBookStorage, UserPrefsStorage, RoomServiceBookStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readPersonBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void savePersonBook(ReadOnlyPersonBook personBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 14,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ReadOnlyRoomServiceBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Manages storage of PersonBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private PersonBookStorage personBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingBookStorage bookingBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private RoomServiceBookStorage roomServiceBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PersonBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public StorageManager(PersonBookStorage personBookStorage, BookingBookStorage bookingBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, RoomServiceBookStorage roomServiceBookStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personBookStorage \u003d personBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingBookStorage \u003d bookingBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.roomServiceBookStorage \u003d roomServiceBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBookStorage.getPersonBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readPersonBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readPersonBook(personBookStorage.getPersonBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readPersonBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBookStorage.readPersonBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook(ReadOnlyPersonBook personBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        savePersonBook(personBook, personBookStorage.getPersonBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook(ReadOnlyPersonBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBookStorage.savePersonBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBookStorage.getBookingBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readBookingBook(bookingBookStorage.getBookingBookFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBookStorage.readBookingBook(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        saveBookingBook(bookingBook, bookingBookStorage.getBookingBookFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookingBookStorage.saveBookingBook(bookingBook, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomServiceBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Path getRoomServiceBookFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return roomServiceBookStorage.getRoomServiceBookFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return readRoomServiceBook(roomServiceBookStorage.getRoomServiceBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public Optional\u003cReadOnlyRoomServiceBook\u003e readRoomServiceBook(Path filePath)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return roomServiceBookStorage.readRoomServiceBook(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        saveRoomServiceBook(roomServiceBook, roomServiceBookStorage.getRoomServiceBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void saveRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        roomServiceBookStorage.saveRoomServiceBook(roomServiceBook, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 48,
      "-": 62,
      "iamgenechua": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * An UI component that displays information of a {@code Booking}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class BookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final String FXML \u003d \"BookingCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PersonBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public final Booking booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label roomId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label period;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private FlowPane archivedTag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a {@code BookingCard} with the given {@code Booking} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public BookingCard(Booking booking, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id.setText(String.format(\"Booking ID: %s\", booking.getId().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        personId.setText(String.format(\"Person ID: %s\", booking.getPersonId().toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomId.setText(String.format(\"Room ID: %s\", booking.getRoomId().toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        period.setText(String.format(\"Period: from %s to %s\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                booking.getStartDate().toString(), booking.getEndDate().toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!booking.isActive()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            archivedTag.getChildren().add(new Label(\"ARCHIVED\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!(other instanceof BookingCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        BookingCard card \u003d (BookingCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 booking.equals(card.booking);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Panel containing the list of bookings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class BookingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final String FXML \u003d \"BookingListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private ObservableList\u003cBooking\u003e masterData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private ListView\u003cBooking\u003e bookingListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a {@code BookingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public BookingListPanel(ObservableList\u003cBooking\u003e bookingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        masterData \u003d bookingList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        SortedList\u003cBooking\u003e sortedData \u003d new SortedList\u003c\u003e(masterData, new Comparator\u003cBooking\u003e() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            public int compare(Booking o1, Booking o2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                if (o1.isActive() \u0026\u0026 !o2.isActive()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                } else if (o2.isActive() \u0026\u0026 !o1.isActive()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    return o2.getStartDate().compareTo(o1.getStartDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingListView.setItems(sortedData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        bookingListView.setCellFactory(listView -\u003e new BookingListViewCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Booking} using a {@code BookingCard}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    class BookingListViewCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 47,
      "zeling595": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-w14-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HomePagePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class HomePagePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final String FXML \u003d \"HomePagePanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label roomsAvailableTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label singleRoomsText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label doubleRoomsText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label suiteRoomsText;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label roomServicesTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label wifiService;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label diningService;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label massageService;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label recentBookingsTitle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private ListView\u003cBooking\u003e recentBookingsView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a HomePagePanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public HomePagePanel(ObservableList\u003cBooking\u003e bookingList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomsAvailableTitle.setText(\"Type of Rooms Available:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        singleRoomsText.setText("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \"Single Rooms: 2103 ~ 2112 (Price: $70/night)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        doubleRoomsText.setText("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \"Double Rooms: 2113 ~ 2122 (Price: $100/night)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        suiteRoomsText.setText("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \"Suite Rooms: 2123 ~ 2132 (Price: $150/night)\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServicesTitle.setText(\"Room Services Available:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        wifiService.setText(\"WIFI: Get 1GB of fast wifi (Price: $15)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        diningService.setText(\"DINING: Order a meal delivered to your doorstep (Price: $50)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        massageService.setText(\"MASSAGE: Get a full body massage (Price: $70)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        recentBookingsTitle.setText(\"Recently Added Bookings:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        FilteredList\u003cBooking\u003e filteredBookingList \u003d new FilteredList\u003c\u003e(bookingList, Booking::isActive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        SortedList\u003cBooking\u003e sortedBookingList \u003d new SortedList\u003c\u003e(filteredBookingList, (o1, o2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            -\u003e o2.getId().compareTo(o1.getId()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        recentBookingsView.setItems(sortedBookingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        recentBookingsView.setCellFactory(listView -\u003e new RecentBookingCell());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    class RecentBookingCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                setGraphic(new Label("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                        String.format(\"%s. Person %s, Room Number %s, %s\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                                getIndex() + 1, booking.getPersonId(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                                booking.getRoomId(), booking.getStartDate().toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 83,
      "Hazel1603": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private BookingListPanel bookingListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private HomePagePanel homePagePanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private StackPane mainDisplayPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        homePagePanel \u003d new HomePagePanel(logic.getBookingList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        mainDisplayPlaceholder.getChildren().add(homePagePanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPersonBookFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public BookingListPanel getBookingListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return bookingListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            mainDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            if (commandResult.isShowPersonList()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                logger.info(\"Displaying person list in UI\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                mainDisplayPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            } else if (commandResult.isShowBookingList()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                logger.info(\"Displaying booking list in UI\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                mainDisplayPlaceholder.getChildren().add(bookingListPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                mainDisplayPlaceholder.getChildren().add(homePagePanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 21,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PersonBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        name.setText(String.format(\"(ID: %s) %s\", person.getId().toString(), person.getName().fullName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 1,
      "-": 71,
      "zeling595": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        saveLocationStatus.setText(\"./data\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/hotel_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/ConciergeTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/BookingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$first\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"archivedTag\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cLabel fx:id\u003d\"personId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$pid\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cLabel fx:id\u003d\"roomId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rid\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cLabel fx:id\u003d\"period\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$period\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 25,
      "zeling595": 8
    }
  },
  {
    "path": "src/main/resources/view/BookingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  \u003cListView fx:id\u003d\"bookingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 8
    }
  },
  {
    "path": "src/main/resources/view/ConciergeTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    background-color: #272A50; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-base: #272A50;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-control-inner-background: #272A50;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #272A50;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #383b61;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #262940;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     -fx-border-color: derive(#272A50, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: derive(#272A50, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: derive(#272A50, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #272A50;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "  -fx-text-fill: #272A50;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #272A50;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #272A50;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #272A50;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: derive(#272A50, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent #272A50 transparent #272A50;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-color: #272A50 #272A50 #ffffff #272A50;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent, #272A50, transparent, #272A50;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#archivedTag .label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #585858;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#homePage .label {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#roomsAvailableGroup {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #22274B;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 12;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#roomsAvailableTitle.label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: \"#50C878\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 4 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#roomServicesGroup {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #22274B;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 12;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#roomServicesTitle.label {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: \"#50C878\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 4 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#recentBookingsGroup {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: #22274B;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 12;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#recentBookingsTitle.label {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-text-fill: \"#50C878\";"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 0 0 4 0;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#recentBookingsView.list-view {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "#recentBookingsView .list-cell {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-padding: 1 0 1 0;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 418
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    -fx-background: #272A50;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HomePagePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003cVBox fx:id\u003d\"homePage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cVBox fx:id\u003d\"roomsAvailableGroup\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomsAvailableTitle\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"singleRoomsText\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"doubleRoomsText\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"suiteRoomsText\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cRegion minHeight\u003d\"12\" maxHeight\u003d\"12\" prefHeight\u003d\"12\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cVBox fx:id\u003d\"roomServicesGroup\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomServicesTitle\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"wifiService\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"diningService\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"massageService\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cRegion minHeight\u003d\"12\" maxHeight\u003d\"12\" prefHeight\u003d\"12\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cVBox maxHeight\u003d\"121\" minHeight\u003d\"121\" prefHeight\u003d\"121\" fx:id\u003d\"recentBookingsGroup\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cLabel fx:id\u003d\"recentBookingsTitle\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cListView fx:id\u003d\"recentBookingsView\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "         title\u003d\"ConciergeBook\" minWidth\u003d\"650\" minHeight\u003d\"680\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \u003cImage url\u003d\"@/images/hotel_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cURL value\u003d\"@ConciergeTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                   minHeight\u003d\"130\" prefHeight\u003d\"130\" maxHeight\u003d\"130\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        \u003cVBox fx:id\u003d\"mainDisplay\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 6,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "zeling595": 8
    }
  },
  {
    "path": "src/test/data/JsonBookingBookStorageTest/invalidAndValidBookingBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"id\" : 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"endDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"id\" : 3,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"roomId\" : 1000,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"personId\" : 3,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"endDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 18
    }
  },
  {
    "path": "src/test/data/JsonBookingBookStorageTest/invalidBookingBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 1000,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 10
    }
  },
  {
    "path": "src/test/data/JsonPersonBookStorageTest/invalidAndValidPersonPersonBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 2,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/data/JsonPersonBookStorageTest/invalidPersonPersonBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookingBookTest/duplicateBookingBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-11-26\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 3,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-11-26\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookingBookTest/duplicateInactiveBookingBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"id\" : 11,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"roomId\" : 2103,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"personId\" : 23,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"startDate\" : \"2020-10-05\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"endDate\" : \"2020-10-10\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"id\" : 12,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"roomId\" : 2103,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"personId\" : 23,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"startDate\" : \"2020-10-05\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"endDate\" : \"2020-10-10\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookingBookTest/invalidBookingBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-12-25\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-11-26\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 3,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 1000,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 3,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-11-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-11-26\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookingBookTest/typicalBookingsBookingBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2103,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-25\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 2,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 2,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-20\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-25\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 3,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2105,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 3,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-23\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-26\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 4,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2115,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 4,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-23\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-26\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } , {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 5,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2104,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 5,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-26\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-27\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } , {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"id\" : 6,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"roomId\" : 2103,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"personId\" : 1,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"startDate\" : \"2020-10-26\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"endDate\" : \"2020-10-27\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    \"isActive\" : false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 45
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonBookTest/duplicatePersonPersonBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonBookTest/invalidPersonPersonBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonBookTest/typicalPersonsPersonBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  \"_comment\": \"PersonBook save file which contains the same Person values as in TypicalPersons#getTypicalPersonBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 3,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 4,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 5,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 6,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    \"id\": 7,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 7,
      "-": 45
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  \"personBookFilePath\" : \"personbook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "  \"personBookFilePath\" : \"personbook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonBookingBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonPersonBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.storage.JsonRoomServiceBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonPersonBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonPersonBookStorage(temporaryFolder.resolve(\"personBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new JsonBookingBookStorage(temporaryFolder.resolve(\"bookingBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonRoomServiceBookStorage roomServiceBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                new JsonRoomServiceBookStorage(temporaryFolder.resolve(\"roomServiceBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, bookingBookStorage,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                userPrefsStorage, roomServiceBookStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getPersonBook_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(logic.getPersonBook(), model.getPersonBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getPersonBookFilePath_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(logic.getPersonBookFilePath(), model.getPersonBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String deleteCommand \u003d \"deletePerson pid/9\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Setup LogicManager with JsonPersonBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonPersonBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonPersonBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPersonBook.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new JsonBookingBookStorage(temporaryFolder.resolve(\"bookingBook.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonRoomServiceBookStorage roomServiceBookStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                new JsonRoomServiceBookStorage(temporaryFolder.resolve(\"ioExceptionRoomService.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, bookingBookStorage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                userPrefsStorage, roomServiceBookStorage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void getFilteredBookingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookingList().remove(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomBook(), model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static class JsonPersonBookIoExceptionThrowingStub extends JsonPersonBookStorage {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        private JsonPersonBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void savePersonBook(ReadOnlyPersonBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 17,
      "shermz-lim": 17,
      "-": 145,
      "iamgenechua": 9,
      "zeling595": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_ID_HIGH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOUBLEROOM_ID1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOUBLEROOM_ID2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_GENE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_SINGLE_HARRY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_GENE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_SINGLE_HARRY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_GENE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SINGLEROOM_ID1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SINGLEROOM_ID2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SINGLEROOM_ID3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_GENE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SINGLE_HARRY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUITEROOM_ID1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUITEROOM_ID2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUITEROOM_ID3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GENE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.SINGLE_HARRY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for CheckInCommand."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class AddBookingCommandTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void constructor_nullStartDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE, VALID_ROOM_ID_GENE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                null, VALID_END_DATE_GENE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void constructor_nullEndDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE, VALID_ROOM_ID_GENE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_GENE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_ROOM_ID_GENE, VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_GENE, VALID_END_DATE_GENE, true, testBookingId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_GENE, VALID_ROOM_ID_GENE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_GENE, VALID_END_DATE_GENE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_singleRoomSuccessOne() throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SINGLEROOM_ID1, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SINGLEROOM_ID1,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_singleRoomSuccessTwo() throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SINGLEROOM_ID2, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SINGLEROOM_ID2,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_singleRoomSuccessThree() throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SINGLEROOM_ID3, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SINGLEROOM_ID3,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_doubleRoomSuccessOne() throws CommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_DOUBLEROOM_ID1, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_DOUBLEROOM_ID1,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_doubleRoomSuccessTwo() throws CommandException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_DOUBLEROOM_ID2, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_DOUBLEROOM_ID2,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_doubleRoomSuccessThree() throws CommandException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_DOUBLEROOM_ID2, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_DOUBLEROOM_ID2,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_suiteRoomSuccessOne() throws CommandException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SUITEROOM_ID1, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SUITEROOM_ID1,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_suiteRoomSuccessTwo() throws CommandException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SUITEROOM_ID2, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SUITEROOM_ID2,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_suiteRoomSuccessThree() throws CommandException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(SINGLE_HARRY);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // stub"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // when i create a new booking, my booking ID++"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // so when i assertEquals, i fail because my addBookingCommand will create a booking with the incremented ID"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_SUITEROOM_ID3, VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY, true, testBookingId);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY, VALID_SUITEROOM_ID3,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_invalidRoomIdOne_throwsCommandException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                INVALID_ROOM_ID, VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY).execute(model));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_invalidRoomIdTwo_throwsCommandException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_SINGLE_HARRY,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                INVALID_ROOM_ID_HIGH, VALID_START_DATE_SINGLE_HARRY, VALID_END_DATE_SINGLE_HARRY).execute(model));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_thirtyOneNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // start of invalid boundary value"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(31);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate).execute(model));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_thirtyTwoNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // start of invalid boundary value"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(32);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate).execute(model));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_thirtyThreeNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // second element on invalid boundary value"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(33);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate).execute(model));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_oneHundredNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // far beyond start of invalid boundary value"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(100);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate).execute(model));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_twentyNineNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // 2nd last valid boundary value"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(29);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_ROOM_ID_GENE, VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_GENE, endDate, true, testBookingId);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_thirtyNights_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addPerson(GENE);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int testBookingId \u003d 7;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // 2nd last valid boundary value"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d VALID_START_DATE_GENE.plusDays(30);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d new Booking(VALID_ROOM_ID_GENE, VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_GENE, endDate, true, testBookingId);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand command \u003d new AddBookingCommand(VALID_PERSON_ID_GENE,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_GENE, VALID_START_DATE_GENE, endDate);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final AddBookingCommand standardCommand \u003d new AddBookingCommand(VALID_PERSON_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand commandWithSameValues \u003d new AddBookingCommand(VALID_PERSON_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different PERSON Id -\u003e return false"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new AddBookingCommand(VALID_PERSON_ID_BOB, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different Room Id -\u003e return false"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new AddBookingCommand(VALID_PERSON_ID_AMY, VALID_ROOM_ID_BOB,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different start date -\u003e return false"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new AddBookingCommand(VALID_PERSON_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_BOB, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different end date -\u003e return false"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new AddBookingCommand(VALID_PERSON_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_BOB)));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "shermz-lim": 2,
      "iamgenechua": 338,
      "zeling595": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withId(0).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Person personInList \u003d model.getPersonBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4,
      "shermz-lim": 5,
      "Hazel1603": 1,
      "-": 40,
      "zeling595": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void setPersonBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void setBookingBookFilePath(Path bookingBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void setPersonBook(ReadOnlyPersonBook newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public Person getPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void addRoom(Room r) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public ObservableList\u003cInteger\u003e getAvailableRooms(ObservableList\u003cInteger\u003e unavailableRooms) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public String displayRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public String displaySingleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public String displayDoubleRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public String displaySuiteRooms(ObservableList\u003cInteger\u003e rooms) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public boolean hasRoom(int roomId) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public Room getRoom(Integer roomId) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public ReadOnlyRoomBook getRoomBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void addBooking(Booking b) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public ObservableList\u003cInteger\u003e getUnavailableRooms(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void setBookingBook(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void deleteBooking(Booking target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public void deleteBookingByPersonId(Integer personId) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public boolean hasBookingWithId(Integer roomId) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public Booking getBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public ReadOnlyBookingBook getBookingBook() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setBookingInactive(int roomId) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        public void setBookingActive(int bookingId) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomServiceBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public void addRoomService(RoomService rs) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public ObservableList\u003cRoomService\u003e getRoomServicesForBooking(Integer bookingId) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public void setRoomServiceBook(ReadOnlyRoomServiceBook roomServiceBook) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public ReadOnlyRoomServiceBook getRoomServiceBook() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return new PersonBook();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 36,
      "shermz-lim": 43,
      "Hazel1603": 64,
      "-": 187,
      "iamgenechua": 5,
      "zeling595": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.testutil.TypicalBookings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ArchiveBookingCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class ArchiveBookingCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalRoomBook(), getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addBooking(TypicalBookings.ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand command \u003d new ArchiveBookingCommand(CommandTestUtil.VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String result \u003d command.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Booking booking \u003d model.getBookingWithId(CommandTestUtil.VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(String.format(ArchiveBookingCommand.MESSAGE_SUCCESS, booking), result);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void execute_bookingMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand command \u003d new ArchiveBookingCommand(CommandTestUtil.VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void execute_bookingInactive_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand command \u003d new ArchiveBookingCommand(CommandTestUtil.VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertCommandFailure(command, model, ArchiveBookingCommand.MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        int roomId \u003d 2103;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final ArchiveBookingCommand standardCommand \u003d new ArchiveBookingCommand(roomId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand commandWithSameValues \u003d new ArchiveBookingCommand(roomId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different Room Id -\u003e return false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(new ArchiveBookingCommand(roomId + 1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "shermz-lim": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_emptyPersonBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_nonEmptyPersonBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTypicalRoomBook(), getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomBook(), model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.setPersonBook(new PersonBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedModel.setBookingBook(new BookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedModel.setRoomServiceBook(new RoomServiceBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 6,
      "shermz-lim": 3,
      "Hazel1603": 4,
      "-": 22,
      "zeling595": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different showPersonList value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different showBookingList value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.BookingMatchesBookingIdPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.EditBookingDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer VALID_ID_AMY \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer VALID_ID_BOB \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_NAME_GENE \u003d \"Gene Xiao\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_NAME_SINGLE_HARRY \u003d \"Harry SingleLover\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_NAME_DOUBLE_HARRY \u003d \"Harry DoubleLover\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_NAME_SUITE_HARRY \u003d \"Harry SuiteLover\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_PHONE_GENE \u003d \"420420420\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_PHONE_SINGLE_HARRY \u003d \"111222333\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_PHONE_DOUBLE_HARRY \u003d \"222111333\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_PHONE_SUITE_HARRY \u003d \"333111222\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_EMAIL_GENE \u003d \"gene@nuscomputing.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_EMAIL_SINGLE_HARRY \u003d \"singleharry@nus.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_EMAIL_DOUBLE_HARRY \u003d \"doubleharry@nus.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_EMAIL_SUITE_HARRY \u003d \"suiteharry@nus.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_ADDRESS_GENE \u003d \"Streety McStreetFace\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_ADDRESS_SINGLE_HARRY \u003d \"Block 111, Single Street\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_ADDRESS_DOUBLE_HARRY \u003d \"Block 222, Double Street\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String VALID_ADDRESS_SUITE_HARRY \u003d \"Block 333, Suite Street\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Check In Values"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_GENE \u003d 69;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_AMY \u003d 23;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_BOB \u003d 12;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_CHLOE \u003d 6;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_DAN \u003d 4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int INVALID_PERSON_ID \u003d 1000; // use for non-existing personId test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_SINGLE_HARRY \u003d 420;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_DOUBLE_HARRY \u003d 421;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_SUITE_HARRY \u003d 422;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SINGLEROOM_ID1 \u003d 2104;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SINGLEROOM_ID2 \u003d 2110;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SINGLEROOM_ID3 \u003d 2112;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_DOUBLEROOM_ID1 \u003d 2113;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_DOUBLEROOM_ID2 \u003d 2120;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_DOUBLEROOM_ID3 \u003d 2122;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SUITEROOM_ID1 \u003d 2123;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SUITEROOM_ID2 \u003d 2129;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_SUITEROOM_ID3 \u003d 2132;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_ROOM_ID_AMY \u003d 2103;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_ROOM_ID_BOB \u003d 2104;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_ROOM_ID_GENE \u003d 2106;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int CONFLICT_AMY_ROOM_ID_CHLOE \u003d 2103;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_ROOM_ID_DAN \u003d 2104;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int INVALID_ROOM_ID \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int INVALID_ROOM_ID_HIGH \u003d 9999;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_AMY \u003d LocalDate.parse(\"2020-10-05\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_AMY \u003d LocalDate.parse(\"2020-10-10\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_BOB \u003d LocalDate.parse(\"2020-12-12\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_BOB \u003d LocalDate.parse(\"2020-12-13\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate CONFLICT_AMY_START_DATE_CHLOE \u003d LocalDate.parse(\"2020-10-06\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate CONFLICT_AMY_END_DATE_CHLOE \u003d LocalDate.parse(\"2020-10-09\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_DAN \u003d LocalDate.parse(\"2020-11-11\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_DAN \u003d LocalDate.parse(\"2020-11-21\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final LocalDate VALID_START_DATE_GENE \u003d LocalDate.parse(\"2020-01-01\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final LocalDate VALID_END_DATE_GENE \u003d LocalDate.parse(\"2020-01-30\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_SINGLE_HARRY \u003d LocalDate.parse(\"2020-03-25\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final LocalDate VALID_END_DATE_SINGLE_HARRY \u003d LocalDate.parse(\"2020-04-12\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_DOUBLE_HARRY \u003d LocalDate.parse(\"2020-06-25\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_DOUBLE_HARRY \u003d LocalDate.parse(\"2020-07-25\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_SUITE_HARRY \u003d LocalDate.parse(\"2020-08-25\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_SUITE_HARRY \u003d LocalDate.parse(\"2020-09-25\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Booking Values"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final int VALID_BOOKING_ID_AMY \u003d 11;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final int VALID_BOOKING_ID_BOB \u003d 12;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int CONFLICT_AMY_VALID_BOOKING_ID_CHLOE \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final int VALID_BOOKING_ID_DAN \u003d 14;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final int BOOKING_DURATION_AMY \u003d 5;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_BOOKING_ID_SINGLE_HARRY \u003d 105;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_BOOKING_ID_DOUBLE_HARRY \u003d 205;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_BOOKING_ID_SUITE_HARRY \u003d 305;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Check In Descriptions"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String PERSON_ID_DESC_AMY \u003d \" \" + PREFIX_PERSON_ID + VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String PERSON_ID_DESC_BOB \u003d \" \" + PREFIX_PERSON_ID + VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String ROOM_ID_DESC_AMY \u003d \" \" + PREFIX_ROOM_ID + VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String ROOM_ID_DESC_BOB \u003d \" \" + PREFIX_ROOM_ID + VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String START_DATE_DESC_AMY \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String START_DATE_DESC_BOB \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String END_DATE_DESC_AMY \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String END_DATE_DESC_BOB \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String BOOKING_ID_DESC_BOB \u003d \" \" + PREFIX_BOOKING_ID + VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Invalid Check In Descriptions"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String INVALID_PERSON_ID_DESC \u003d \" \" + PREFIX_PERSON_ID + \"a12\"; // letter not allowed in PID"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String INVALID_ROOM_ID_DESC \u003d \" \" + PREFIX_ROOM_ID + \"88\"; // roomId supposed to be four digits"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String INVALID_ROOM_ID_DESC2 \u003d \" \" + PREFIX_ROOM_ID + \"419\u0026\"; // \u0027\u0026\u0027 not allowed in roomIds"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + \"2020 02 02\"; // 2020-02-02"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + \"2020 06 02\"; // 2020-02-02"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Get Bill Descriptions"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String BOOKING_ID_DESC_AMY \u003d \" \" + PREFIX_BOOKING_ID + VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final EditBookingCommand.EditBookingDescriptor DESC_BOOKING_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final EditBookingCommand.EditBookingDescriptor DESC_BOOKING_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_PRICE \u003d 50;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DESC_BOOKING_AMY \u003d new EditBookingDescriptorBuilder().withRoomId(VALID_ROOM_ID_AMY)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY).withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DESC_BOOKING_BOB \u003d new EditBookingDescriptorBuilder().withRoomId(VALID_ROOM_ID_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB).withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook expectedAddressBook \u003d new PersonBook(actualModel.getPersonBook());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getPersonBook());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * - the booking book, filtered booking list and selected booking in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static void assertBookingBookCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook expectedBookingBook \u003d new BookingBook(actualModel.getBookingBook());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookingList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedBookingBook, actualModel.getBookingBook());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookingList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static void showPersonWithId(Model model, int personId) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assert personId \u003e 0;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person person \u003d model.getPersonWithId(personId);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the booking at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code model}\u0027s booking book."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static void showBookingAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookingList().size());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d model.getFilteredBookingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final int bookingId \u003d booking.getId();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        model.updateFilteredBookingList(new BookingMatchesBookingIdPredicate(bookingId));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(1, model.getFilteredBookingList().size());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the booking with given {@code bookingId} in the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * {@code model}\u0027s booking book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static void showBookingWithId(Model model, Integer bookingId) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(bookingId \u003c model.getFilteredBookingList().size());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model.updateFilteredBookingList(new BookingMatchesBookingIdPredicate(bookingId));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(1, model.getFilteredBookingList().size());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 19,
      "shermz-lim": 6,
      "Hazel1603": 11,
      "-": 120,
      "iamgenechua": 75,
      "zeling595": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookingWithId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * {@code DeleteBookingCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class DeleteBookingCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_validBookingId_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking bookingToDelete \u003d model.getBookingWithId(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookingCommand.MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(deleteBookingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_invalidBookingId_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer outOfBoundBookingId \u003d model.getBookingBook().getBookingList().size() + 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(outOfBoundBookingId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandFailure(deleteBookingCommand, model, Messages.MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        showBookingWithId(model, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer outOfBoundId \u003d model.getBookingBook().getBookingList().size() + 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(outOfBoundId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandFailure(deleteBookingCommand, model, Messages.MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteFirstCommand \u003d new DeleteBookingCommand(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteSecondCommand \u003d new DeleteBookingCommand(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        DeleteBookingCommand deleteFirstCommandCopy \u003d new DeleteBookingCommand(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 81,
      "shermz-lim": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSON_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonWithId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.VALID_PERSON_ID_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_validPersonIdUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person personToDelete \u003d model.getPersonWithId(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.deleteBookingByPersonId(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_nonExistPersonIdUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_nonExistPersonIdFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        showPersonWithId(model, VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(VALID_PERSON_ID_AMY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(VALID_PERSON_ID_BOB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(VALID_PERSON_ID_AMY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4,
      "shermz-lim": 3,
      "Hazel1603": 1,
      "-": 56,
      "zeling595": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXCEED_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOKING_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOKING_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertBookingBookCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_ID_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.EDITED_ENDDATE_1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.EDITED_ROOM_ID_1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.EXCEED_1_MONTH_END_DATE_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.INVALID_BOOKING_ID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.START_DATE_AFTER_END_DATE_1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.EditBookingDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d new BookingBuilder().withRoomId(VALID_ROOM_ID_BOB).withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder(editedBooking).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookingCommand.MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomServiceBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedModel.setBooking(model.getFilteredBookingList().get(0), editedBooking);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandSuccess(editBookingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking firstBooking \u003d model.getBookingWithId(BOOKING_ID_1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBuilder bookingInList \u003d new BookingBuilder(firstBooking);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d bookingInList.withRoomId(EDITED_ROOM_ID_1).withEndDate(EDITED_ENDDATE_1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(EDITED_ROOM_ID_1).withEndDate(EDITED_ENDDATE_1).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookingCommand.MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedModel.setBooking(firstBooking, editedBooking);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandSuccess(editBookingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking bookingInFilteredList \u003d model.getBookingWithId(BOOKING_ID_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d new BookingBuilder(bookingInFilteredList).withRoomId(VALID_ROOM_ID_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB).withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new EditBookingDescriptorBuilder().withRoomId(VALID_ROOM_ID_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        .withStartDate(VALID_START_DATE_BOB).withEndDate(VALID_END_DATE_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookingCommand.MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new BookingBook(model.getBookingBook()), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedModel.setBooking(model.getFilteredBookingList().get(0), editedBooking);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandSuccess(editBookingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_invalidBookingIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(INVALID_BOOKING_ID, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(editBookingCommand, model, MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_startDateAfterEndDate_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(START_DATE_AFTER_END_DATE_1).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(editBookingCommand, model, MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_invalidRoomId_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(1000).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertBookingBookCommandFailure(editBookingCommand, model, MESSAGE_ROOM_ID_MISSING);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void execute_exceedStayDuration_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withRoomId(2107).withEndDate(EXCEED_1_MONTH_END_DATE_1).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        EditBookingCommand editBookingCommand \u003d new EditBookingCommand(BOOKING_ID_1, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertBookingBookCommandFailure(editBookingCommand, model, MESSAGE_EXCEED_DURATION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final EditBookingCommand standardCommand \u003d new EditBookingCommand(BOOKING_ID_1, DESC_BOOKING_AMY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new EditBookingCommand.EditBookingDescriptor(DESC_BOOKING_AMY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand commandWithSameValues \u003d new EditBookingCommand(BOOKING_ID_1, copyDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookingCommand(INVALID_BOOKING_ID, DESC_BOOKING_AMY)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookingCommand(BOOKING_ID_1, DESC_BOOKING_BOB)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 6,
      "shermz-lim": 5,
      "Hazel1603": 19,
      "zeling595": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookingDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.EditBookingDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new EditBookingCommand.EditBookingDescriptor(DESC_BOOKING_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(DESC_BOOKING_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(DESC_BOOKING_AMY.equals(DESC_BOOKING_AMY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(DESC_BOOKING_BOB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different room id -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new EditBookingDescriptorBuilder(DESC_BOOKING_AMY).withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        editedAmy \u003d new EditBookingDescriptorBuilder(DESC_BOOKING_AMY).withStartDate(VALID_START_DATE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        editedAmy \u003d new EditBookingDescriptorBuilder(DESC_BOOKING_AMY).withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(DESC_BOOKING_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSON_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonWithId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.VALID_PERSON_ID_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(VALID_PERSON_ID_ALICE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomServiceBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person person \u003d model.getPersonWithId(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(VALID_PERSON_ID_ALICE, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomServiceBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedModel.setPerson(person, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(VALID_PERSON_ID_ALICE, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person editedPerson \u003d model.getPersonWithId(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomServiceBook());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        showPersonWithId(model, VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Person personInFilteredList \u003d model.getPersonWithId(VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(VALID_PERSON_ID_ALICE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new PersonBook(model.getPersonBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getRoomServiceBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_nonExistPersonIdUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INVALID_PERSON_ID, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_nonExistPersonIdFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        showPersonWithId(model, VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INVALID_PERSON_ID,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_PERSON_ID_MISSING);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, DESC_AMY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(VALID_PERSON_ID_AMY, copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(VALID_PERSON_ID_BOB, DESC_AMY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(VALID_PERSON_ID_BOB, DESC_BOB)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 7,
      "shermz-lim": 6,
      "Hazel1603": 5,
      "-": 110,
      "zeling595": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zeling595": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for FilterRoomCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class FilterRoomCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void execute_success_single() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Single Rooms"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType1 \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand command1 \u003d new FilterRoomCommand(startDate, endDate, roomType1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedRoomId1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2103);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2104);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2105);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2106);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2107);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2108);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId1.add(2110);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId1.add(2112);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput1 \u003d model.displaySingleRooms(FXCollections.observableArrayList(expectedRoomId1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(String.format(FilterRoomCommand.MESSAGE_SUCCESS, expectedOutput1),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                command1.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void execute_success_double() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Double Rooms"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType2 \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand command2 \u003d new FilterRoomCommand(startDate, endDate, roomType2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedRoomId2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId2.add(2113);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId2.add(2114);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId2.add(2115);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId2.add(2116);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId2.add(2117);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId2.add(2120);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId2.add(2122);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput2 \u003d model.displayDoubleRooms(FXCollections.observableArrayList(expectedRoomId2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(String.format(FilterRoomCommand.MESSAGE_SUCCESS, expectedOutput2),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                command2.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void execute_success_suite() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Suite Rooms"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType1 \u003d 3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand command3 \u003d new FilterRoomCommand(startDate, endDate, roomType1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedRoomId1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2123);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2124);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2125);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2126);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId1.add(2127);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId1.add(2129);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId1.add(2132);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput3 \u003d model.displaySuiteRooms(FXCollections.observableArrayList(expectedRoomId1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(String.format(FilterRoomCommand.MESSAGE_SUCCESS, expectedOutput3),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                command3.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void execute_success_all() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // All room types"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand command4 \u003d new FilterRoomCommand(startDate, endDate, roomType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedRoomId4 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2103);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2104);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2105);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2106);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2107);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2108);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2110);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2112);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2113);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2114);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2115);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2116);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2117);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2120);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2122);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2123);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2124);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2125);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2126);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedRoomId4.add(2127);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2129);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        expectedRoomId4.add(2132);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput3 \u003d model.displayRooms(FXCollections.observableArrayList(expectedRoomId4));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(String.format(FilterRoomCommand.MESSAGE_SUCCESS, expectedOutput3),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                command4.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int roomType \u003d 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate wrongStart \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LocalDate wrongEnd \u003d LocalDate.of(2020, 10, 15);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int wrongType \u003d 2;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand command \u003d new FilterRoomCommand(startDate, endDate, roomType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand commandWithSameValues \u003d new FilterRoomCommand(startDate, endDate, roomType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(command.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(command.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different start Date -\u003e return false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(command.equals(new FilterRoomCommand(wrongStart, endDate, roomType)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different end Date -\u003e return false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(command.equals(new FilterRoomCommand(startDate, wrongEnd, roomType)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different roomType -\u003e return false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(command.equals(new FilterRoomCommand(startDate, endDate, wrongType)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "shermz-lim": 2,
      "Hazel1603": 150,
      "iamgenechua": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesEndDatePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesIsActivePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesPersonIdPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesRoomIdPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesStartDatePredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindBookingCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class FindBookingCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new BookingMatchesRoomIdPredicate(2103);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new BookingMatchesRoomIdPredicate(1236);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand findFirstBookingCommand \u003d new FindBookingCommand(Arrays.asList(firstPredicate),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(2103), Optional.empty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand findSecondBookingCommand \u003d new FindBookingCommand(Arrays.asList(secondPredicate),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(1236), Optional.of(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(findFirstBookingCommand.equals(findFirstBookingCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand findFirstCommandCopy \u003d new FindBookingCommand(Arrays.asList(firstPredicate),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(2103), Optional.empty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(findFirstBookingCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different optional roomIdvalue -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand findFirstCommandRoomIdModified \u003d new FindBookingCommand(Arrays.asList(firstPredicate),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(2102), Optional.empty());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(findFirstBookingCommand.equals(findFirstCommandRoomIdModified));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different optional personId value -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand findFirstCommandPersonIdModified \u003d new FindBookingCommand(Arrays.asList(firstPredicate),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(2103), Optional.of(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(findFirstBookingCommand.equals(findFirstCommandPersonIdModified));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(findFirstBookingCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(findFirstBookingCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(findFirstBookingCommand.equals(findSecondBookingCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneRoomIdPredicate_multipleBookingFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d prepareRoomIdPredicate(\"rid/2103\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.of(2103),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesRoomIdPredicate(2103));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Arrays.asList(BOOKING_1, BOOKING_6), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneInvalidRoomIdPredicate_throwCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d prepareRoomIdPredicate(\"rid/1000\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.of(1000),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesRoomIdPredicate(1000));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandFailure(command, model, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Arrays.asList(BOOKING_1, BOOKING_2, BOOKING_3, BOOKING_4, BOOKING_5, BOOKING_6),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                model.getFilteredBookingList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneInvalidPersonIdPredicate_throwCommandException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PERSON_ID_MISSING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d prepareRoomIdPredicate(\"pid/1000\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.empty(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(1000));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesPersonIdPredicate(1000));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandFailure(command, model, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Arrays.asList(BOOKING_1, BOOKING_2, BOOKING_3, BOOKING_4, BOOKING_5, BOOKING_6),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                model.getFilteredBookingList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneRoomIdPredicate_noBookingFound() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d prepareRoomIdPredicate(\"rid/2107\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.of(2107),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesRoomIdPredicate(2107));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneIsActivePredicate_multipleBookingFound() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesIsActivePredicate predicate \u003d prepareIsActivePredicate(\"ac/false\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.empty(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesIsActivePredicate(false));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Arrays.asList(BOOKING_1, BOOKING_2, BOOKING_3, BOOKING_4, BOOKING_5, BOOKING_6),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                model.getFilteredBookingList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_oneIsActivePredicate_noBookingFound() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesIsActivePredicate predicate \u003d prepareIsActivePredicate(\"ac/true\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(predicate), Optional.empty(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(new BookingMatchesIsActivePredicate(true));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_multiplePredicates_oneBookingFound() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate roomIdPredicate \u003d prepareRoomIdPredicate(\"rid/2103\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate startTimePredicate \u003d prepareStartTimePredicate(\"sd/2020-10-20\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(roomIdPredicate, startTimePredicate),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.of(2103), Optional.empty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        List\u003cPredicate\u003cBooking\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        predicates.add(roomIdPredicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        predicates.add(startTimePredicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Predicate\u003cBooking\u003e predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Arrays.asList(BOOKING_1), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void execute_multiplePredicates_noBookingFound() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate roomIdPredicate \u003d prepareRoomIdPredicate(\"rid/2103\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate endTimePredicate \u003d prepareEndTimePredicate(\"ed/2020-10-20\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand command \u003d new FindBookingCommand(Arrays.asList(roomIdPredicate, endTimePredicate),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        List\u003cPredicate\u003cBooking\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        predicates.add(roomIdPredicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        predicates.add(endTimePredicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Predicate\u003cBooking\u003e predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses {@code userInput} into a {@code BookingMatchesRoomIdPredicate}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingMatchesRoomIdPredicate prepareRoomIdPredicate(String userInput) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new BookingMatchesRoomIdPredicate(Integer.valueOf(userInput.substring(4)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses {@code userInput} into a {@code BookingMatchesStartDatePredicate}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingMatchesStartDatePredicate prepareStartTimePredicate(String userInput) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new BookingMatchesStartDatePredicate(LocalDate.parse(userInput.substring(3),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses {@code userInput} into a {@code BookingMatchesEndDatePredicate}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingMatchesEndDatePredicate prepareEndTimePredicate(String userInput) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new BookingMatchesEndDatePredicate(LocalDate.parse(userInput.substring(3),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Parses {@code userInput} into a {@code prepareIsActivePredicate}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingMatchesIsActivePredicate prepareIsActivePredicate(String userInput) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new BookingMatchesIsActivePredicate(Boolean.parseBoolean(userInput.substring(3)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 213,
      "shermz-lim": 3,
      "Hazel1603": 1,
      "zeling595": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "shermz-lim": 5,
      "Hazel1603": 1,
      "-": 80,
      "zeling595": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GetBillCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.ACTIVE_BOOKING_DAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.INVALID_BOOKING_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for GetBillCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class GetBillCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_success_withRoomService() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addBooking(ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expected \u003d \"Number of nights stayed: 10\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Price per night: $70\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Room services ordered:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Massaging service: $70\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                + \"Wifi service: $15\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Dining in service: $50\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                + \"Nett bill for booking id 14 \u003d $835\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand command \u003d new GetBillCommand(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(expected, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_success_withNoRoomService() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addBooking(BOOKING_BOB);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expected \u003d \"Number of nights stayed: 1\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Price per night: $70\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"No room services ordered\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + \"Nett bill for booking id 12 \u003d $70\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand command \u003d new GetBillCommand(VALID_BOOKING_ID_BOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(expected, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_invalid_booking() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertThrows(BookingNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            int bookingId \u003d ACTIVE_BOOKING_DAN.getId();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            Booking booking \u003d model.getBookingWithId(bookingId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void nonExistentBooking() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand command \u003d new GetBillCommand(INVALID_BOOKING_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final GetBillCommand standardCommand \u003d new GetBillCommand(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand commandWithSameValues \u003d new GetBillCommand(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different bookingId -\u003e return false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new GetBillCommand(VALID_BOOKING_ID_DAN + 1)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "shermz-lim": 5,
      "iamgenechua": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.HomeCommand.HOME_SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class HomeCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HOME_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertCommandSuccess(new HomeCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookingWithId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_ID_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class ListBookingCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        showBookingWithId(model, BOOKING_ID_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        expectedModel.getFilteredBookingList().size()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertCommandSuccess(new ListBookingCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "shermz-lim": 3,
      "zeling595": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonWithId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.VALID_PERSON_ID_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                model.getBookingBook(), model.getRoomServiceBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        showPersonWithId(model, VALID_PERSON_ID_ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "shermz-lim": 3,
      "Hazel1603": 1,
      "-": 33,
      "zeling595": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RoomServiceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.RoomServiceBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Integration test for RoomServiceCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class RoomServiceCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            getTypicalBookingBook(), new RoomServiceBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private int bookingId \u003d VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private RoomServiceType type \u003d RoomServiceType.WIFI;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private RoomServiceCommand roomServiceCommand \u003d new RoomServiceCommand(new RoomService(bookingId, type));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addBooking(ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceCommand.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(model.getRoomServicesForBooking(bookingId).size(), 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void execute_inactiveBooking_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addBooking(BOOKING_BOB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            new RoomServiceCommand(new RoomService(VALID_BOOKING_ID_BOB, type)).execute(model)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void execute_invalidBooking_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new RoomServiceCommand(new RoomService(12319, type)).execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(roomServiceCommand.equals(roomServiceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceCommand copy \u003d new RoomServiceCommand(new RoomService(bookingId, type));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(roomServiceCommand.equals(copy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(roomServiceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(roomServiceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different room service -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(roomServiceCommand.equals(new RoomService(100, type)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "shermz-lim": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnarchiveBookingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_MISSING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalRoomService.getTypicalRoomServiceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.testutil.TypicalBookings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for UnarchiveBookingCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class UnarchiveBookingCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            getTypicalRoomBook(), getTypicalBookingBook(), getTypicalRoomServiceBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addBooking(TypicalBookings.ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.setBookingInactive(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand command \u003d new UnarchiveBookingCommand(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String result \u003d command.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Booking booking \u003d model.getBookingWithId(VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(String.format(UnarchiveBookingCommand.MESSAGE_SUCCESS, booking), result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_bookingMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand command \u003d new UnarchiveBookingCommand(CommandTestUtil.VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute_bookingInactive_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        model.setBookingActive(VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand command \u003d new UnarchiveBookingCommand(CommandTestUtil.VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertCommandFailure(command, model, UnarchiveBookingCommand.MESSAGE_NOT_YET_ARCHIVED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int roomId \u003d 2103;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final UnarchiveBookingCommand standardCommand \u003d new UnarchiveBookingCommand(roomId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand commandWithSameValues \u003d new UnarchiveBookingCommand(roomId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different Room Id -\u003e return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new UnarchiveBookingCommand(roomId + 1)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_ID_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.AddBookingCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class AddBookingCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private AddBookingCommandParser parser \u003d new AddBookingCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final String nonEmptyPersonId \u003d \"420\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String nonEmptyRoomId \u003d \"2126\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String startDate \u003d \"2020-03-15\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String endDate \u003d \"2020-03-19\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_valuesSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_AMY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + ROOM_ID_DESC_AMY"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + START_DATE_DESC_AMY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.info(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        AddBookingCommand expectedCommand \u003d new AddBookingCommand(VALID_PERSON_ID_AMY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_datesOutOfOrder_failure() throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_AMY"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + ROOM_ID_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + START_DATE_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        logger.info(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_START_END_DATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, AddBookingCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // no personId"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, AddBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no roomId"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, AddBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        + PREFIX_PERSON_ID + nonEmptyPersonId + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no startDate"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, AddBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        + PREFIX_PERSON_ID + nonEmptyPersonId + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no endDate"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, AddBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        + PREFIX_PERSON_ID + nonEmptyPersonId + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 92,
      "zeling595": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_AMY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 9,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.GetBillCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer testId \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person person \u003d new PersonBuilder().withId(testId).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(testId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                DeleteCommand.COMMAND_WORD + PERSON_ID_DESC_AMY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(new DeleteCommand(VALID_PERSON_ID_AMY), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                + PERSON_ID_DESC_AMY + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(new EditCommand(VALID_PERSON_ID_AMY, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parseCommand_listBooking() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(parser.parseCommand(ListBookingCommand.COMMAND_WORD) instanceof ListBookingCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parseCommand_checkIn() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final int personId \u003d 123;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int roomId \u003d 2103;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final String startDate \u003d \"2020-06-22\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final String endDate \u003d \"2020-11-29\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        AddBookingCommand command \u003d (AddBookingCommand) parser.parseCommand(AddBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            + PREFIX_PERSON_ID + personId + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_ROOM_ID + roomId + \" \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_END_DATE + endDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(new AddBookingCommand(personId, roomId,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.parse(startDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.parse(endDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parseCommand_archiveBooking() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final int roomId \u003d 2103;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand command \u003d (ArchiveBookingCommand) parser.parseCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ArchiveBookingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_BOOKING_ID + roomId);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(new ArchiveBookingCommand(roomId), command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parseCommand_getBill() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int bookingId \u003d 40;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand command \u003d (GetBillCommand) parser.parseCommand(GetBillCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_BOOKING_ID + bookingId);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(new GetBillCommand(bookingId), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parseCommand_orderRoomService() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceCommand command \u003d (RoomServiceCommand) parser.parseCommand(RoomServiceCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                + \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + RoomServiceType.WIFI.getName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(new RoomServiceCommand(new RoomService(1, RoomServiceType.WIFI)), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 24,
      "-": 91,
      "iamgenechua": 29,
      "zeling595": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArchiveBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.ArchiveBookingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class ArchiveBookingCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private ArchiveBookingCommandParser parser \u003d new ArchiveBookingCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parse_valuesSpecified_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArchiveBookingCommand expectedCommand \u003d new ArchiveBookingCommand(VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parse_missingBookingIdField_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * outside of the DeleteBookingCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * same path through the DeleteBookingCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class DeleteBookingCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private DeleteBookingCommandParser parser \u003d new DeleteBookingCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" bid/1\", new DeleteBookingCommand(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void parse_validArgsWithWhitespaces_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" \\t bid/ 1 \\t\", new DeleteBookingCommand(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                DeleteBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, PERSON_ID_DESC_AMY, new DeleteCommand(VALID_PERSON_ID_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"pid/a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "zeling595": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_ROOM_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.EditBookingDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private EditBookingCommandParser parser \u003d new EditBookingCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"2020-02-02\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\", EditBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // negative booing id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"bid/-5\" + ROOM_ID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"bid/1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"bid/1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + INVALID_ROOM_ID_DESC2, MESSAGE_INVALID_ROOM_ID); // invalid room id"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + INVALID_START_DATE_DESC, MESSAGE_INVALID_DATE); // invalid start date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + INVALID_END_DATE_DESC, MESSAGE_INVALID_DATE); // invalid end date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // invalid room id followed by valid start date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + INVALID_ROOM_ID_DESC2 + START_DATE_DESC_AMY, MESSAGE_INVALID_ROOM_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // valid room id followed by invalid room id. The test case for invalid room id followed by valid room id"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + ROOM_ID_DESC_AMY + INVALID_ROOM_ID_DESC2, MESSAGE_INVALID_ROOM_ID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" bid/1\" + INVALID_ROOM_ID_DESC2 + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        + END_DATE_DESC_AMY, MESSAGE_INVALID_ROOM_ID);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY + ROOM_ID_DESC_AMY + END_DATE_DESC_AMY + START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY).withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY + ROOM_ID_DESC_AMY + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY).withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // room id"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY + ROOM_ID_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // start date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d BOOKING_ID_DESC_AMY + START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor \u003d new EditBookingDescriptorBuilder().withStartDate(VALID_START_DATE_AMY).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // end date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d BOOKING_ID_DESC_AMY + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor \u003d new EditBookingDescriptorBuilder().withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_BOB + ROOM_ID_DESC_BOB + START_DATE_DESC_BOB + END_DATE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                + ROOM_ID_DESC_AMY + START_DATE_DESC_AMY + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY).withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_BOB + INVALID_ROOM_ID_DESC2 + ROOM_ID_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand.EditBookingDescriptor descriptor \u003d new EditBookingDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditBookingCommand expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d BOOKING_ID_DESC_BOB + START_DATE_DESC_BOB + INVALID_ROOM_ID_DESC2 + END_DATE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                + ROOM_ID_DESC_BOB;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor \u003d new EditBookingDescriptorBuilder().withRoomId(VALID_ROOM_ID_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditBookingCommand(VALID_BOOKING_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, PERSON_ID_DESC_AMY, EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"pid/-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"pid/1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \"pid/1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertParseFailure(parser, \" pid/1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d PERSON_ID_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d PERSON_ID_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d PERSON_ID_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d PERSON_ID_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditCommand(VALID_PERSON_ID_AMY, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        userInput \u003d PERSON_ID_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        String userInput \u003d PERSON_ID_DESC_BOB + TAG_EMPTY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(VALID_PERSON_ID_BOB, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "zeling595": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.commands.FilterRoomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class FilterRoomCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private FilterRoomCommandParser parser \u003d new FilterRoomCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final String startDate \u003d \"2024-09-07\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final String endDate \u003d \"2024-09-11\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final String roomType \u003d \"1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void parse_valueSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String userInput1 \u003d START_DATE_DESC_AMY + END_DATE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + PREFIX_ROOM_TYPE + roomType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand expectedCommand1 \u003d new FilterRoomCommand(VALID_START_DATE_AMY, VALID_END_DATE_AMY, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertParseSuccess(parser, userInput1, expectedCommand1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String userInput2 \u003d START_DATE_DESC_AMY + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FilterRoomCommand expectedCommand2 \u003d new FilterRoomCommand(VALID_START_DATE_AMY, VALID_END_DATE_AMY, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertParseSuccess(parser, userInput2, expectedCommand2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterRoomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertParseFailure(parser, FilterRoomCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // no end cDate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertParseFailure(parser, FilterRoomCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    + PREFIX_START_DATE + startDate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    + PREFIX_ROOM_TYPE + \"3\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // no start Date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertParseFailure(parser, FilterRoomCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.logic.commands.FindBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesEndDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesIsActivePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesPersonIdPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesRoomIdPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.BookingMatchesStartDatePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class FindBookingCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private FindBookingCommandParser parser \u003d new FindBookingCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                FindBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseFailure(parser, \" dd  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                FindBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // one parameter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate1 \u003d new BookingMatchesRoomIdPredicate(2103);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand expectedFindBookingCommand \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new FindBookingCommand(Collections.singletonList(predicate1), Optional.of(2103), Optional.empty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" rid/2103\", expectedFindBookingCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // two parameters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesPersonIdPredicate predicate2 \u003d new BookingMatchesPersonIdPredicate(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand expectedFindBookingCommand2 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new FindBookingCommand(Arrays.asList(predicate1, predicate2), Optional.of(2103), Optional.of(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" \\n rid/2103 \\n \\t pid/1  \\t\", expectedFindBookingCommand2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different order of parameters should give the same result"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" \\n pid/1 \\t \\n rid/2103 \\t\", expectedFindBookingCommand2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // even more parameters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate predicate3 \u003d new BookingMatchesStartDatePredicate(LocalDate.of(2020, 10, 20));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate predicate4 \u003d new BookingMatchesEndDatePredicate(LocalDate.of(2020, 10, 25));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesIsActivePredicate predicate5 \u003d new BookingMatchesIsActivePredicate(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FindBookingCommand expectedFindBookingCommand3 \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new FindBookingCommand(Arrays.asList(predicate1, predicate2, predicate3, predicate4, predicate5),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        Optional.of(2103), Optional.of(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertParseSuccess(parser, \" \\n pid/1 \\t \\n rid/2103 \\t \\n sd/2020-10-20 \\t \\n ed/2020-10-25 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        + \"\\t \\n ac/false\\t\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                expectedFindBookingCommand3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GetBillCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.GetBillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class GetBillCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private GetBillCommandParser parser \u003d new GetBillCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_valuesSpecified_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        GetBillCommand expectedCommand \u003d new GetBillCommand(VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_prefixMissing_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetBillCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d \"12\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_missingBookingIdField_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetBillCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RoomServiceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_SERVICE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.RoomServiceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class RoomServiceCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private RoomServiceCommandParser parser \u003d new RoomServiceCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                RoomServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + RoomServiceType.WIFI.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.WIFI)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String input2 \u003d \" \" + PREFIX_ROOM_SERVICE_TYPE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                + RoomServiceType.DINING.getName() + \" \" + PREFIX_BOOKING_ID + \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                parser, input2, new RoomServiceCommand(new RoomService(1, RoomServiceType.DINING)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String input3 \u003d \" \" + PREFIX_ROOM_SERVICE_TYPE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                + RoomServiceType.MASSAGE.getName() + \" \" + PREFIX_BOOKING_ID + \"1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                parser, input3, new RoomServiceCommand(new RoomService(1, RoomServiceType.MASSAGE)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_validArgsDifferentCasesSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String wifiVariant1 \u003d \"wiFi\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String wifiVariant2 \u003d \"wIFi\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String wifiVariant3 \u003d \"WifI\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String diningVariant1 \u003d \"diNinG\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String diningVariant2 \u003d \"DINing\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String diningVariant3 \u003d \"dinINg\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String massageVariant1 \u003d \"mASSaGE\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String massageVariant2 \u003d \"mASsaGe\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String massageVariant3 \u003d \"MASSage\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + wifiVariant1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.WIFI)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + wifiVariant2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.WIFI)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + wifiVariant3;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.WIFI)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + diningVariant1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.DINING)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + diningVariant2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.DINING)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + diningVariant3;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.DINING)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + massageVariant1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.MASSAGE)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + massageVariant2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.MASSAGE)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + massageVariant3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                parser, input, new RoomServiceCommand(new RoomService(1, RoomServiceType.MASSAGE)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_invalidRoomServiceTypeOne_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String input \u003d \" \" + PREFIX_BOOKING_ID + \"1 \" + PREFIX_ROOM_SERVICE_TYPE + \"Escorts\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                RoomServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_invalidRoomServiceTwo_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String input \u003d \" \" + PREFIX_BOOKING_ID + \"2 \" + PREFIX_ROOM_SERVICE_TYPE + \"wife\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                RoomServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 41,
      "iamgenechua": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnarchiveBookingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.UnarchiveBookingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class UnarchiveBookingCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private UnarchiveBookingCommandParser parser \u003d new UnarchiveBookingCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_valuesSpecified_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d BOOKING_ID_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        UnarchiveBookingCommand expectedCommand \u003d new UnarchiveBookingCommand(VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_missingBookingIdField_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BookingBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final BookingBook bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(Collections.emptyList(), bookingBook.getBookingList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bookingBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_withValidReadOnlyBookingBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook newData \u003d getTypicalBookingBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(newData, bookingBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_withDuplicateBookings_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // Two booking with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withId(VALID_BOOKING_ID_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withPersonId(VALID_PERSON_ID_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e newBookings \u003d Arrays.asList(BOOKING_AMY, editedBookingAmy);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBookTest.BookingBookStub newData \u003d new BookingBookTest.BookingBookStub(newBookings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e bookingBook.resetData(newData));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bookingBook.hasBooking(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingNotInBookingBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(bookingBook.hasBooking(BOOKING_AMY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(bookingBook.hasBooking(BOOKING_AMY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingWithSameIdentityFieldsInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withId(VALID_BOOKING_ID_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withPersonId(VALID_PERSON_ID_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(bookingBook.hasBooking(editedBookingAmy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBookingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bookingBook.getBookingList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * A stub ReadOnlyPersonBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static class BookingBookStub implements ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        private final ObservableList\u003cBooking\u003e bookings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBookStub(Collection\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            this.bookings.setAll(bookings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return bookings;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "Hazel1603": 1,
      "zeling595": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.CONFLICT_AMY_BOOKING_CHLOE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOMID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.PersonBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.testutil.TypicalRoomService;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(new PersonBook(), new PersonBook(modelManager.getPersonBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(new BookingBook(), new BookingBook(modelManager.getBookingBook()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(new RoomServiceBook(), new RoomServiceBook(modelManager.getRoomServiceBook()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setBookingBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setBookingBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPersonBookFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBookingBookFilePath(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBookFilePath_validPath_setsPersonBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        modelManager.setPersonBookFilePath(path);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(path, modelManager.getPersonBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath_validPath_setsBookingBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        modelManager.setBookingBookFilePath(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(path, modelManager.getBookingBookFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPerson_personNotInPersonBook_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPerson_personInPersonBook_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void hasPersonWithId_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersonWithId(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPersonWithId_personNotInPersonBook_returnsFalse() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(modelManager.hasPersonWithId(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPersonWithId_personInPersonBook_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        modelManager.addPerson(AMY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(modelManager.hasPersonWithId(VALID_ID_AMY));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBooking_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBooking(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBooking_bookingNotInBookingBook_returnsFalse() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(modelManager.hasBooking(CONFLICT_AMY_BOOKING_CHLOE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBooking_bookingInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        modelManager.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(modelManager.hasBooking(BOOKING_AMY));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBookingWithId_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBookingWithId(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBookingWithId_bookingNotInBookingBook_returnsFalse() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(modelManager.hasBookingWithId(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasBookingWithId_bookingInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        modelManager.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(modelManager.hasBookingWithId(VALID_BOOKING_ID_AMY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void getFilteredBookingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookingList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_roomNotInRoomBook_returnsFalse() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(modelManager.hasRoom(2103));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_roomInRoomBook_returnsTrue() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        modelManager.addRoom(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(modelManager.hasRoom(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getRoom_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.getRoom(null));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getRoom_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        modelManager.addRoom(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(modelManager.getRoom(DEFAULT_ROOMID).equals(DEFAULT_ROOM));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void addRoomService_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addRoomService(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void addRoomService_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        modelManager.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(modelManager.getRoomServicesForBooking(VALID_BOOKING_ID_DAN).size(), 1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getRoomServicesForBooking_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.getRoomServicesForBooking(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getRoomServicesForBooking_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        modelManager.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(modelManager.getRoomServicesForBooking("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_BOOKING_ID_DAN).get(0).equals(TypicalRoomService.ROOM_SERVICE_DAN_DINING));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook personBook \u003d new PersonBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook differentAddressBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook roomBook \u003d new RoomBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook bookingBook \u003d new BookingBookBuilder().withBooking(BOOKING_AMY).withBooking(BOOKING_BOB).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook differentBookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceBook roomServiceBook \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        modelManager \u003d new ModelManager(personBook, userPrefs, roomBook, bookingBook, roomServiceBook);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                personBook, userPrefs, roomBook, bookingBook, roomServiceBook);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different personBook -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                userPrefs, roomBook, bookingBook, roomServiceBook)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different bookingBook -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                userPrefs, roomBook, differentBookingBook, roomServiceBook)));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                userPrefs, roomBook, bookingBook, roomServiceBook)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        differentUserPrefs.setPersonBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                differentUserPrefs, roomBook, bookingBook, roomServiceBook)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 67,
      "shermz-lim": 53,
      "Hazel1603": 25,
      "-": 116,
      "zeling595": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PersonBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class PersonBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final PersonBook personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(Collections.emptyList(), personBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void resetData_withValidReadOnlyPersonBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook newData \u003d getTypicalPersonBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(newData, personBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBookStub newData \u003d new PersonBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPerson_personNotInPersonBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(personBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPerson_personInPersonBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(personBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInPersonBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(personBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * A stub ReadOnlyPersonBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static class PersonBookStub implements ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 24,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RoomBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final RoomBook roomBook \u003d new RoomBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(Collections.emptyList(), roomBook.getRoomList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomBook.resetData(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData_withValidReadOnlyRoomBook_replacesData() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook newData \u003d getTypicalRoomBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.resetData(newData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(newData, roomBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData_withDuplicateRooms_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedSingle1 \u003d new RoomBuilder(DOUBLE_1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withPrice(SINGLE_1.getPrice())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withRoomID(SINGLE_1.getRoomID())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cRoom\u003e newRooms \u003d Arrays.asList(SINGLE_1, editedSingle1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBookTest.RoomBookStub newData \u003d new RoomBookTest.RoomBookStub(newRooms);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e roomBook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomBook.hasRoom(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_roomNotInRoomBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(roomBook.hasRoom(SINGLE_1.getRoomID()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_roomInRoomBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(SINGLE_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(roomBook.hasRoom(SINGLE_1.getRoomID()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasRoom_roomWithSameIdPrice_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(DOUBLE_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedDouble1 \u003d new RoomBuilder(SINGLE_1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withRoomID(DOUBLE_1.getRoomID())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withPrice(DOUBLE_1.getPrice())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(roomBook.hasRoom(editedDouble1.getRoomID()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getRoom_roomNotInRoomBook_returnsEmptyRoom() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room expectedOutput \u003d UniqueRoomList.EMPTY_ROOM;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room actualOutput \u003d roomBook.getRoom(2103);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getRoom_roomInRoomBook_returnsCorrectRoom() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room actualOutput \u003d roomBook.getRoom(DEFAULT_ROOMID);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(DEFAULT_ROOM, actualOutput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getAvailableRooms_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        UniqueRoomList internal \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internal.add(SINGLE_1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internal.add(DOUBLE_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internal.add(SUITE_1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e curr \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e expectedOutput \u003d internal.getComplementRooms(curr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(SINGLE_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(DOUBLE_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(SUITE_1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, roomBook.getAvailableRooms(curr));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getRoomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e roomBook.getRoomList().remove(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * A stub ReadOnlyPersonBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static class RoomBookStub implements ReadOnlyRoomBook {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        private final ObservableList\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBookStub(Collection\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            this.rooms.setAll(rooms);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return rooms;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "Hazel1603": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RoomServiceBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.testutil.TypicalRoomService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class RoomServiceBookTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final RoomServiceBook roomServiceBook \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(Collections.emptyList(), roomServiceBook.getRoomServiceList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void addRoomService_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomServiceBook.addRoomService(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void addRoomService_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(roomServiceBook.getRoomServiceList().size(), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getRoomServicesForBooking_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomServiceBook.getRoomServicesForBooking(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getRoomServicesForBooking_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(roomServiceBook.getRoomServicesForBooking("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_BOOKING_ID_DAN).get(0).equals(TypicalRoomService.ROOM_SERVICE_DAN_DINING));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(roomServiceBook.getRoomServicesForBooking(VALID_BOOKING_ID_AMY).size(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomServiceBook.resetData(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void resetData_withValidReadOnlyRoomServiceBook_replacesData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceBook newData \u003d TypicalRoomService.getTypicalRoomServiceBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(newData, roomServiceBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getRoomServiceList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_WIFI);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(TypicalRoomService.ROOM_SERVICE_DAN_MASSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(roomServiceBook.getRoomServiceList().size(), 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(roomServiceBook.equals(new RoomServiceBook()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(roomServiceBook.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(roomServiceBook.equals(6));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setPersonBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBookingBookFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingMatchesBookingIdPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesBookingIdPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer firstPredicateRoomId \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer secondPredicateRoomId \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesBookingIdPredicate firstPredicate \u003d new BookingMatchesBookingIdPredicate(firstPredicateRoomId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesBookingIdPredicate secondPredicate \u003d new BookingMatchesBookingIdPredicate(secondPredicateRoomId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesBookingIdPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new BookingMatchesBookingIdPredicate(firstPredicateRoomId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingMatchesBookingIdPredicate_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesBookingIdPredicate predicate \u003d new BookingMatchesBookingIdPredicate(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(predicate.test(new BookingBuilder().withId(1).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingDoesNotMatchBookingId_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesBookingIdPredicate predicate \u003d new BookingMatchesBookingIdPredicate(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(predicate.test(new BookingBuilder().withId(1).build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingMatchesEndDatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesEndDatePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstEndDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate secondEndDate \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate firstPredicate \u003d new BookingMatchesEndDatePredicate(firstEndDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate secondPredicate \u003d new BookingMatchesEndDatePredicate(secondEndDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate firstPredicateCopy \u003d new BookingMatchesEndDatePredicate(firstEndDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingMatchesStartDate_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstEndDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate predicate \u003d new BookingMatchesEndDatePredicate(firstEndDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(predicate.test(new BookingBuilder().withEndDate(firstEndDate).build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingDoesNotMatchStartDate_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstEndDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate secondEndDate \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesEndDatePredicate predicate \u003d new BookingMatchesEndDatePredicate(firstEndDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(predicate.test(new BookingBuilder().withEndDate(secondEndDate).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingMatchesRoomIdPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesRoomIdPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer firstPredicateRoomId \u003d 1235;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Integer secondPredicateRoomId \u003d 1236;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate firstPredicate \u003d new BookingMatchesRoomIdPredicate(firstPredicateRoomId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate secondPredicate \u003d new BookingMatchesRoomIdPredicate(secondPredicateRoomId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate firstPredicateCopy \u003d new BookingMatchesRoomIdPredicate(firstPredicateRoomId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingMatchesRoomId_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d new BookingMatchesRoomIdPredicate(2103);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(predicate.test(new BookingBuilder().withRoomId(2103).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingDoesNotMatchRoomId_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesRoomIdPredicate predicate \u003d new BookingMatchesRoomIdPredicate(2104);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(predicate.test(new BookingBuilder().withRoomId(2103).build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingMatchesStartDatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingMatchesStartDatePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstStartDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate secondStartDate \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate firstPredicate \u003d new BookingMatchesStartDatePredicate(firstStartDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate secondPredicate \u003d new BookingMatchesStartDatePredicate(secondStartDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate firstPredicateCopy \u003d new BookingMatchesStartDatePredicate(firstStartDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingMatchesStartDate_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstStartDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate predicate \u003d new BookingMatchesStartDatePredicate(firstStartDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(predicate.test(new BookingBuilder().withStartDate(firstStartDate).build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void test_bookingDoesNotMatchStartDate_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate firstStartDate \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate secondStartDate \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingMatchesStartDatePredicate predicate \u003d new BookingMatchesStartDatePredicate(firstStartDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(predicate.test(new BookingBuilder().withStartDate(secondStartDate).build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOOKING_DURATION_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasConflict() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // both booking are inactive -\u003e return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking conflictedAmy1 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 11)).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.hasConflict(conflictedAmy1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // both booking are active, booking do not overlap -\u003e return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeNoConflictAmy \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 12))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 15)).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(activeAmy.hasConflict(activeNoConflictAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // both booking are active, other booking has same startDate, earlier endDate -\u003e return true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeConflictedAmy \u003d new BookingBuilder(activeAmy)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 11)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(activeAmy.hasConflict(activeConflictedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // both booking are active, other booking has later startDate, same endDate -\u003e return true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        activeConflictedAmy \u003d new BookingBuilder(activeAmy)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 3)).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(activeConflictedAmy.hasConflict(activeAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // booking A starts on the day in which Booking B ends -\u003e return false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        activeConflictedAmy \u003d new BookingBuilder(activeAmy)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withStartDate(VALID_END_DATE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 11)).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(conflictedAmy1.hasConflict(activeAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // booking B starts on the day in which Booking A ends"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(activeAmy.hasConflict(activeConflictedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasOverlap() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // booking ends before startDate -\u003e return False"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy1 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 12))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 16))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(overlapAmy1.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 11)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Case 1: booking ends after startDate but before endDate"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy2 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 7))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 12))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(overlapAmy2.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 14)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Case 2: booking starts after startDate and ends after endDate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy3 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 11))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 16))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(overlapAmy3.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 14)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Case 3: booking is within the startDate and endDate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy4 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 10))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 13))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(overlapAmy4.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 14)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Case 4: booking is on the startDate and endDate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy5 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 9))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 14))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(overlapAmy5.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 14)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // booking starts after endDate"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Booking overlapAmy6 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 16))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 20))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withIsActive(true)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(overlapAmy6.hasOverlap(LocalDate.of(2020, 10, 9),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.of(2020, 10, 14)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getDuration() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int duration \u003d BOOKING_AMY.getDuration();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(duration, BOOKING_DURATION_AMY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different value -\u003e return false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int duration1 \u003d 6;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertNotEquals(duration1, BOOKING_DURATION_AMY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking bookingAmyCopy \u003d new BookingBuilder(BOOKING_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(bookingAmyCopy.equals(BOOKING_AMY));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(BOOKING_AMY.equals(BOOKING_AMY));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(5));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different roomId -\u003e return false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different personId -\u003e return false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withPersonId(VALID_PERSON_ID_BOB).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different startDate -\u003e return false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withStartDate(VALID_START_DATE_BOB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different endDate -\u003e return false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different isActive -\u003e return false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        //different Booking Id -\u003e return false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withId(VALID_BOOKING_ID_BOB).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(editedBookingAmy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 90,
      "Hazel1603": 33,
      "iamgenechua": 27,
      "zeling595": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/UniqueBookingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_DAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.ACTIVE_BOOKING_DAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.CONFLICT_AMY_BOOKING_CHLOE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class UniqueBookingListTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final UniqueBookingList uniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.contains(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_bookingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(uniqueBookingList.contains(BOOKING_BOB));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_bookingInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(uniqueBookingList.contains(BOOKING_BOB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_duplicateBooking_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void add_duplicateActiveBooking_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(activeAmy);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.add(activeAmy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_conflictingBooking_throwsConflictingBookingException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(activeAmy);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeChloe \u003d new BookingBuilder(CONFLICT_AMY_BOOKING_CHLOE).withIsActive(true).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(ConflictingBookingException.class, () -\u003e uniqueBookingList.add(activeChloe));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_nullTargetBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBooking(null, BOOKING_AMY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_nullEditedBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBooking(BOOKING_AMY, null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_targetBookingNotInList_throwsBookingNotFoundException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(BookingNotFoundException.class, () -\u003e uniqueBookingList.setBooking(BOOKING_AMY, BOOKING_AMY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingIsSameBooking_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBooking(BOOKING_AMY, BOOKING_AMY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingIsDifferentBooking_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBooking(BOOKING_AMY, editedBookingAmy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(editedBookingAmy);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBooking_editedBookingsSameBookingBothActive_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeBob \u003d new BookingBuilder(BOOKING_BOB).withIsActive(true).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(activeAmy);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(activeBob);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.setBooking(activeAmy, activeBob));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingConflictWithBooking_throwsConflictBookingException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        uniqueBookingList.add(activeAmy);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking activeChloe \u003d new BookingBuilder(CONFLICT_AMY_BOOKING_CHLOE).withIsActive(true).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(ConflictingBookingException.class, () -\u003e uniqueBookingList.setBooking("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                BOOKING_BOB, activeChloe));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBooking_roomIdExistAndRoomActive() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking expectedBooking \u003d uniqueBookingList.getBooking(VALID_ROOM_ID_DAN);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedBooking, ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBooking_roomIdDoNotExist_throwsBookingNotFoundException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(BookingNotFoundException.class, () -\u003e uniqueBookingList.getBooking(INVALID_ROOM_ID));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // no test for setBookingInactive yet, set false anyway"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_nullUniqueBookingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBookings((UniqueBookingList) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_uniqueBookingList_replacesOwnListWithProvidedUniqueBookingList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBookings(expectedUniqueBookingList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBookings((List\u003cBooking\u003e) null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e bookingList \u003d Collections.singletonList(BOOKING_BOB);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBookings(bookingList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_listWithDuplicateBookings_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e listWithDuplicateBookings \u003d Arrays.asList(BOOKING_AMY, BOOKING_AMY);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.setBookings(listWithDuplicateBookings));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            -\u003e uniqueBookingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getUnavailableRooms_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate sd \u003d LocalDate.of(2020, 12, 9);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate ed \u003d LocalDate.of(2020, 12, 14);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueBookingList.add(new BookingBuilder(BOOKING_AMY).withIsActive(true).build());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueBookingList.add(new BookingBuilder(BOOKING_BOB).withIsActive(true).build());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e expectedOutput \u003d FXCollections.observableArrayList(2104);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e actualOutput \u003d uniqueBookingList.getUnavailableRooms(sd, ed);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 31,
      "shermz-lim": 8,
      "Hazel1603": 14,
      "iamgenechua": 2,
      "zeling595": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same id -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(BOB.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 4,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DOUBLE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.SINGLE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.SUITE_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void isSameRoom() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(DEFAULT_ROOM.equals(DEFAULT_ROOM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(DEFAULT_ROOM.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different roomID and price -\u003e return false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedRoom1 \u003d new RoomBuilder(SINGLE_1)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withRoomID(DOUBLE_1.getRoomID())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                .withPrice(SUITE_1.getPrice()).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different roomID only -\u003e return false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(SINGLE_1).withRoomID(DOUBLE_1.getRoomID()).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different price only -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(SINGLE_1).withPrice(DOUBLE_1.getPrice()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same roomID and price -\u003e return true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(DOUBLE_1).withRoomID(SINGLE_1.getRoomID()).withPrice(SINGLE_1.getPrice()).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room room1Copy \u003d new RoomBuilder(SINGLE_1).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(SINGLE_1.equals(room1Copy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(SINGLE_1.equals(SINGLE_1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different room -\u003e return false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse((SINGLE_1.equals(DOUBLE_1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedRoom1 \u003d new RoomBuilder(SINGLE_1).withPrice(200).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //different room ID -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(SINGLE_1).withRoomID(DOUBLE_1.getRoomID()).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(SINGLE_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/UniqueRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class UniqueRoomListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final UniqueRoomList uniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void contains_roomNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(uniqueRoomList.contains(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test public void contains_roomInList_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(uniqueRoomList.contains(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.add(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add_duplicateRoom_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.add(DEFAULT_ROOM));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRoom_nullUniqueRoomList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((List\u003cRoom\u003e) null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms_uniqueRoomList_replacesOwnListWithProvidedUniqueRoomList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(SINGLE_1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedUniqueRoomList.add(SINGLE_2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.setRooms(expectedUniqueRoomList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((List\u003cRoom\u003e) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(SINGLE_1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cRoom\u003e roomList \u003d Collections.singletonList(SINGLE_2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.setRooms(roomList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        UniqueRoomList expectedUniqueBookingList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        expectedUniqueBookingList.add(SINGLE_2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueRoomList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms_listWithDuplicateRooms_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cRoom\u003e listWithDuplicateRooms \u003d Arrays.asList(SINGLE_1, SINGLE_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.setRooms(listWithDuplicateRooms));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void get_roomNotInList_returnsEmptyRoom() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(UniqueRoomList.EMPTY_ROOM, uniqueRoomList.getRoom(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void get_roomInList_returnCorrectRoom() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(DEFAULT_ROOM, uniqueRoomList.getRoom(2103));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getComplementRooms_returnsCorrectList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList(SINGLE_1, SINGLE_2, DOUBLE_1, DOUBLE_2, SUITE_1, SUITE_2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.setRooms(rooms);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e input \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                            DOUBLE_1.getRoomID(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                            SUITE_1.getRoomID());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cInteger\u003e output \u003d uniqueRoomList.getComplementRooms(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(output.contains(SINGLE_2.getRoomID())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 output.contains(DOUBLE_2.getRoomID())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 output.contains(SUITE_2.getRoomID())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(SINGLE_1.getRoomID())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(DOUBLE_1.getRoomID())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(SUITE_1.getRoomID()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            uniqueRoomList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getAllRooms_returnsCorrectOutput() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e rooms \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SINGLE_2.getRoomID(), DOUBLE_1.getRoomID(), DOUBLE_2.getRoomID(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SUITE_1.getRoomID(), SUITE_2.getRoomID());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String actualOutput \u003d uniqueRoomList.getAllRooms(rooms);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Integer[] singleRooms \u003d {2104, 2105};"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Integer[] doubleRooms \u003d {2113, 2114};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Integer[] suiteRooms \u003d {2123, 2124};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput \u003d \"Single Rooms: \" + singleRooms.length + \" \" + Arrays.toString(singleRooms) + \"\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + \"Double Rooms: \" + doubleRooms.length + \" \" + Arrays.toString(doubleRooms) + \"\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                + \"Suite Rooms: \" + suiteRooms.length + \" \" + Arrays.toString(suiteRooms) + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getSingleRooms_returnsCorrectOutput() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e rooms \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SINGLE_2.getRoomID(), DOUBLE_1.getRoomID(), DOUBLE_2.getRoomID(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SUITE_1.getRoomID(), SUITE_2.getRoomID());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String actualOutput \u003d uniqueRoomList.getSingleRooms(rooms);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        Integer[] singleRooms \u003d {2104, 2105};"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput \u003d \"Single Rooms: \" + singleRooms.length + \" \" + Arrays.toString(singleRooms) + \"\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getDoubleRooms_returnsCorrectOutput() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e rooms \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SINGLE_2.getRoomID(), DOUBLE_1.getRoomID(), DOUBLE_2.getRoomID(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SUITE_1.getRoomID(), SUITE_2.getRoomID());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String actualOutput \u003d uniqueRoomList.getDoubleRooms(rooms);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Integer[] doubleRooms \u003d {2113, 2114};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput \u003d \"Double Rooms: \" + doubleRooms.length + \" \" + Arrays.toString(doubleRooms) + \"\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getSuiteRooms_returnsCorrectOutput() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e rooms \u003d FXCollections.observableArrayList(SINGLE_1.getRoomID(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SINGLE_2.getRoomID(), DOUBLE_1.getRoomID(), DOUBLE_2.getRoomID(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                SUITE_1.getRoomID(), SUITE_2.getRoomID());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String actualOutput \u003d uniqueRoomList.getSuiteRooms(rooms);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Integer[] suiteRooms \u003d {2123, 2124};"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedOutput \u003d \"Suite Rooms: \" + suiteRooms.length + \" \" + Arrays.toString(suiteRooms) + \"\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 161,
      "iamgenechua": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/roomservice/RoomServiceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.model.roomservice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.testutil.RoomServiceBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.testutil.TypicalRoomService;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class RoomServiceTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void belongsToBooking() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(TypicalRoomService.ROOM_SERVICE_DAN_DINING.belongsToBooking(VALID_BOOKING_ID_DAN));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(TypicalRoomService.ROOM_SERVICE_DAN_DINING.belongsToBooking(VALID_BOOKING_ID_AMY));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void getBookingId() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(TypicalRoomService.ROOM_SERVICE_DAN_DINING.getBookingId().equals(VALID_BOOKING_ID_DAN));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(TypicalRoomService.ROOM_SERVICE_DAN_DINING.getBookingId().equals(VALID_BOOKING_ID_AMY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomService defaultRoomService \u003d new RoomServiceBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomService copy \u003d new RoomServiceBuilder(defaultRoomService).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(defaultRoomService.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(defaultRoomService.equals(defaultRoomService));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(defaultRoomService.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(defaultRoomService.equals(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different roomService -\u003e return false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse((defaultRoomService.equals(TypicalRoomService.ROOM_SERVICE_DAN_DINING)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBookingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXCEED_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBooking.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonAdaptedBookingTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer INVALID_ID \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer INVALID_ROOM_ID \u003d 1000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer INVALID_PERSON_ID \u003d -1000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final LocalDate INVALID_START_DATE \u003d LocalDate.of(2020, 10, 23);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final LocalDate INVALID_END_DATE \u003d LocalDate.of(2020, 10, 22);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static final LocalDate INVALID_END_DATE_EXCEED \u003d LocalDate.of(2020, 12, 11);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer VALID_ID \u003d BOOKING_BOB.getId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer VALID_ROOM_ID \u003d BOOKING_BOB.getRoomId();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Integer VALID_PERSON_ID \u003d BOOKING_BOB.getPersonId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final LocalDate VALID_START_DATE \u003d BOOKING_BOB.getStartDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final LocalDate VALID_END_DATE \u003d BOOKING_BOB.getEndDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final boolean VALID_IS_ACTIVE \u003d BOOKING_BOB.isActive();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking person \u003d new JsonAdaptedBooking(BOOKING_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(BOOKING_BOB, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_invalidId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking booking \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonAdaptedBooking(INVALID_ID, VALID_ROOM_ID, INVALID_PERSON_ID, VALID_START_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_ID;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking person \u003d new JsonAdaptedBooking("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                null, VALID_ROOM_ID, VALID_PERSON_ID, VALID_START_DATE, VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_invalidRoomId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking booking \u003d new JsonAdaptedBooking(VALID_ID,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                INVALID_ROOM_ID, VALID_PERSON_ID, VALID_START_DATE, VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_ROOM_ID_MISSING;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_nullRoomID_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking person \u003d new JsonAdaptedBooking("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                VALID_ID, null, VALID_PERSON_ID, VALID_START_DATE, VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"roomId\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_invalidPersonId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking booking \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonAdaptedBooking(VALID_ID, VALID_ROOM_ID, INVALID_PERSON_ID, VALID_START_DATE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_ID;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_nullPersonId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking person \u003d new JsonAdaptedBooking("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                VALID_ID, VALID_ROOM_ID, null, VALID_START_DATE, VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"personId\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_endDateBeforeStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking booking \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonAdaptedBooking(VALID_ID, VALID_ROOM_ID, VALID_PERSON_ID, INVALID_START_DATE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        INVALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_START_END_DATE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonAdaptedBooking booking \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                new JsonAdaptedBooking(VALID_ID, VALID_ROOM_ID, VALID_PERSON_ID, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                        VALID_END_DATE, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"startDate\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        JsonAdaptedBooking booking \u003d new JsonAdaptedBooking("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                VALID_ID, VALID_ROOM_ID, VALID_PERSON_ID, VALID_START_DATE, null, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"endDate\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void toModelType_endDateExceed_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        JsonAdaptedBooking booking \u003d new JsonAdaptedBooking("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                VALID_ID, VALID_ROOM_ID, VALID_PERSON_ID, INVALID_START_DATE, INVALID_END_DATE_EXCEED, VALID_IS_ACTIVE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String expectedMessage \u003d MESSAGE_EXCEED_DURATION;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, booking::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 111,
      "Hazel1603": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final Integer VALID_ID \u003d BENSON.getId();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                        VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 15,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRoomServiceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRoomService.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.testutil.TypicalRoomService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class JsonAdaptedRoomServiceTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String ROOM_SERVICE_TYPE \u003d \"type\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String BOOKING_ID \u003d \"bookingId\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceDining_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(TypicalRoomService.ROOM_SERVICE_DAN_DINING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_DINING, roomService.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceMassage_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(TypicalRoomService.ROOM_SERVICE_DAN_MASSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_MASSAGE, roomService.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceWifi_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(TypicalRoomService.ROOM_SERVICE_DAN_WIFI);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_WIFI, roomService.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceTypeDining_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(VALID_BOOKING_ID_DAN, RoomServiceType.DINING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_DINING, roomService.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceTypeMassage_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(VALID_BOOKING_ID_DAN, RoomServiceType.MASSAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_MASSAGE, roomService.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_validRoomServiceTypeWifi_returnsRoomService() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(VALID_BOOKING_ID_DAN, RoomServiceType.WIFI);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(TypicalRoomService.ROOM_SERVICE_DAN_WIFI, roomService.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_nullRoomService_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(VALID_BOOKING_ID_DAN, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ROOM_SERVICE_TYPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, roomService::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void toModelType_nullBookingId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonAdaptedRoomService roomService \u003d new JsonAdaptedRoomService(null, RoomServiceType.DINING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BOOKING_ID);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, roomService::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonBookingBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonBookingBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBookingBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readBookingBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readBookingBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private java.util.Optional\u003cReadOnlyBookingBook\u003e readBookingBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new JsonBookingBookStorage(Paths.get(filePath)).readBookingBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(readBookingBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBookingBook(\"notJsonFormatBookingBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readBookingBook_invalidBookingBookingBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBookingBook(\"invalidBookingBookingBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readBookingBook_invalidAndValidBookingBookingBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                readBookingBook(\"invalidAndValidBookingBookingBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readAndSaveBookingBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempBookingBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook original \u003d getTypicalBookingBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonBookingBookStorage jsonBookingBookStorage \u003d new JsonBookingBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonBookingBookStorage.saveBookingBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ReadOnlyBookingBook readBack \u003d jsonBookingBookStorage.readBookingBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new BookingBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.removeBooking(BOOKING_1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonBookingBookStorage.saveBookingBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        readBack \u003d jsonBookingBookStorage.readBookingBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new BookingBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.addBooking(BOOKING_BOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonBookingBookStorage.saveBookingBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        readBack \u003d jsonBookingBookStorage.readBookingBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new BookingBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook_nullBookingBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBookingBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Saves {@code personBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private void saveBookingBook(ReadOnlyBookingBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            new JsonBookingBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                    .saveBookingBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBookingBook(new BookingBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPersonBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonPersonBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPersonBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readPersonBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonBook\u003e readPersonBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new JsonPersonBookStorage(Paths.get(filePath)).readPersonBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(readPersonBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonBook(\"notJsonFormatPersonBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readPersonBook_invalidPersonPersonBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonBook(\"invalidPersonPersonBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readPersonBook_invalidAndValidPersonPersonBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonBook(\"invalidAndValidPersonPersonBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void readAndSavePersonBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPersonBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook original \u003d getTypicalPersonBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonPersonBookStorage jsonPersonBookStorage \u003d new JsonPersonBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonPersonBookStorage.savePersonBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ReadOnlyPersonBook readBack \u003d jsonPersonBookStorage.readPersonBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonPersonBookStorage.savePersonBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        readBack \u003d jsonPersonBookStorage.readPersonBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        jsonPersonBookStorage.savePersonBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        readBack \u003d jsonPersonBookStorage.readPersonBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook_nullPersonBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Saves {@code personBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private void savePersonBook(ReadOnlyPersonBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            new JsonPersonBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                    .savePersonBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void savePersonBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonBook(new PersonBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableBookingBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.TypicalBookings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class JsonSerializableBookingBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBookingBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static final Path TYPICAL_BOOKINGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookingsBookingBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static final Path INVALID_BOOKING_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookingBookingBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static final Path DUPLICATE_BOOKING_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookingBookingBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path DUPLICATE_INACTIVE_BOOKING_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateInactiveBookingBookingBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void toModelType_typicalBookingFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonSerializableBookingBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKINGS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                JsonSerializableBookingBook.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook bookingBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook typicalBookingsBookingBook \u003d TypicalBookings.getTypicalBookingBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(bookingBookFromFile, typicalBookingsBookingBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void toModelType_invalidBookingFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonSerializableBookingBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOKING_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                JsonSerializableBookingBook.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_duplicateaActiveBookings_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonSerializableBookingBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOKING_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                JsonSerializableBookingBook.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableBookingBook.MESSAGE_DUPLICATE_BOOKING,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void toModelType_duplicateInactiveBookings_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonSerializableBookingBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INACTIVE_BOOKING_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                JsonSerializableBookingBook.class).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook bookingBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook expectedBookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        System.out.print(bookingBookFromFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        System.out.print(expectedBookingBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedBookingBook.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        expectedBookingBook.addBooking(new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withId(12).build());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(bookingBookFromFile, expectedBookingBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 21,
      "zeling595": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePersonBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonSerializablePersonBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePersonBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPersonBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPersonBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPersonBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalPersonBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 15,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"personbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonPersonBookStorage addressBookStorage \u003d new JsonPersonBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d new JsonBookingBookStorage(getTempFilePath(\"bb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        JsonRoomServiceBookStorage roomServiceBookStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                new JsonRoomServiceBookStorage(getTempFilePath(\"rsb\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, bookingBookStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                userPrefsStorage, roomServiceBookStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void personBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * {@link JsonPersonBookStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonBookStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook original \u003d getTypicalPersonBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        storageManager.savePersonBook(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ReadOnlyPersonBook retrieved \u003d storageManager.readPersonBook().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new PersonBook(retrieved));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getPersonBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertNotNull(storageManager.getPersonBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void bookingBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * {@link JsonBookingBookStorage} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonBookStorageTest}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         * and {@link JsonBookingBookStorageTest} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook original \u003d getTypicalBookingBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        storageManager.saveBookingBook(original);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        ReadOnlyBookingBook retrieved \u003d storageManager.readBookingBook().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertEquals(original, new BookingBook(retrieved));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getBookingBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertNotNull(storageManager.getBookingBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 33,
      "-": 56,
      "iamgenechua": 4,
      "zeling595": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private BookingBook bookingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder(BookingBook bookingBook) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook \u003d bookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Adds a new {@code Booking} to the {@code BookingBook} that we are building."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder withBooking(Booking booking) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(booking);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Integer DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Integer DEFAULT_ROOM_ID \u003d 2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Integer DEFAULT_PERSON_ID \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final LocalDate DEFAULT_START_DATE \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final LocalDate DEFAULT_END_DATE \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final boolean DEFAULT_IS_ACTIVE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer roomId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer personId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Boolean isActive;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Creates a {@code BookingBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        roomId \u003d DEFAULT_ROOM_ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personId \u003d DEFAULT_PERSON_ID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        startDate \u003d DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        endDate \u003d DEFAULT_END_DATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        isActive \u003d DEFAULT_IS_ACTIVE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Initializes the BookingBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder(Booking bookingToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        id \u003d bookingToCopy.getId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        roomId \u003d bookingToCopy.getRoomId();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personId \u003d bookingToCopy.getPersonId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        startDate \u003d bookingToCopy.getStartDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        endDate \u003d bookingToCopy.getEndDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        isActive \u003d bookingToCopy.isActive();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the roomId of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withRoomId(Integer roomId) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code personId} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withPersonId(Integer personId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code startDate} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBuilder withStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code endDate} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code isActive} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withIsActive(Boolean isActive) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code id} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withId(Integer id) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Booking build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new Booking(roomId, personId, startDate, endDate, isActive, id);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 94,
      "Hazel1603": 1,
      "zeling595": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookingDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class EditBookingDescriptorBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private EditBookingCommand.EditBookingDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor \u003d new EditBookingCommand.EditBookingDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder(EditBookingCommand.EditBookingDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.descriptor \u003d new EditBookingCommand.EditBookingDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns an {@code EditBookingDescriptor} with fields containing {@code booking}\u0027s details"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder(Booking booking) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor \u003d new EditBookingCommand.EditBookingDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setRoomId(booking.getRoomId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setStartDate(booking.getStartDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setEndDate(booking.getEndDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets the {@code RoomId} of the {@code EditBookingDescriptor} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder withRoomId(int roomId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setRoomId(roomId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets the {@code StartDate} of the {@code EditBookingDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder withStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setStartDate(startDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Sets the {@code EndDate} of the {@code EditBookingDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingDescriptorBuilder withEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        descriptor.setEndDate(endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public EditBookingCommand.EditBookingDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * A utility class to help with building Personbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " *     {@code PersonBook ab \u003d new PersonBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class PersonBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private PersonBook personBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBookBuilder(PersonBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Adds a new {@code Person} to the {@code PersonBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public PersonBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d personToCopy.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets the {@code id} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public PersonBuilder withId(Integer id) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(name, phone, email, address, tags, id);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 13,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Single;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * A utility class to help with building Room objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_ROOMID \u003d 2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_PRICE \u003d 100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int roomId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Default Constructor for RoomBuilder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d DEFAULT_PRICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d DEFAULT_ROOMID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Constructs a {@code RoomBuilder}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param tobeCopied a valid Room."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder(Room tobeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d tobeCopied.getRoomID();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d tobeCopied.getPrice();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Sets RoomBuilder with new RoomID."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param roomId new RoomID"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a {@code RoomBuilder} with modified roomID"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder withRoomID(int roomId) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Sets RoomBuilder with new Price"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param price Price for room"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a {@code RoomBuilder} with modified price"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder withPrice(int price) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a Room object from the current fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return {@code Room}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room ret \u003d new Single(this.roomId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret.setPrice(this.price);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomServiceBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.RoomServiceBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomServiceBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private RoomServiceBook roomServiceBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBookBuilder() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBookBuilder(RoomServiceBook roomServiceBook) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomServiceBook \u003d roomServiceBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Adds a new {@code RoomService} to the {@code RoomServiceBook} that we are building."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBookBuilder withRoomService(RoomService roomService) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        roomServiceBook.addRoomService(roomService);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBook build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return roomServiceBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomServiceBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * A utility class to help with building RoomService objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class RoomServiceBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final int DEFAULT_BOOKING_ID \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final RoomServiceType DEFAULT_TYPE \u003d RoomServiceType.DINING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private int bookingId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private RoomServiceType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Default Constructor for RoomServiceBuilder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingId \u003d DEFAULT_BOOKING_ID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Constructs a {@code RoomServiceBuilder}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @param tobeCopied a valid RoomService."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBuilder(RoomService tobeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingId \u003d tobeCopied.getBookingId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.type \u003d tobeCopied.getType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets RoomServiceBuilder with new bookingId."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBuilder withBookingId(int bookingId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets RoomServiceBuilder with new type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomServiceBuilder withType(RoomServiceType type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a RoomService object from the current fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public RoomService build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new RoomService(bookingId, type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBookings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONFLICT_AMY_END_DATE_CHLOE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONFLICT_AMY_ROOM_ID_CHLOE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONFLICT_AMY_START_DATE_CHLOE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONFLICT_AMY_VALID_BOOKING_ID_CHLOE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_DAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_CHLOE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_DAN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_DAN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_DAN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class TypicalBookings {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_1 \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_1 \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_2 \u003d LocalDate.of(2020, 10, 23);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_3 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_3 \u003d LocalDate.of(2020, 10, 27);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate EDITED_ENDDATE_1 \u003d LocalDate.of(2020, 10, 24);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate START_DATE_AFTER_END_DATE_1 \u003d STARTDATE_1.plusMonths(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final LocalDate EXCEED_1_MONTH_END_DATE_1 \u003d STARTDATE_1.plusMonths(2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_1 \u003d new Booking(2103, 1, STARTDATE_1, ENDDATE_1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_2 \u003d new Booking(2104, 2, STARTDATE_1, ENDDATE_1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_3 \u003d new Booking(2105, 3, STARTDATE_2, ENDDATE_2,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_4 \u003d new Booking(2115, 4, STARTDATE_2, ENDDATE_2,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_5 \u003d new Booking(2104, 5, STARTDATE_3, ENDDATE_3,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Booking BOOKING_6 \u003d new Booking(2103, 1, STARTDATE_3, ENDDATE_3,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Integer EDITED_ROOM_ID_1 \u003d 2106;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Integer BOOKING_ID_1 \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Integer INVALID_BOOKING_ID \u003d 100;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_AMY \u003d new Booking(VALID_ROOM_ID_AMY, VALID_PERSON_ID_AMY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_AMY, VALID_END_DATE_AMY, false, VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_BOB \u003d new Booking(VALID_ROOM_ID_BOB, VALID_PERSON_ID_BOB,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_BOB, VALID_END_DATE_BOB, false, VALID_BOOKING_ID_BOB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking CONFLICT_AMY_BOOKING_CHLOE \u003d new Booking(CONFLICT_AMY_ROOM_ID_CHLOE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_PERSON_ID_CHLOE, CONFLICT_AMY_START_DATE_CHLOE, CONFLICT_AMY_END_DATE_CHLOE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, CONFLICT_AMY_VALID_BOOKING_ID_CHLOE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking ACTIVE_BOOKING_DAN \u003d new Booking(VALID_ROOM_ID_DAN, VALID_PERSON_ID_DAN,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_DAN, VALID_END_DATE_DAN, true, VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private TypicalBookings() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns an {@code PersonBook} with all the typical persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static BookingBook getTypicalBookingBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook ab \u003d new BookingBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        for (Booking r : getTypicalBookings()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            ab.addBooking(r);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static List\u003cBooking\u003e getTypicalBookings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOKING_1, BOOKING_2, BOOKING_3, BOOKING_4, BOOKING_5, BOOKING_6));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 31,
      "Hazel1603": 23,
      "zeling595": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Index INDEX_FIRST_BOOKING \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Index INDEX_SECOND_BOOKING \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 3,
      "-": 12,
      "zeling595": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_DOUBLE_HARRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_GENE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SINGLE_HARRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SUITE_HARRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_DOUBLE_HARRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_GENE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SINGLE_HARRY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SUITE_HARRY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DOUBLE_HARRY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GENE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SINGLE_HARRY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SUITE_HARRY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_DOUBLE_HARRY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_GENE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_SINGLE_HARRY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_SUITE_HARRY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DOUBLE_HARRY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_GENE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SINGLE_HARRY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SUITE_HARRY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.PersonBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSON_ID_ALICE \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            .withId(VALID_PERSON_ID_ALICE).withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(2).withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(3).withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(4).withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(5).withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(6).withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(7).withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(8).withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(9).withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withId(VALID_ID_AMY).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withId(VALID_ID_BOB).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Person GENE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            .withId(VALID_PERSON_ID_GENE).withName(VALID_NAME_GENE).withPhone(VALID_PHONE_GENE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withEmail(VALID_EMAIL_GENE).withAddress(VALID_ADDRESS_GENE).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Person SINGLE_HARRY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            .withId(VALID_PERSON_ID_SINGLE_HARRY).withName(VALID_NAME_SINGLE_HARRY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withPhone(VALID_PHONE_SINGLE_HARRY).withEmail(VALID_EMAIL_SINGLE_HARRY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withAddress(VALID_ADDRESS_SINGLE_HARRY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Person DOUBLE_HARRY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            .withId(VALID_PERSON_ID_DOUBLE_HARRY).withName(VALID_NAME_DOUBLE_HARRY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withPhone(VALID_PHONE_DOUBLE_HARRY).withEmail(VALID_EMAIL_DOUBLE_HARRY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withAddress(VALID_ADDRESS_DOUBLE_HARRY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Person SUITE_HARRY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            .withId(VALID_PERSON_ID_SUITE_HARRY).withName(VALID_NAME_SUITE_HARRY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withPhone(VALID_PHONE_SUITE_HARRY).withEmail(VALID_EMAIL_SUITE_HARRY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            .withAddress(VALID_ADDRESS_SUITE_HARRY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns an {@code PersonBook} with all the typical persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static PersonBook getTypicalPersonBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        PersonBook ab \u003d new PersonBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4,
      "shermz-lim": 19,
      "-": 61,
      "iamgenechua": 35,
      "zeling595": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRoomService.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DAN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.RoomServiceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomService;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.roomservice.RoomServiceType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class TypicalRoomService {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final RoomService ROOM_SERVICE_DAN_MASSAGE \u003d new RoomService("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            VALID_BOOKING_ID_DAN, RoomServiceType.MASSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final RoomService ROOM_SERVICE_DAN_WIFI \u003d new RoomService("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            VALID_BOOKING_ID_DAN, RoomServiceType.WIFI);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final RoomService ROOM_SERVICE_DAN_DINING \u003d new RoomService("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            VALID_BOOKING_ID_DAN, RoomServiceType.DINING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private TypicalRoomService() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns an {@code RoomServiceBook} with all the typical room services."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static RoomServiceBook getTypicalRoomServiceBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        RoomServiceBook rsb \u003d new RoomServiceBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        for (RoomService rs : getTypicalRoomServices()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            rsb.addRoomService(rs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return rsb;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static List\u003cRoomService\u003e getTypicalRoomServices() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ROOM_SERVICE_DAN_MASSAGE, ROOM_SERVICE_DAN_WIFI, ROOM_SERVICE_DAN_DINING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.RoomBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Double;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Single;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Suite;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Initiates a Hotel that has 5 Singles, 5 Doubles and 5 Suites."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DEFAULT_ROOM \u003d new Single(2103);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_ROOMID \u003d 2103;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SINGLE_1 \u003d new Single(2104);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SINGLE_2 \u003d new Single(2105);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SINGLE_3 \u003d new Single(2106);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SINGLE_4 \u003d new Single(2107);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SINGLE_5 \u003d new Single(2108);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room SINGLE_MIDDLE \u003d new Single(2110);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room SINGLE_END \u003d new Single(2112);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DOUBLE_1 \u003d new Double(2113);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DOUBLE_2 \u003d new Double(2114);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DOUBLE_3 \u003d new Double(2115);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DOUBLE_4 \u003d new Double(2116);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DOUBLE_5 \u003d new Double(2117);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room DOUBLE_MIDDLE \u003d new Double(2120);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room DOUBLE_END \u003d new Double(2122);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SUITE_1 \u003d new Suite(2123);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SUITE_2 \u003d new Suite(2124);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SUITE_3 \u003d new Suite(2125);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SUITE_4 \u003d new Suite(2126);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room SUITE_5 \u003d new Suite(2127);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room SUITE_MIDDLE \u003d new Suite(2129);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Room SUITE_END \u003d new Suite(2132);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns an {@code PersonBook} with all the typical persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static RoomBook getTypicalRoomBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook ab \u003d new RoomBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (Room r : getTypicalRooms()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ab.addRoom(r);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static List\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DEFAULT_ROOM, SINGLE_1, SINGLE_2, SINGLE_3, SINGLE_4,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                SINGLE_5, SINGLE_MIDDLE, SINGLE_END,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                DOUBLE_1, DOUBLE_2, DOUBLE_3, DOUBLE_4, DOUBLE_5, DOUBLE_MIDDLE, DOUBLE_END,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                SUITE_1, SUITE_2, SUITE_3, SUITE_4, SUITE_5, SUITE_MIDDLE, SUITE_END));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "Hazel1603": 53,
      "iamgenechua": 9
    }
  }
]
