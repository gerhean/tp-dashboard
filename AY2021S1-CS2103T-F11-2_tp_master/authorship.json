[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "# Productiv"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-2/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Want to be **productive** in managing your **product**?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "If yes, **Productiv** is the way to go!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "**Productiv** can help you:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* Manage your contacts, meetings, and deliverables"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* View your meetings and deliverables on a calendar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* Keep track of your product\u0027s progress"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [User Guide](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [Developer Guide](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [About Us](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "claraadora": 15
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    archiveName \u003d \u0027productiv.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "chrystalquek": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "### Cao Wenjie"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cimg src\u003d\"images/shadowezz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[[github](https://github.com/shadowezz)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Deliverable\" features and Quality Assurance (Testing)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "### Clara Adora"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cimg src\u003d\"images/claraadora.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[[github](https://github.com/claraadora)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Meeting\" features and Product Management"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Chrystal Quek"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cimg src\u003d\"images/chrystalquek.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[[github](http://github.com/chrystalquek)] [[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Contact\" and \"Mode\" features, as well as Quality Assurance (Testing)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Gabriel Tan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cimg src\u003d\"images/gabztcr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[[github](http://github.com/gabztcr)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Deliverable\" features and Documentation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### Merlin Lim"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "\u003cimg src\u003d\"images/merlinlim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "[[github](https://github.com/MerlinLim)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Meeting\" features and Documentation"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "shadowezz": 13,
      "-": 37,
      "chrystalquek": 3,
      "MerlinLim": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* [**`Model`**](#modelPerson-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* [**`Storage`**](#storagePerson-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/modelPerson/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) modelPerson is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storagePerson/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### [In Progress] \\[DateTime\\]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "The implementation allows users to parse and compare unique DateTime types. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "To parse, DateTime should be in the following format: **`dd-MM-yyyy HH:mm`** "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Single digits fields must include leading zero: `01-01-0101 01:10`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Valid Calendar Range: \\[`01-01-0001 00:00` - `31-12-9999 23:59`\\]."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "DateTime will throw a parsing error if"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `1-10-2020 00:00:59` Format is wrong (e.g missing or additional digit)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `31-02-2020 00:00` Invalid range (e.g invalid leap year)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "The following is an example of how DateTime can be implemented into the model"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "![DateTimeClassDiagram](images/DateTimeClass.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* DateTime is a class that can be used by all models."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* From, To and Deadline are fields which extend from DateTime."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "DateTime can be used to compare with other DateTime objects:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Enable deliverables to be sorted based on which one is due the earliest."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* DateTime can be used to identify time clashes between different meetings."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Alternative 1 (current choice):** Throws error when invalid range is "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "given for dates"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * E.g `29-02-2019` or `31-11-2020`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Pros: Notifies user he has made a mistake."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Cons: Costs time to re-type the entire command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Alternative 2:** Command knows how to resolve overflow of dates. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * E.g `29-02-2019` will be resolved automatically to `28-02-2019` the `MAX number of days of the month`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Pros: Saves time for the user if he had intended to select the last day of the month."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Cons: The date specified may not be the intended input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claraadora"
        },
        "content": "### \\[Proposed\\] Autosort feature"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claraadora"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Autosort allows users to view `Meeting`s, `Deliverable`s, and `Contact`s in a logical manner. Specifically, Autosort"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claraadora"
        },
        "content": "automatically sorts the abovementioned components by the following attributes: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `Meeting`   - `From`\u0027s `LocalDateTime` value in chronological order "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `Deadline`  - `Deadline`\u0027s `LocalDateTime` value in chronological order "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `Contact`   - `Title`\u0027s `String` value in alphabetical order "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Autosort is faciliated by custom objects that implements `Comparator`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claraadora"
        },
        "content": "The following sequence diagram shows how a list is autosorted upon an addition of a new element."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claraadora"
        },
        "content": "![UndoSequenceDiagram](images/AutosortSequenceDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claraadora"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claraadora"
        },
        "content": "##### Aspect: How autosorting executes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* **Alternative 1 (current choice):** Sorts a list upon an addition or update of an element."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    * Pros: Error-free and easy to implement."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    * Cons: Relatively high time complexity i.e. O(nlogn)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* **Alternative 2:** Searches the correct index in the list to insert an element upon addition or update."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    * Pros: Relatively low time complexity i.e. O(logn)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    * Cons: Prone to error and difficult to implement."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### [In progress] Switch Mode feature"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Productiv can be in different modes: dashboard, deliverable, meeting and contact mode. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Based on the current mode, the user input is passed to the relevant `LogicManager`. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Following that, the `LogicManager` will parse the user input and produce the relevant results."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "The current mode is represented by a `ModeEnum` and stored in `MainWindow`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "![SwitchModeSequenceDiagram](images/SwitchModeSequenceDiagram.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Figure \u003c?\u003e Switch Command Sequence Diagram (In Progress)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "The user input is passed to `LogicModeManager`. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`LogicModeManager` then returns a `CommandResult` containing the mode that Productiv should switch to. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`MainWindow` then reflects the corresponding list in the user interface and"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "will pass subsequent user inputs to the corresponding `LogicManager`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "##### Aspect: Where mode is stored"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* **Alternative 1 (current choice):** Store mode in `MainWindow`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  * Cons: May violate Single Responsibility Principle."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* **Alternative 2:** Store mode in a `LogicModeManager`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  * Pros: Adheres to the Single Responsibility Principle better."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  * Cons: `LogicModeManager` would need to have references to the other logic managers. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  It should not be the responsibility of `LogicModeManager` to pass the user input to the relevant `LogicManager`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "### \\[Proposed\\] View feature"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "The view feature allows users to view the details of a specific `Meeting`, `Deliverable` or `Contact` on the right"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "panel of the display window."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "The proposed view mechanism is facilitated by implementing the following operations:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `ModelDeliverable#setDeliverableInView()` — Changes the `Deliverable` to be displayed"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `ModelPerson#setContactInView()` — Changes the `Contact` to be displayed"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `ModelMeeting#setMeetingInView()` — Changes the `Meeting` to be displayed"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Given below is an example usage scenario of how viewing a deliverable works."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Step 1. The user executes `view 2` command to view the details of the second deliverable in the list of deliverables. The view command calls `ModelDeliverable#setDeliverableInView()` which updates the deliverable currently in view in the `ModelDeliverable`. This newly updated deliverable is then fetched and displayed to the user on the right panel."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "The following sequence diagram shows how the view operation works:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "![ViewCommandSequenceDiagram](images/ViewCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "##### Aspect: How view executes"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* **Alternative 1 (current choice):** Stores the item in view inside the respective model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  * Pros: Ensures persistence as it can be referred to repeatedly."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  * Cons: Requires another operation to fetch the item in view to be displayed."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* **Alternative 2:** Passes the item in view inside the Command Result to the UI component"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  * Pros: Does not require an additional operation to fetch the item in view."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  * Cons: Inappropriate use of Command Result whose primary objective is to pass feedback to the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### \\[Proposed\\] Overall Completion Percentage feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "The Overall Completion Percentage (OCP) feature is to be implemented in the Dashboard page (coming soon) of *Productiv*."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "This feature allows users to have a quick overview of the progress of their product\u0027s development. OCP is given by the "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "formula*:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**_OCP (%) \u003d Number of Completed Deliverables / Total Number of Deliverables × 100_**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\\* If no deliverables are present, OCP will be set to **0%**."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "The OCP will only be updated upon successful execution of the following (simplified) commands:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* AddCommand, i.e. *add(deliverable)*"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* DoneCommand, i.e. *done(deliverable)*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* DeleteCommand, i.e. *delete(deliverable)*"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "The following proposed sequence diagram shows how the updating of the OCP would be implemented:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "![OCPSequenceDiagram](images/OCPSequenceDiagram.png)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "##### Aspect: How updating of OCP executes"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* **Alternative 1 (current choice):** Store the deliverable counters within `LogicDeliverableManager`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    * Pros: Adheres to Single Responsibility Principle."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    * Cons: May require additional interfaces/methods to retrieve the required values for OCP computation."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* **Alternative 2:** Store the deliverable counters as global variables."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    * Pros: Directly accesses the required values for OCP computation."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    * Cons: May violate Single Responsibility Principle."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* has a need to manage a meeting schedule"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* has a need to oversee the development of the product"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Value proposition**: Used in a corporate setting, our application integrates both a meeting schedule and a contact list for the user to "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "manage their product’s development more comprehensively and conveniently."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### EPIC"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| No | EPIC                                                                                                                                        | "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|----|---------------------------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|A   | As a Product Manager, I can track my product’s development so that I can work better towards production deadlines.                          |"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|B   | As a Product Manager, I can manage my stakeholder/dev team contacts.                                                                        |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|C   | As a Product Manager, I can organise my meetings with stakeholders.                                                                         |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|D   | As an inexperienced or forgetful Product Manager, I can refer to a user guide as I’m using the app so that I am able to use it as intended. |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|E   | As a bridge between Dev Team and Stakeholders, I can communicate better.                                                                    |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Priorities: "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `* * *` - High (must have)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `* *` - Medium (nice to have)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `*` - Low (unlikely to have) "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| Priority | As a Product Manager…​                | I want to …​                                                             | So that I can…​                 |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| -------- | ---------------------------------------- | --------------------------------------------------------------------------- | ---------------------------------- |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC A** |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | add deliverables                                                            | keep track of them                 |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | mark deliverables as completed                                              | refer back to them when needed     |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | delete deliverables that are no longer relevant                             | focus on current deliverables      |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | change the description of the deliverables                                  | keep them up to date               |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | package deliverables into different milestones                              | retrieve the relevant deliverables easily |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | easily know who and how to contact the person-in-charge                     | contact the person when the progress of a deliverable is behind schedule |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | flag problematic deliverables in the app                                    | know that these tasks require further attention |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | find a deliverable easily                                                   |                                    |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | sort my deliverables by deadline                                            |                                    |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC B** |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | add contacts                                                                | store their details for future communication |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | distinguish between the developers and the stakeholders in a project easily | remember the different roles       |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | view my contacts and their relevant details                                 | remember and retrieve important information  |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *  `  | Product Manager                          | edit my contacts                                                            | keep them up-to-date               |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | search for contacts based on a certain field of information                 | easily navigate through different groups |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | sort my contacts by alphabetical order                                      |                                    |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view the details of my deliverables easily                                  |                                    |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC C** |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | schedule new meetings with my stakeholders                                  | keep track of them                 |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | delete scheduled meetings with my stakeholders                              | remove outdated or cancelled meetings |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | edit existing meeting details with my stakeholders                          | update them accordingly            |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | be notified if I have conflicting meetings before adding new ones           | reschedule the meetings            |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | search for contacts based on a certain field of information                 | easily navigate through different groups |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | sort my meetings by alphabetical order                                      |                                    |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view the details of my deliverables easily                                  |                                    |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC D** |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view a helpful popup                                                        | easily access the relevant instructions |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | receive feedback from the app                                               | know the system has registered my action correctly or not |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view and easily navigate within the shortcut reference                      | locate technical solutions quickly |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC E** |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | Opening page                                                                | Enter the name of product and initialise Productiv       |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `*`      | Product Manager                          | see a calendar view of meetings                                             | know my available slots to schedule new meetings   |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `*`      | Product Manager                          | view the overall completion                                                 | know whether we are on track (completed deliverables/total deliverables) |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "(For all use cases below, the **System** is the `Productiv` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### Mode"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC01 - Switch Mode`**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to switch the mode."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "2. User enters the command to switch mode into the input box."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "3. Productiv switches to the expected mode."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a1. Productiv displays an error message"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a2. User enters the command again."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a3. Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "       Use case resumes from step 3."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### CONTACT"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC10 - Add a contact`**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User adds contact."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 1a. Invalid input."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 1a1. Productiv shows an error message."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC11 - Edit a contact`**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Contact to edit exists`**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list contacts."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of contacts."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User edits a specific contact in the list."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits contact details."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. The given input is invalid."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1 Productiv shows an error message."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC12 - Delete a contact`**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`** "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Contact to delete exists`**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted contacts will not have its data in Productiv`**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted contacts cannot be retrieved back`**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list contacts."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of contacts."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to delete a specific contact in the list."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the contact."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   User case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### DELIVERABLES"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC20 - Add Deliverable`**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to add a deliverable."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to add a deliverable into the input box."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv adds the deliverable for tracking."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC21 - Edit Deliverable`**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to edit exists`**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to edit a deliverable."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to edit a deliverable into the input box."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits the deliverable."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC22 - Mark Deliverable Completed`**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to mark complete exists`**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to mark a deliverable as completed."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to mark a deliverable as complete into the input box."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv marks the deliverable as done."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC23 - Delete Deliverable`**"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to delete exists`**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted deliverables will not have its data in Productiv`**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted deliverables cannot be retrieved back`**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to delete a deliverable."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to delete a deliverable into the input box."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv prompts the user to confirm deletion."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User accepts confirmation."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the deliverable."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. User declines confirmation."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1. Productiv cancels the deletion process."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### MEETING"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC30 - Add a meeting`**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User adds meeting."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 1a. Invalid input."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 1a1. Productiv shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC31 - Edit a meeting`**"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`** "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Meeting to edit exists`**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list meetings."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of meetings."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User edits a specific meeting in the list."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits meeting details."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. The given input is invalid."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1 Productiv shows an error message."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC32 - Delete a meeting`**"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`** "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Meeting to delete exists`**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted meeting will not have its data in Productiv`**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted meeting cannot be retrieved back`**"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list meetings."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of meetings."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to delete a specific meeting in the list."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the meeting."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   User case ends."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to hold up to 1000 contacts without any negative effects."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to hold up to 1000 deliverables without any negative effects."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to schedule meetings up to 2 years in advance."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Deliverable**: a thing able to be provided, especially as a product of a development process."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **CRUD**: Create, Read, Update and delete."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Shutdown"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    1. Click the window close button _OR_"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    1. Enter input: `exit`, to close the program. "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### Switching Modes"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Via Mouse input"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    1. Test case: Click `Deliverable` _OR_ Click `Meeting`\u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Expected: Window displays list of saved `deliverables` or `meetings`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Via Command Line Input"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    1. Test case: `switch deliverable` or `switch meeting`\u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Expected: Window displays list of saved `deliverables` or `meetings`."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    1. Incorrect modes: `switch me3ting`, `switch dev`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Expected: Status bar throws error message."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### Adding an item"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Adding a contact while in `Contact` mode"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   1. Test case: `add r/stk n/John e/Johnwork@abc.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   1. Test case: `add n/john`\u003cbr\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Expected: No contact is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   1. Other incorrect add commands to try: `add john stk`, `add john`, `...` \u003cbr\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### Deleting an item"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Deleting a contact while in `contact` mode"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Data files are saved in a `data` folder.\u003cbr\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "3 JSON files are created:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * `addressbook.json`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * `meetingBook.json`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * `deliverablebook.json`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "All 3 files contain information stored by the user from their respective modes."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   1. Missing data/corrupted files: delete `addressbook.json` file and start the jar file again\u003cbr\u003e "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   Expected: Data file should re-initialise a list of sample contacts"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "_{more to be added}_"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 31,
      "shadowezz": 18,
      "-": 303,
      "chrystalquek": 28,
      "MerlinLim": 417,
      "claraadora": 18
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Productiv’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* *Unit tests* that target the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   e.g. `seedu.address.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* *Integration tests* that check the integration of multiple code units (assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   e.g. `seedu.address.storage.StoragePersonManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* *Hybrids of unit and integration tests* that check multiple code units as well as how they are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   e.g. `seedu.address.logic.LogicPersonManagerTest`"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 5,
      "-": 30,
      "chrystalquek": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "*Productiv* is a one-stop desktop app for product managers like yourself to organise your **contacts**, "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "**deliverables** and **meetings**, so that you can track your product\u0027s development easily."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "*Productiv* is optimized for use via Command Line Interface (CLI). Thus, if you like to type and/or type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "*Productiv* has just become better for you. However, fret not, *Productiv* still has the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Ensure you have Java `11` or above installed in your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. Download the latest `productiv.jar` from [here](https://github.com/AY2021S1-CS2103T-F11-2/tp/releases)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Copy the `.jar` file to your preferred folder."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Double-click the file to start *Productiv*. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Your `dashboard` should appear in a few seconds. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Note that the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eDashboard\u003c/figcaption\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Type a command in the command box and press Enter to execute it. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Here are some example commands you can try:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   * **`switch`**`deliverable` : Switches to `deliverable` mode."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   * **`add`**`r/stk n/Betty Clarke e/betty@email.com` : If in `contact` mode, adds a contact named `Betty Clarke`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   * **`delete`**`1` : If in `meeting` mode, deletes the 1st meeting shown."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Refer to [Features](#features) below for details of each available command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Jason`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "  e.g `n/NAME [p/PHONE]` can be used as `n/Jason p/98890112` or as `n/Jason`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "  e.g. if the command specifies `n/NAME e/EMAIL`, `e/EMAIL n/NAME` is also acceptable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### General"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Viewing help: `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Shows a message directing you to this User Guide."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "![help](images/helpMessage.JPG)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* Words after `help` will be ignored, e.g. `help I don\u0027t know what to do` will show the help message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Switching modes: `switch`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Switches to `dashboard`, `deliverable`, `meeting` or `contact` mode."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `switch MODE`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `switch`  `deliverable`, `meeting` and `contact` mode will display your list of deliverables, meetings and contacts in the left panel respectively, "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "e.g. `switch contact` will display your list of contacts."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "A view panel will be displayed in the right panel (initially empty)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `switch dashboard` will display your project\u0027s completion status in the left panel."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "A calendar list containing all your deliverables and meetings, chronologically sorted, will be displayed in the right panel."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* How the commands will be executed depend on which mode you are currently in, e.g. **`delete`**`1` in `meeting` mode deletes the 1st meeting shown."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `switch dashboard` switches to `dashboard` mode."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `switch meeting` switches to `meeting` mode."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Contact"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   ![contact](images/Contact.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eInitial display of a contact list \u003c/figcaption\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a contact: `add`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a developer or stakeholder to your contact list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `add r/ROLE n/NAME [p/PHONE] e/EMAIL [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `ROLE` is the type of contact, either developer (`dev`) or stakeholder (`stk`)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `NAME` is the name of the contact."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `PHONE` is the phone number of the contact."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `EMAIL` is the email address of the contact."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DESCRIPTION` contains additional information about the contact, such as their job position."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* You cannot add contacts with the same name and at least one other identity field (phone or email) that is the same,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "e.g. `add r/dev n/John p/123` will not work if a contact with the name `John` and phone `123` exists in the contact list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add r/dev n/Jordan Woods p/81234567 e/johndoe@glutter.com`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a developer with the name `Jordan Woods`, phone number `81234567` and email `jordanwoods@glutter.com`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add r/stk n/Betsy Crowe e/betsybet872@pmail.com`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a stakeholder with the name `Betsy Crowe` and email `betsybet872@pmail.com`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Editing a contact: `edit`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Edits an existing contact in your contact list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the contact in your displayed contact list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified contact will be updated to the input values."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* You cannot edit contacts to have the same name and phone or email as another existing contact,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "e.g. `edit 1 r/dev n/John e/john@email.com` will not work if another contact with the name `John` and email `john@email.com` exists in the contact list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 1 p/81234567 e/jeremysand@glutter.com`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "edits the phone number and email address of the 1st contact to be `81234567` and `jeremysand@glutter.com` respectively."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 2 n/Jayden Smith` "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "edits the name of the 2nd contact to be `Jayden Smith`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Finding contacts: `find`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Finds the contacts whose names or descriptions contain any of the given keywords."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `find KEYWORDS`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `KEYWORDS` contains one or more keywords used to match contacts."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Searches only consider name and description."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Searches are case-insensitive, e.g. `hans` will match `Hans`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Order of keywords does not matter, e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Searches only account for full words, e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Searches return contacts matching at least one keyword, e.g. `Hans Bo` will return `Hans Seed` and `Bo Yarns`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `find John Kite` returns a contact with name `john kite` and another with description `Kite manufacturer`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `find Sun` returns a contact with name `Joe Sun` and another with description `Works at Sun Tools`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Listing all contacts: `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Shows a list of all contacts in your contact list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**Tip:** Use this command when you want to list all your contacts back after using the `find` command. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Refer to [Finding contacts](#finding-contacts-find) above for details of the `find` command. "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Deleting a contact: `delete`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Deletes the specified contact from your contact list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the contact in your displayed contact list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `delete 3` deletes the 3rd contact in the contact list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claraadora"
        },
        "content": "#### Viewing a contact: `view`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Displays more details of the specified contact from your contact list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `INDEX` is the index number of the contact in your displayed contact list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `view 2` views the 2nd contact in your contact list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   ![Ui](images/ContactView.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eViewing a contact\u003c/figcaption\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Clearing all contacts: `clear`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Clears all contacts from your contact list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Deliverable"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   ![Ui](images/Deliverable.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eInitial display of a deliverable list \u003c/figcaption\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a deliverable: `add`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a deliverable to your deliverable list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `add t/TITLE m/MILESTONE by/DEADLINE [d/DESCRIPTION] [c/CONTACTS]`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TITLE` is the main heading of the deliverable."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `MILESTONE` is the milestone tagged to the deliverable."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `MILESTONE` takes in numerical values separated by periods, e.g. `1.3`, `14.2.1`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DEADLINE` is the due date time of the deliverable in DD-MM-YYYY HH:mm format."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `DESCRIPTION` contains additional information about the deliverable, e.g. sub-requirements. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `CONTACTS` represents the contacts involved in seeing through the deliverable."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `CONTACTS` is a comma-separated string of names."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claraadora"
        },
        "content": "`CONTACTS` has no relation to the contacts in your contact list. Hence, you are free to add those"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claraadora"
        },
        "content": "who are not in your contact list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `add t/Login screen m/1.1 by/10-10-2020 18:00 d/Include email and password fields c/2,4` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a deliverable with the title `Login screen`, milestone `1.1`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline `10-10-2020 18:00` description `Include email and password fields` and contacts `2,4`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add t/Find profile page template m/2.1.1 by/12-12-2020 12:00` "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a deliverable with the title `Find profile page template`, milestone `2.1.1` "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "and deadline `12-12-2020 12:00`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Editing a deliverable: `edit`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Edits an existing deliverable in your deliverable list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `edit INDEX [t/TITLE] [m/MILESTONE] [by/DEADLINE] [d/DESCRIPTION] [c/CONTACTS]`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the deliverable in your displayed deliverable list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified deliverable will be updated to the input values."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 1 d/Must include username, email and password fields by/13-12-2020 12:00`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "edits the description of the 1st deliverable to be `Must include username, email and password fields`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "and its deadline to be `13-12-2020 12:00`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 2 c/2,4,5` edits the contacts of the 2nd deliverable to be `2,4,5`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Marking a deliverable as completed: `done`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Marks the specified deliverable from your deliverable list as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the deliverable in your displayed deliverable list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `done 1` marks the 1st deliverable in your deliverable list as done."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Finding deliverables: `find`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Finds the deliverables whose titles or descriptions contain any of the given keywords."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `find KEYWORDS`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `KEYWORDS` contains one or more keywords used to match deliverables."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Searches only consider title and description."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Searches are case-insensitive, e.g. `homepage` will match `Homepage`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Order of keywords does not matter, e.g. `Homepage Navigation` will match `Navigation Homepage`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Searches only account for full words, e.g. `Deploy` will not match `Deployment`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Searches return deliverables matching at least one keyword, e.g. `Homepage Navigation` will return `Complete Homepage` and `Increase size of Navigation Bar`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `find Homepage urgent` returns a deliverable with title `Complete homepage.` and another with description `Urgent, client is unhappy`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `find Mockup` returns a deliverable with name `Complete mockup` and another with description `Add more details to existing Mockup`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Listing all deliverables: `list`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Shows a list of all deliverables in your deliverable list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**Tip:** Use this command when you want to list all your deliverables back after using the `find` command. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Refer to [Finding deliverables](#finding-deliverables-find) above for details of the `find` command. "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Deleting a deliverable: `delete`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Deletes the specified deliverable from your deliverable list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the deliverable in your displayed deliverable list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `delete 2` deletes the 2nd deliverable in your deliverable list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "claraadora"
        },
        "content": "#### Viewing a deliverable: `view`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Displays more details of the specified deliverable from your deliverable list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `INDEX` is the index number of the deliverable in your displayed deliverable list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `view 2` views the 2nd deliverable in your deliverable list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   ![Ui](images/DeliverableView.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eViewing a deliverable\u003c/figcaption\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Clearing all deliverables: `clear`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Clears all deliverables from the deliverable list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Meeting"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   ![Ui](images/Meeting.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "claraadora"
        },
        "content": "   \u003cfigcaption\u003eInitial display of a meeting list \u003c/figcaption\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "claraadora"
        },
        "content": " "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a meeting: `add`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a meeting to your meeting list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `add t/TITLE [d/DESCRIPTION] from/FROM to/TO [c/CONTACTS] [l/LOCATION]`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TITLE` is the main heading of the meeting."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DESCRIPTION` contains additional details about the meeting, e.g. agenda. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `FROM` is the start date time of the meeting in DD-MM-YYYY HH:mm format."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TO` is the end date time of the meeting in DD-MM-YYYY HH:mm format."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `CONTACTS` represents the contacts involved in the meeting. "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* `CONTACTS` is a comma-separated string of names."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `LOCATION` is the location of the meeting."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source:**Note:** "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "claraadora"
        },
        "content": "`CONTACTS` has no relation to the contacts in your contact list. Hence, you are free to add those"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "claraadora"
        },
        "content": "who are not in your contact list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Input an estimate end date time for the meeting if there is none specified."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add t/Discuss app requirements d/Refine with business associates from/12-12-2020 09:00 to/12-12-2020 10:00 c/3,6,9`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a meeting with the title `Discuss app requirements`, description `Refine with business associates`, "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "claraadora"
        },
        "content": "start date time `12-12-2020 09:00`, end date time `12-12-2020 10:00`, and contacts `3,6,9`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add t/User research review from/15-12-2020 13:00 to/15-12-2020 15:00 l/Meeting room A` "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "adds a meeting with the title `User research review`, start date time `15-12-2020 13:00`, "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "claraadora"
        },
        "content": "end date time `15-12-2020 15:00`, and location `Meeting room A`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Editing a meeting: `edit`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Edits an existing meeting in your meeting list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `edit INDEX [t/TITLE] [d/DESCRIPTION] [from/FROM] [to/TO] [c/CONTACTS] [l/LOCATION]`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the meeting in your displayed meeting list."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* At least one of the optional fields must be provided. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified meeting will be updated to the input values."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `edit 2 t/Discuss final release features d/Finalize dashboard functions`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "edits the title of the 2nd meeting to be `Discuss final release features` "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "and its description to be `Finalize dashboard functions`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `edit 4 c/3,6,8` edits the contacts of the 4th meeting to be `3,6,8`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Finding meetings: `find`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Finds the meetings whose titles or descriptions contain any of the given keywords."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Format: `find KEYWORDS`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `KEYWORDS` contains one or more keywords used to match meetings."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Searches only consider title and description."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Searches are case-insensitive, e.g. `version` will match `Version`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Order of keywords does not matter, e.g. `v1.2 mid` will match `mid v1.2`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Searches only account for full words, e.g. `Meeting` will not match `Meetings`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* Searches return meetings matching at least one keyword, e.g. `Complete game` will return `Complete features` and `Final game`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `find discuss user guide John` returns a meeting with title `discuss user guide` and another with description `with Mr John`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* `find Mcdonalds` returns a meeting with title `Meet Mcdonalds` and another with description `Cater Mcdonalds breakfast`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#### Listing all meetings: `list`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Shows a list of all meetings in your meeting list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**Tip:** Use this command when you want to list all your meetings back after using the `find` command. "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "Refer to [Finding meetings](#finding-meetings-find) above for details of the `find` command. "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Deleting a meeting: `delete`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Deletes the specified meeting from your meeting list."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `INDEX` is the index number of the meeting in your displayed meeting list."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* `delete 3` deletes the 3rd meeting in your meeting list."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "#### Viewing a meeting: `view`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Displays more details of the specified meeting from your meeting list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `INDEX` is the index number of the meeting in your displayed meeting list."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `INDEX` must be a positive integer."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `view 2` views the 2nd meeting in your meeting list."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   ![Ui](images/MeetingView.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   \u003cfigcaption\u003eViewing a meeting\u003c/figcaption\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "claraadora"
        },
        "content": "#### Clearing all meetings: `clear`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Clears all meetings from your meeting list."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Exiting *Productiv*: `exit`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* Words after `exit` will be ignored, e.g. `exit please` will exit *Productiv*."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "claraadora"
        },
        "content": "*Productiv* automatically saves any changes that you made, to your computer\u0027s hard disk. "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Hence, you can focus on managing your product without fearing any unsaved changes. "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**Q**: How do I start using *Productiv*?\u003cbr\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**A**: You can refer to our [Quick Start Guide](#quick-start)."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**Q**: Which operating systems can I run *Productiv* on?\u003cbr\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "**A**: Currently, *Productiv* is supported on both Mac and Windows. Just ensure "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "that you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "creates with the file that contains the data of your previous *Productiv* app."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Switch** | `switch MODE` \u003cbr\u003e e.g. `switch deliverable`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Add (Contact)** | `add r/ROLE n/NAME [p/PHONE] e/EMAIL [d/DESCRIPTION]` \u003cbr\u003e e.g. `add r/stk n/Jenny Ho e/jennyho@pmail.com`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Edit (Meeting)** | `edit INDEX [t/TITLE] [desc/DESCRIPTION] [from/FROM] [to/TO] [c/CONTACTS] [l/LOCATION]` \u003cbr\u003e e.g. `edit 2 l/Level 8 Meeting Room 1`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Mark Done (Deliverable)** | `done INDEX` \u003cbr\u003e e.g. `done 2`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Find** | `find KEYWORDS` \u003cbr\u003e e.g. `find Bond James`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "claraadora"
        },
        "content": "**View** | `view INDEX` \u003cbr\u003e e.g. `view 2`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "---------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "\\# |            Term                | Description"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "---|--------------------------------|------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1  | Command Line Interface (CLI)   | A text-based user interface (UI) used to view and manage computer files.                       |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "2  | Graphical User Interface (GUI) | A system of interactive visual components for computer software.                               |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "3  | Deliverable                    | An item which needs to be completed by a specified time.                                       |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "4  | Stakeholder                    | An external party involved with the product.                                                   |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "5  | Milestone                      | A stage in the software development process associated with a particular group of deliverables |"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 155,
      "shadowezz": 82,
      "-": 116,
      "chrystalquek": 46,
      "claraadora": 44,
      "MerlinLim": 31
    }
  },
  {
    "path": "docs/_sass/minima/_base.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "html {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: $base-font-size;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Reset some basic elements"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "body, h1, h2, h3, h4, h5, h6,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "p, blockquote, pre, hr,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "dl, dd, ol, ul, figure {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  margin: 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Basic styling"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $text-color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: $background-color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  -webkit-text-size-adjust: 100%;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  -webkit-font-feature-settings: \"kern\" 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     -moz-font-feature-settings: \"kern\" 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "       -o-font-feature-settings: \"kern\" 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          font-feature-settings: \"kern\" 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  font-kerning: normal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  min-height: 100vh;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  flex-direction: column;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  overflow-wrap: break-word;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Set `margin-bottom` to maintain vertical rhythm"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h1, h2, h3, h4, h5, h6,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "p, blockquote, pre,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "ul, ol, dl, figure,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "%vertical-rhythm {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit / 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "hr {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-top: $spacing-unit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " * `main` element"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "main {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " * Images"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "img {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  max-width: 100%;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  vertical-align: middle;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " * Figures"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "figure \u003e img {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "figcaption {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: $small-font-size;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "  color: #2e7d32;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "  text-align: center;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "  font-style: italic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "ul, ol {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-left: $spacing-unit;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "li {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e ul,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e ol {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " * Headings"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "h1, h2, h3, h4, h5, h6 {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "  font-weight: $base-font-weight;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": " * Links"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $link-base-color;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  text-decoration: none;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026:visited {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $link-visited-color;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026:hover {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $text-color;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: underline;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  .social-media-list \u0026:hover {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    .username {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      text-decoration: underline;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Blockquotes"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $brand-color;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  border-left: 4px solid $brand-color-light;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  padding-left: $spacing-unit / 2;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.125);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "  font-style: italic;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e :last-child {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  i, em {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " * Code formatting"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "pre,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "code {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  font-family: $code-font-family;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: 0.9375em;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  border: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "  border-radius: 3px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: $code-background-color;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "code {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: 1px 5px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "pre {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: 8px 12px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  overflow-x: auto;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e code {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  border-radius: 3px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "  background: $code-background-color;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "  @extend %vertical-rhythm;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "  .highlighter-rouge \u0026 {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    background: $code-background-color;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Wrapper"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".wrapper {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  max-width: calc(#{$content-width} - (#{$spacing-unit}));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-right: auto;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-left: auto;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  padding-right: $spacing-unit / 2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "  padding-left: $spacing-unit / 2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  @extend %clearfix;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: $spacing-unit;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: $spacing-unit;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Clearfix"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "%clearfix:after {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  content: \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  display: table;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  clear: both;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " * Icons"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".orange {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  color: #f66a0a;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".grey {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "  color: #828282;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " * Tables"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  width: 100%;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: $table-text-align;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $table-text-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  border-collapse: collapse;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "  border: 1px solid $table-border-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "  tr {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0026:nth-child(even) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "      background-color: $table-zebra-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  th, td {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: ($spacing-unit / 3) ($spacing-unit / 2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "  th {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: $table-header-bg-color;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 1px solid $table-header-border;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  td {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 1px solid $table-border-color;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "  @include media-query($on-laptop) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow-x: auto;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-overflow-scrolling: touch;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            -ms-overflow-style: -ms-autohiding-scrollbar;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 272,
      "claraadora": 4
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Participant \":Model\" as modelPerson MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Participant \":Storage\" as storagePerson STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "logic -[LOGIC_COLOR]\u003e modelPerson : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate modelPerson MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "modelPerson -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate modelPerson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storagePerson : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate storagePerson STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "storagePerson -[STORAGE_COLOR]\u003e storagePerson : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate storagePerson STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "storagePerson --[STORAGE_COLOR]\u003e storagePerson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate storagePerson"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "storagePerson --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate storagePerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "chrystalquek": 14
    }
  },
  {
    "path": "docs/diagrams/AutosortSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "participant \":UniqueMeetingList\" as UniqueMeetingList MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "participant \":ObservableList\" as ObservableList MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:Collections\" as Collections MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "[-\u003e UniqueMeetingList : add(meeting)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "activate UniqueMeetingList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "UniqueMeetingList -\u003e ObservableList : add(meeting)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "activate ObservableList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "ObservableList --\u003e UniqueMeetingList :"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "UniqueMeetingList -\u003e UniqueMeetingList : sortList()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "activate UniqueMeetingList #DarkSalmon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "UniqueMeetingList -\u003e Collections : sort(list, meetingComparator)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "activate Collections"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Collections --\u003e UniqueMeetingList :"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "deactivate Collections"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "[\u003c--UniqueMeetingList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "deactivate UniqueMeetingList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claraadora": 32
    }
  },
  {
    "path": "docs/diagrams/DateTimeClass.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class Meeting MODEL_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class From MODEL_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class To MODEL_COLOR_T3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class Deliverable MODEL_COLOR_T4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class Deadline MODEL_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Class DateTime MODEL_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Meeting *-- From"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Meeting *-- To"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Deliverable *-- Deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "From --|\u003e DateTime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "To --|\u003e DateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Deadline --|\u003e DateTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 23
    }
  },
  {
    "path": "docs/diagrams/OCPSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "participant \":DeliverableModel\" as Mod MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "participant \":TotalNumDeliverables\" as Total LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "participant \":NumCompletedDeliverables\" as Com LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "participant \":OCP\" as OCP LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[-\u003e Mod: add(deliverable)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Mod"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Mod -\u003e Total : add(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Total"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Total -\u003e OCP : update()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate OCP"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "OCP --\u003e Total"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate OCP"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Total --\u003e Mod"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Total"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[\u003c-- Mod"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Mod"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[-\u003e Mod: done(deliverable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Mod"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Mod -\u003e Com : add(1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Com"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Com -\u003e \":OCP\" as OCP: update()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate OCP"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "OCP --\u003e Com"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate OCP"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Com --\u003e Mod"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Com"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[\u003c-- Mod"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Mod"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[-\u003e Mod: delete(deliverable)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Mod"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "opt isCompleted(deliverable)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Mod -\u003e Com : sub(1)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Com"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Com -\u003e \":OCP\" as OCP: update()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate OCP"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "OCP --\u003e Com"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate OCP"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Com --\u003e Mod"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Com"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "end"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Mod -\u003e Total : sub(1)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate Total"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Total -\u003e \":OCP\" as OCP: update()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "activate OCP"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "OCP --\u003e Total"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate OCP"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Total --\u003e Mod"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Total"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[\u003c-- Mod"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deactivate Mod"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 67
    }
  },
  {
    "path": "docs/diagrams/SwitchModeSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "participant \":LogicModeManager\" as LogicModeManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "participant \":ModeParser\" as ModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "participant \":SwitchCommandParser\" as SwitchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "participant \":SwitchCommand\" as SwitchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[-\u003e MainWindow : executeCommand(switchMode)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "MainWindow -\u003e LogicModeManager : execute(switchMode)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate LogicModeManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "LogicModeManager -\u003e ModeParser : parseCommand(switchMode)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate ModeParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "create SwitchCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "ModeParser -\u003e SwitchCommandParser: SwitchCommandParser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate SwitchCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommandParser --\u003e ModeParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate SwitchCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "ModeParser -\u003e SwitchCommandParser: parse(arguments)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate SwitchCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "create SwitchCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommandParser -\u003e SwitchCommand: SwitchCommand(arguments)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate SwitchCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommand --\u003e SwitchCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate SwitchCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommandParser --\u003e ModeParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate SwitchCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "ModeParser --\u003e LogicModeManager : command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate ModeParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "destroy SwitchCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "LogicModeManager -\u003e SwitchCommand : execute()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate SwitchCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommand --\u003e LogicModeManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate SwitchCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "SwitchCommand -[hidden]-\u003e LogicModeManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "destroy SwitchCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "LogicModeManager --\u003e MainWindow : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate LogicModeManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "MainWindow -\u003e MainWindow: switchMode(mode)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "MainWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[\u003c--MainWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 65
    }
  },
  {
    "path": "docs/diagrams/ViewCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "participant \":DeliverableLogicManager\" as DeliverableLogicManager LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "participant \":DeliverableBookParser\" as DeliverableBookParser LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "participant \":ViewCommandParser\" as ViewCommandParser LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "participant \":ModelDeliverable\" as ModelDeliverable MODEL_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[-\u003e DeliverableLogicManager : execute(\"view 2\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate DeliverableLogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "DeliverableLogicManager -\u003e DeliverableBookParser : parseCommand(\"view 2\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate DeliverableBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "create ViewCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "DeliverableBookParser -\u003e ViewCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommandParser --\u003e DeliverableBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "DeliverableBookParser -\u003e ViewCommandParser : parse(\"view 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "create ViewCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommandParser -\u003e ViewCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommand --\u003e ViewCommandParser : v"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommandParser --\u003e DeliverableBookParser : v"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "DeliverableBookParser --\u003e DeliverableLogicManager : v"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate DeliverableBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "DeliverableLogicManager -\u003e ViewCommand : execute()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommand -\u003e ModelDeliverable : setDeliverableInView(deliverable)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "activate ModelDeliverable"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ModelDeliverable --\u003e ViewCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate ModelDeliverable"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "ViewCommand --\u003e DeliverableLogicManager : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "destroy ViewCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[\u003c-- DeliverableLogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deactivate DeliverableLogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 59
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "title: Productiv"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "***Productive* is a desktop application for product managers like yourself to organise your product-related information.** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "While it has a Graphical User "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Interface, most of your user interactions will happen through a Command Line Interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Want to be **productive** in managing your **product**? Head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start) to get started!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Otherwise, for those keen on developing *Productiv*, you may have a look at our [**Developer Guide**](DeveloperGuide.html)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 8,
      "-": 12
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "## Add `Remark` to the modelPerson"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storagePerson of person data. We achieve that by working with the `Person` modelPerson. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Create a new `Remark` in `seedu.address.modelPerson.person.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ":exclamation: You must delete AddressBook’s storagePerson file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 382,
      "chrystalquek": 11,
      "claraadora": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` modelPerson to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.modelPerson.person.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "chrystalquek": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute(modelPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            //We can deduce that the previous line of code modifies modelPerson in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveAddressBook(modelPerson.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 modelPerson.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `modelPerson`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. We can a closer look at how storagePerson works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 241,
      "chrystalquek": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverableManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeetingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicModeManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPersonManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.DeliverableBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.JsonDeliverableBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverableManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.MeetingBookStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeetingManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.AddressBookStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.person.StoragePerson;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected LogicPerson logicPerson;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected StoragePerson storagePerson;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected ModelPerson modelPerson;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected StorageDeliverable storageDeliverable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected StorageMeeting storageMeeting;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected ModelMeeting modelMeeting;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected LogicMode logicMode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Productiv ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBookStorage deliverableBookStorage \u003d new JsonDeliverableBookStorage("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                userPrefs.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                userPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storagePerson \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        storageDeliverable \u003d new StorageDeliverableManager(deliverableBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        storageMeeting \u003d new StorageMeetingManager(meetingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d initModelManager(storagePerson, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable \u003d initDeliverableModelManager(storageDeliverable, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting \u003d initMeetingModelManager(storageMeeting, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicPerson \u003d new LogicPersonManager(modelPerson, storagePerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logicDeliverable \u003d new LogicDeliverableManager(modelDeliverable, storageDeliverable);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logicMeeting \u003d new LogicMeetingManager(modelMeeting, storageMeeting);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicMode \u003d new LogicModeManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ui \u003d new UiManager(logicMode, logicPerson, logicDeliverable, logicMeeting);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a {@code ModelPerson} with the data from {@code storagePerson}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storagePerson}\u0027s address book is not found,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storagePerson}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson initModelManager(StoragePerson storagePerson, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            addressBookOptional \u003d storagePerson.readAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new ModelPersonManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a {@code ModelDeliverable} with the data from {@code storageDeliverable}\u0027s deliverable book and"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e The data from the sample deliverable book will be used instead"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * if {@code storageDeliverable}\u0027s deliverable book is not found, or an empty deliverable book will be used instead"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * if errors occur when reading {@code storageDeliverable}\u0027s deliverable book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private ModelDeliverable initDeliverableModelManager(StorageDeliverable storageDeliverable,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                                                         ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Optional\u003cReadOnlyDeliverableBook\u003e deliverableBookOptional;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ReadOnlyDeliverableBook initialData;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            deliverableBookOptional \u003d storageDeliverable.readDeliverableBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (!deliverableBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                logger.info(\"Data file for deliverable not found. Will be starting with a sample DeliverableBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d deliverableBookOptional.orElseGet(SampleDataUtil::getSampleDeliverableBook);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.warning(\"Data file for deliverable not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    + \"Will be starting with an empty DeliverableBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.warning(\"Problem while reading from the deliverable file. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    + \"Will be starting with an empty DeliverableBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new ModelDeliverableManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a {@code ModelMeeting} with the data from {@code storageMeeting}\u0027s meeting book and {@code userPrefs}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * \u003cbr\u003e The data from the sample meeting book will be used instead if {@code storageMeeting}\u0027s meeting book is"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * not found, or an empty meeting book will be used instead if errors occur"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * when reading {@code storageMeeting}\u0027s meeting book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ModelMeeting initMeetingModelManager(StorageMeeting storageMeeting,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                                                 ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Optional\u003cReadOnlyMeetingBook\u003e meetingBookOptional;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ReadOnlyMeetingBook initialData;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meetingBookOptional \u003d storageMeeting.readMeetingBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (!meetingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                logger.info(\"Data file for meeting not found. Will be starting with a sample MeetingBook\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d meetingBookOptional.orElseGet(SampleDataUtil::getSampleMeetingBook);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.warning(\"Data file for meeting not in the correct format. \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Will be starting with an empty MeetingBook\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.warning(\"Problem while reading from the meeting file. \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Will be starting with an empty MeetingBook\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new ModelMeetingManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logger.info(\"Starting Productiv \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Productiv ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveUserPrefs(modelPerson.getUserPrefs());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            // for testing"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storageDeliverable.saveDeliverableBook(modelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            storageMeeting.saveMeetingBook(modelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "shadowezz": 51,
      "-": 158,
      "chrystalquek": 34,
      "claraadora": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/ModeEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.StringUtil.getStringJoinedBySeparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum ModeEnum {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DASHBOARD(\"Dashboard\", \"dashboard\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DELIVERABLE(\"Deliverable\", \"deliverable\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    MEETING(\"Meeting\", \"meeting\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    PERSON(\"Contact\", \"contact\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    ModeEnum(String name, String argument) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ModeEnum getEnumByArgument(String argument) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (ModeEnum modeEnum : ModeEnum.values()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (modeEnum.argument.equals(argument)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return modeEnum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String getModeOptions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return getStringJoinedBySeparator(Arrays.stream(ModeEnum.values()).map(role -\u003e role.getArgument()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \" or \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"Invalid contact index!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX \u003d \"Invalid deliverable index!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"Invalid meeting index!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERABLE_COMPLETED \u003d \"Deliverable is already marked done!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d contact(s) listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_DELIVERABLES_LISTED_OVERVIEW \u003d \"%1$d deliverable(s) listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "-": 10,
      "chrystalquek": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a String with elements in stream joined by separator."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Use for validation regex, options, etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param stream Stream with elements of type String"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String with elements in stream joined by separator"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String getStringJoinedBySeparator(Stream\u003cString\u003e stream, String separator) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return stream.collect(Collectors.joining(separator));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "chrystalquek": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * API of logic component for deliverable (should only have one interface for logic, change later)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface LogicDeliverable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the DeliverableBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see ModelDeliverable#getDeliverableBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyDeliverableBook getDeliverableBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of deliverables */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getFilteredDeliverableList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the deliverable that is currently in view */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Deliverable getDeliverableInView();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.deliverable.DeliverableBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Logic manager for deliverables"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class LogicDeliverableManager implements LogicDeliverable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to deliverable file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicDeliverableManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final StorageDeliverable storageDeliverable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final DeliverableBookParser deliverableBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code LogicDeliverableManager} with the given {@code ModelDeliverable}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and {@code StorageDeliverable}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public LogicDeliverableManager(ModelDeliverable modelDeliverable, StorageDeliverable storageDeliverable) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.modelDeliverable \u003d modelDeliverable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.storageDeliverable \u003d storageDeliverable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookParser \u003d new DeliverableBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Command command \u003d deliverableBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        commandResult \u003d command.execute(modelDeliverable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storageDeliverable.saveDeliverableBook(modelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getDeliverableBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getFilteredDeliverableList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable getDeliverableInView() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getDeliverableInView();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * API of logic component for meeting"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface LogicMeeting {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the MeetingBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see ModelMeeting#getMeetingBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the meeting that is currently in view."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Meeting getMeetingInView();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Meetings */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 Meeting book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 5,
      "claraadora": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.meeting.MeetingBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Manages the logic for the meeting feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class LogicMeetingManager implements LogicMeeting {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to meeting file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicMeetingManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ModelMeeting modelMeeting;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final StorageMeeting storageMeeting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final MeetingBookParser meetingBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code LogicMeetingManager} with the given {@code ModelMeeting} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public LogicMeetingManager(ModelMeeting modelMeeting, StorageMeeting storageMeeting) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.modelMeeting \u003d modelMeeting;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.storageMeeting \u003d storageMeeting;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookParser \u003d new MeetingBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Command command \u003d meetingBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        commandResult \u003d command.execute(modelMeeting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            storageMeeting.saveMeetingBook(modelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getMeetingBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Meeting getMeetingInView() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelMeeting.getMeetingInView();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 5,
      "claraadora": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface LogicMode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String commandText);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicModeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.mode.ModeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicModeManager implements LogicMode {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicModeManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeParser modeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public LogicModeManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.modeParser \u003d new ModeParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Command command \u003d modeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String commandText) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modeParser.isModeCommand(commandText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface LogicPerson {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see ModelPerson#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the person currently in view. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Person getPersonInView();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "-": 46,
      "chrystalquek": 4,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicPersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.person.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicPersonManager implements LogicPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicPersonManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModelPerson modelPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final StoragePerson storagePerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public LogicPersonManager(ModelPerson modelPerson, StoragePerson storagePerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.modelPerson \u003d modelPerson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.storagePerson \u003d storagePerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute(modelPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveAddressBook(modelPerson.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Person getPersonInView() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelPerson.getPersonInView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getAddressBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "-": 63,
      "chrystalquek": 17,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeEnum mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, ModeEnum mode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this(feedbackToUser, false, false, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModeEnum getMode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 mode \u003d\u003d otherCommandResult.mode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, mode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "-": 67,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Adds a deliverable to the deliverable book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deliverable to the deliverable book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + PREFIX_MILESTONE + \"MILESTONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_CONTACTS + \"CONTACTS]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_TITLE + \"Login screen \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + PREFIX_MILESTONE + \"1.0 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Must include username and password fields \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DEADLINE + \"12-12-2020 23:59 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_CONTACTS + \"2,4\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deliverable added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \"This deliverable already exists in the deliverable book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Deliverable toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deliverable}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public AddCommand(Deliverable deliverable) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        toAdd \u003d deliverable;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (modelDeliverable.hasDeliverable(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.addDeliverable(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 10,
      "shadowezz": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Clears the deliverable book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deliverable book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setDeliverableBook(new DeliverableBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a command for deliverable with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param modelDeliverable {@code ModelDeliverable} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public abstract CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Deletes a deliverable identified using it\u0027s displayed index from the deliverable book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \": Deletes the deliverable identified by the index number used in the displayed deliverable list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_DELETE_DELIVERABLE_SUCCESS \u003d \"Deliverable deleted:  %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.deleteDeliverable(deliverableToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DELIVERABLE_SUCCESS, deliverableToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.model.deliverable.ModelDeliverable.PREDICATE_SHOW_ALL_DELIVERABLES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Completes a deliverable"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final boolean COMPLETED \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DONE_DELIVERABLE_SUCCESS \u003d \"Marked deliverable as done: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \": Marks as done the deliverable identified by the index number used in the displayed deliverable list\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Construct command given index of deliverable to complete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param targetIndex specified index of deliverable to complete."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable deliverableToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (deliverableToComplete.getIsComplete()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_COMPLETED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable completedDeliverable \u003d createCompletedDeliverable(deliverableToComplete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setDeliverable(deliverableToComplete, completedDeliverable);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_DELIVERABLE_SUCCESS, deliverableToComplete));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Deliverable createCompletedDeliverable(Deliverable deliverableToComplete) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Title title \u003d deliverableToComplete.getTitle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Milestone milestone \u003d deliverableToComplete.getMilestone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        OptionalDescription description \u003d deliverableToComplete.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deadline deadline \u003d deliverableToComplete.getDeadline();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Contacts contacts \u003d deliverableToComplete.getContacts();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable(title, milestone, description, deadline, COMPLETED, contacts);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 9,
      "shadowezz": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.model.deliverable.ModelDeliverable.PREDICATE_SHOW_ALL_DELIVERABLES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Edits the details of an existing deliverable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deliverable identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"by the index number used in the displayed deliverable list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_MILESTONE + \"MILESTONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_CONTACTS + \"CONTACTS]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_TITLE + \"Finalise beta release features \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DEADLINE + \"2021-01-10 12:00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_EDIT_DELIVERABLE_SUCCESS \u003d \"Edited Deliverable: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d \"This deliverable already exists.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final EditDeliverableDescriptor editDeliverableDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param index                 of the deliverable in the filtered deliverable list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param editDeliverableDescriptor details to edit the deliverable with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditCommand(Index index, EditDeliverableDescriptor editDeliverableDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(editDeliverableDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.editDeliverableDescriptor \u003d new EditDeliverableDescriptor(editDeliverableDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedDeliverable \u003d createEditedDeliverable(deliverableToEdit, editDeliverableDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!deliverableToEdit.isSameDeliverable(editedDeliverable) \u0026\u0026 modelDeliverable.hasDeliverable("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                editedDeliverable)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.setDeliverable(deliverableToEdit, editedDeliverable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DELIVERABLE_SUCCESS, editedDeliverable));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates and returns a {@code Deliverable} with the details of {@code deliverableToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * edited with {@code editDeliverableDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private static Deliverable createEditedDeliverable("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Deliverable deliverableToEdit, EditDeliverableDescriptor editDeliverableDescriptor)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assert deliverableToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Title updatedTitle \u003d editDeliverableDescriptor.getTitle().orElse(deliverableToEdit.getTitle());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Milestone updatedMilestone \u003d editDeliverableDescriptor.getMilestone().orElse(deliverableToEdit.getMilestone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // Description takes optional String"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        OptionalDescription updatedDesc \u003d editDeliverableDescriptor.getDescription()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .orElse(deliverableToEdit.getDescription());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deadline updatedDeadline \u003d editDeliverableDescriptor.getDeadline().orElse(deliverableToEdit.getDeadline());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        boolean updatedIsComplete \u003d deliverableToEdit.getIsComplete();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // Contacts takes optional String"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Contacts updatedContacts \u003d editDeliverableDescriptor.getContacts().orElse(deliverableToEdit.getContacts());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Deliverable("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                updatedTitle, updatedMilestone, updatedDesc, updatedDeadline, updatedIsComplete, updatedContacts);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 editDeliverableDescriptor.equals(e.editDeliverableDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Stores the details to edit the deliverable with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * corresponding field value of the deliverable."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static class EditDeliverableDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private Milestone milestone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private OptionalDescription description;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private boolean isComplete;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private Contacts contacts;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public EditDeliverableDescriptor() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         * Copy attributes from deliverable to be edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         * @param toCopy deliverable to be edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public EditDeliverableDescriptor(EditDeliverableDescriptor toCopy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setMilestone(toCopy.milestone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setIsComplete(toCopy.isComplete);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            setContacts(toCopy.contacts);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, milestone, description, deadline, contacts);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(this.title);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setMilestone(Milestone milestone) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cMilestone\u003e getMilestone() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(this.milestone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDescription(OptionalDescription description) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cOptionalDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setIsComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsComplete() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(this.isComplete);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setContacts(Contacts contact) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.contacts \u003d contact;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Optional\u003cContacts\u003e getContacts() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return Optional.ofNullable(this.contacts);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (!(other instanceof EditDeliverableDescriptor)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            EditDeliverableDescriptor e \u003d (EditDeliverableDescriptor) other;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    \u0026\u0026 getMilestone().equals(e.getMilestone())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    \u0026\u0026 getIsComplete().equals(e.getIsComplete())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    \u0026\u0026 getContacts().equals(e.getContacts());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabztcr": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Finds and lists all deliverables in deliverable book whose title and/or description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all deliverables whose title and/or \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"description contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" homepage navigation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final TitleDescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public FindCommand(TitleDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                String.format(Messages.MESSAGE_DELIVERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                        modelDeliverable.getFilteredDeliverableList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Lists all deliverables in the deliverable book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all deliverables\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(ModelDeliverable.PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * View a deliverable by displaying its details in the side panel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_VIEW_DELIVERABLE_SUCCESS \u003d \"Viewing deliverable: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \": Views the details of the deliverable identified by the index number used in the deliverable list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Construct command given index of deliverable to view."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param targetIndex specified index of deliverable to view."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable deliverableToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setDeliverableInView(deliverableToView);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_DELIVERABLE_SUCCESS, deliverableToView));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 49,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the meeting book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"[\" + PREFIX_CONTACTS + \"CONTACTS] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TITLE + \"Discuss user requirements with biz associates \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refer to the reviewed user stories during discussion \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_FROM + \"30-12-2020 12:00 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TO + \"30-12-2020 14:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_CONTACTS + \"1,3,5 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + PREFIX_LOCATION + \"Room 1A\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in the meeting book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Meeting toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a MeetingCommand to add the specified {@code Meeting}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public AddCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        toAdd \u003d meeting;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (modelMeeting.hasMeeting(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting.addMeeting(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof AddCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 58,
      "MerlinLim": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Clears the meeting book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meeting book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting.setMeetingBook(new MeetingBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a meeting command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param modelMeeting {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public abstract CommandResult execute(ModelMeeting modelMeeting) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Deletes a meeting given the specified index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Meeting Deleted: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a meeting.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Construct command given index of meeting to delete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param targetIndex specified index of meeting to delete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof DeleteCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "MerlinLim": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.model.meeting.ModelMeeting.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Edits the details of an existing meeting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the meeting identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"by the index number used in the displayed meeting list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_FROM + \"FROM] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_TO + \"TO] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_CONTACTS + \"CONTACTS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + PREFIX_TITLE + \"Discuss ALL features \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + PREFIX_FROM + \"2020-12-31 09:00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_EDIT_MEETING_SUCCESS \u003d \"Edited Meeting: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final EditMeetingDescriptor editMeetingDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param index                 of the meeting in the filtered meeting list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param editMeetingDescriptor details to edit the meeting with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditCommand(Index index, EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(editMeetingDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.editMeetingDescriptor \u003d new EditMeetingDescriptor(editMeetingDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting editedMeeting;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            editedMeeting \u003d createEditedMeeting(meetingToEdit, editMeetingDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        assert Meeting.isValidFromAndTo(editedMeeting.getFrom(), editedMeeting.getTo())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                : \"From should be earlier than To\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (!meetingToEdit.isSameMeeting(editedMeeting) \u0026\u0026 modelMeeting.hasMeeting(editedMeeting)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.setMeeting(meetingToEdit, editedMeeting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assert meetingToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Title updatedTitle \u003d editMeetingDescriptor.getTitle().orElse(meetingToEdit.getTitle());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Description takes optional String"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        OptionalDescription updatedDesc \u003d editMeetingDescriptor.getDescription()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .orElse(meetingToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        From updatedFrom \u003d editMeetingDescriptor.getFrom().orElse(meetingToEdit.getFrom());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        To updatedTo \u003d editMeetingDescriptor.getTo().orElse(meetingToEdit.getTo());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Contacts takes optional String"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Contacts updatedContacts \u003d editMeetingDescriptor.getContacts().orElse(meetingToEdit.getContacts());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Location takes optional String"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Location updatedLocation \u003d editMeetingDescriptor.getLocation().orElse(meetingToEdit.getLocation());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new Meeting(updatedTitle, updatedDesc, updatedFrom, updatedTo, updatedContacts, updatedLocation);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 editMeetingDescriptor.equals(e.editMeetingDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static class EditMeetingDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private OptionalDescription description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private From from;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private To to;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private Contacts contacts;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public EditMeetingDescriptor() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         * Copy attributes from meeting to be edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         * @param toCopy meeting to be edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public EditMeetingDescriptor(EditMeetingDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setFrom(toCopy.from);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setTo(toCopy.to);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setContacts(toCopy.contacts);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.title);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setDescription(OptionalDescription description) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cOptionalDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setFrom(From from) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.from \u003d from;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cFrom\u003e getFrom() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.from);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setTo(To to) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.to \u003d to;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cTo\u003e getTo() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.to);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setContacts(Contacts contact) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.contacts \u003d contact;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cContacts\u003e getContacts() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.contacts);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.location);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            if (!(other instanceof EditMeetingDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            EditMeetingDescriptor e \u003d (EditMeetingDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getContacts().equals(e.getContacts())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 6,
      "shadowezz": 1,
      "MerlinLim": 220,
      "claraadora": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Finds and lists all meeting in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all meetings whose names and/or \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"descriptions contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob user\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_MEETINGS_LISTED_OVERVIEW \u003d \"%1$d meetings listed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final TitleDescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public FindCommand(TitleDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, modelMeeting.getFilteredMeetingList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.model.meeting.ModelMeeting.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * View a meeting by displaying its details in the side panel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_VIEW_MEETING_SUCCESS \u003d \"Viewing meeting: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \": Views the details of the meeting identified by the index number used in the meeting list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Construct command given index of meeting to view."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param targetIndex specified index of meeting to view."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Meeting meetingToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelMeeting.setMeetingInView(meetingToView);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_MEETING_SUCCESS, meetingToView));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 49,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Productiv as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 14,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 17,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Switches the mode of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches mode. Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + ModeEnum.getModeOptions()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \" \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" contact\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode switched to: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeEnum mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a SwitchCommand to switch the specified {@code ModeEnum}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public SwitchCommand(ModeEnum mode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mode), false, false, mode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 mode.equals(((SwitchCommand) other).mode)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "chrystalquek": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a contact to the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_ROLE + \"stk \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_DESCRIPTION + \"End user\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contact added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (modelPerson.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "chrystalquek": 15,
      "claraadora": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "chrystalquek": 3,
      "claraadora": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param modelPerson {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract CommandResult execute(ModelPerson modelPerson) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 16,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \": Deletes the contact identified by the index number used in the displayed contact list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Contact: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chrystalquek": 7,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the contact identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"by the index number used in the displayed contact list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Contact: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 modelPerson.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        OptionalDescription updatedDescription \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                editPersonDescriptor.getDescription().orElse(personToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role updatedRole \u003d personToEdit.getRole();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedRole, updatedDescription);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        private OptionalDescription description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public void setDescription(OptionalDescription description) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public Optional\u003cOptionalDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 165,
      "chrystalquek": 30,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all contacts whose names and/or \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"descriptions contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob user\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final NameDescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public FindCommand(NameDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, modelPerson.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "chrystalquek": 10,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all contacts\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "chrystalquek": 4,
      "claraadora": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * View a contact by displaying its details in the side panel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_VIEW_CONTACT_SUCCESS \u003d \"Viewing contact: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \": Views the details of the contact identified by the index number used in the contact list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Construct command given index of contact to view."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param targetIndex specified index of contact to view."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Person personToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelPerson.setPersonInView(personToView);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_CONTACT_SUCCESS, personToView));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 48,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Parser that is able to parse Date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DATE_INVALID_FORMAT \u003d \"Date format should be either MM/DD/YYYY or MM/DD/YYYY HH:mm.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Note: Single digit (except for year) can start with leading zero.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses the given {@code String} to Date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected date format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Date parseDate(String strDate) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String formatWithMin \u003d \"y-M-d HH:mm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String formatWithoutMin \u003d \"y-M-d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new SimpleDateFormat(strDate.length() \u003e 11 ? formatWithMin : formatWithoutMin).parse(strDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(DATE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TokenizedUserInput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TokenizedUserInput {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    TokenizedUserInput(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static TokenizedUserInput getCommandWordArgumentsFromUserInput(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new TokenizedUserInput(commandWord, arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for deliverable"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MILESTONE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_CONTACTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_MILESTONE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                PREFIX_DEADLINE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Milestone milestone \u003d ParserUtil.parseMilestone(argMultimap.getValue(PREFIX_MILESTONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        OptionalDescription description \u003d ParserCommon.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Contacts contacts \u003d ParserCommon.parseContacts(argMultimap.getValue(PREFIX_CONTACTS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable deliverable \u003d new Deliverable(title, milestone, description, deadline, contacts);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new AddCommand(deliverable);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 12,
      "shadowezz": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to deliverable commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final Prefix PREFIX_MILESTONE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_CONTACTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 6,
      "shadowezz": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DeliverableBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses user input for deliverable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "shadowezz": 18,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.EditCommand.EditDeliverableDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MILESTONE, PREFIX_DESCRIPTION, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        PREFIX_CONTACTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor editDeliverableDescriptor \u003d new EditDeliverableDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            editDeliverableDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MILESTONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            editDeliverableDescriptor.setMilestone(ParserUtil.parseMilestone("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    argMultimap.getValue(PREFIX_MILESTONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // Description takes optional String"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            editDeliverableDescriptor.setDescription(ParserCommon.parseDescription("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            editDeliverableDescriptor.setDeadline(ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // Contacts takes optional String"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACTS).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            editDeliverableDescriptor.setContacts(ParserCommon.parseContacts(argMultimap.getValue(PREFIX_CONTACTS)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!editDeliverableDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new EditCommand(index, editDeliverableDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new FindCommand(new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses a {@code String milestone} into a {@code Milestone}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Milestone parseMilestone(String milestone) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(milestone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String trimmedMilestone \u003d milestone.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!Milestone.isValidMilestone(trimmedMilestone)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException(Milestone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Milestone(trimmedMilestone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 59,
      "shadowezz": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TO, PREFIX_FROM,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        PREFIX_CONTACTS, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_FROM, PREFIX_TO)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        OptionalDescription description \u003d ParserCommon.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        From from \u003d ParserUtil.parseFrom(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        To to \u003d ParserUtil.parseTo(argMultimap.getValue(PREFIX_TO).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Contacts contacts \u003d ParserCommon.parseContacts(argMultimap.getValue(PREFIX_CONTACTS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting meeting;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meeting \u003d new Meeting(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        assert Meeting.isValidFromAndTo(meeting.getFrom(), meeting.getTo()) : \"From should be earlier than To\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new AddCommand(meeting);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // TODO: Move the function up the hierarchy"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "claraadora": 73,
      "MerlinLim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_CONTACTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand.EditMeetingDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TO, PREFIX_FROM,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                        PREFIX_CONTACTS, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor editMeetingDescriptor \u003d new EditMeetingDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Description takes optional String"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setDescription(ParserCommon.parseDescription("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setFrom(ParserUtil.parseFrom(argMultimap.getValue(PREFIX_FROM).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setTo(ParserUtil.parseTo(argMultimap.getValue(PREFIX_TO).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Contacts takes optional String"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACTS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setContacts(ParserCommon.parseContacts(argMultimap"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .getValue(PREFIX_CONTACTS)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Location takes optional String"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            editMeetingDescriptor.setLocation(ParserUtil.parseLocation(argMultimap"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .getValue(PREFIX_LOCATION)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (!editMeetingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new EditCommand(index, editMeetingDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new FindCommand(new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/MeetingBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.meeting.ViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Parses user input for meeting."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Checks if user input is a mode command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return whether the user input is a mode command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean isMeetingCommand(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userInput.startsWith(Command.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 4,
      "claraadora": 64,
      "MerlinLim": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static To parseTo(String to) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(to);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedTo \u003d to.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!To.isValidTo(trimmedTo)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new To(trimmedTo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static From parseFrom(String from) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(from);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedFrom \u003d from.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!From.isValidFrom(trimmedFrom)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new From(trimmedFrom);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Location parseLocation(Optional\u003cString\u003e location) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new Location(location);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedLocation \u003d location.get().trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.meeting.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.deliverable.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mode/ModeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.TokenizedUserInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        TokenizedUserInput tokenizedUserInput \u003d TokenizedUserInput.getCommandWordArgumentsFromUserInput(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String commandWord \u003d tokenizedUserInput.getCommandWord();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String arguments \u003d tokenizedUserInput.getArguments();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Checks if user input is a mode command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return whether the user input is a mode command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String userInput) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return userInput.startsWith(SwitchCommand.COMMAND_WORD) || userInput.startsWith(ExitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || userInput.startsWith(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mode/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModeEnum mode \u003d ModeEnum.getEnumByArgument(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (mode \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new SwitchCommand(mode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        OptionalDescription description \u003d ParserCommon.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person person \u003d new Person(name, phone, email, role, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 38,
      "chrystalquek": 17,
      "claraadora": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.TokenizedUserInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        TokenizedUserInput tokenizedUserInput \u003d TokenizedUserInput.getCommandWordArgumentsFromUserInput(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String commandWord \u003d tokenizedUserInput.getCommandWord();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String arguments \u003d tokenizedUserInput.getArguments();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 4,
      "-": 45,
      "chrystalquek": 5,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "chrystalquek": 2,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            editPersonDescriptor.setDescription(ParserCommon.parseDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "chrystalquek": 7,
      "claraadora": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new FindCommand(new NameDescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "chrystalquek": 2,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Phone parsePhone(Optional\u003cString\u003e phone) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (phone.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Phone(phone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedPhone \u003d phone.get().trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses a {@code String role} into a {@code Role}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Role.getRole(trimmedRole);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "chrystalquek": 18,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.deliverable.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ParserCommon.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ParserCommon {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e description} into a {@code Description}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static OptionalDescription parseDescription(Optional\u003cString\u003e description) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new OptionalDescription(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedDescription \u003d description.get().trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!OptionalDescription.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new OptionalDescription(trimmedDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e contacts} into an {@code Contacts}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code contacts} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Contacts parseContacts(Optional\u003cString\u003e contacts) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contacts.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new Contacts(contacts);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedContacts \u003d contacts.get().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Contacts.isValidContacts(trimmedContacts)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Contacts(trimmedContacts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "claraadora": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "-": 16,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Path deliverableBookFilePath \u003d Paths.get(\"data\", \"deliverablebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Path meetingBookFilePath \u003d Paths.get(\"data\", \"meetingbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableBookFilePath(newUserPrefs.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetingBookFilePath(newUserPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBookFilePath(Path deliverableBookFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookFilePath \u003d deliverableBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookFilePath \u003d meetingBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 deliverableBookFilePath.equals(o.deliverableBookFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meetingBookFilePath.equals(o.meetingBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                deliverableBookFilePath, meetingBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(\"\\nLocal data address file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(\"\\nLocal data deliverable file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sb.append(\"\\nLocal data meeting file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 14,
      "-": 84,
      "claraadora": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/DeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.UniqueDeliverableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Wraps all data at the deliverable-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Duplicates are not allowed (by .isSameDeliverable comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBook implements ReadOnlyDeliverableBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final UniqueDeliverableList deliverables;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables \u003d new UniqueDeliverableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an DeliverableBook using the Deliverables in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook(ReadOnlyDeliverableBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortDeliverables();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sorts the contents of the deliverable list by Deadline in chronological order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void sortDeliverables() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deliverables.sortList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the contents of the deliverable list with {@code deliverables}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverables} must not contain duplicate deliverables."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverables.setDeliverables(deliverables);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Resets the existing data of this {@code DeliverableBook} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void resetData(ReadOnlyDeliverableBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverables(newData.getDeliverableList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //// deliverable-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the deliverable book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.contains(deliverable);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a deliverable to the deliverable book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must not already exist in the deliverable book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addDeliverable(Deliverable p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.add(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the given deliverable {@code target} in the list with {@code editedDeliverable}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(editedDeliverable);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.setDeliverable(target, editedDeliverable);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Removes {@code key} from this {@code DeliverableBook}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code key} must exist in the deliverable book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void removeDeliverable(Deliverable key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.asUnmodifiableObservableList().size() + \" deliverables\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getDeliverableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof DeliverableBook // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 deliverables.equals(((DeliverableBook) other).deliverables));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 8,
      "shadowezz": 115,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ModelDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Api of Model component of Deliverable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface ModelDeliverable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Predicate\u003cDeliverable\u003e PREDICATE_SHOW_ALL_DELIVERABLES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverableBookFilePath(Path deliverableBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces deliverable book data with the data in {@code deliverableBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverableBook(ReadOnlyDeliverableBook deliverableBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the DeliverableBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyDeliverableBook getDeliverableBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the deliverable book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    boolean hasDeliverable(Deliverable deliverable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Deletes the given deliverable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must exist in the deliverable book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void deleteDeliverable(Deliverable target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds the given deliverable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverable} must not already exist in the deliverable book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void addDeliverable(Deliverable deliverable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the given deliverable {@code target} with {@code editedDeliverable}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverable(Deliverable target, Deliverable editedDeliverable);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Deliverable getDeliverableInView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverableInView(Deliverable deliverableInView);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deliverable list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getFilteredDeliverableList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Updates the filter of the filtered deliverable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void updateFilteredDeliverableList(Predicate\u003cDeliverable\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ModelDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents the in-memory model of the deliverable book data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ModelDeliverableManager implements ModelDeliverable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelDeliverableManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final DeliverableBook deliverableBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final FilteredList\u003cDeliverable\u003e filteredDeliverables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Deliverable deliverableInView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Initializes a ModelDeliverableManager with the given deliverableBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ModelDeliverableManager(ReadOnlyDeliverableBook deliverableBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(deliverableBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Initializing with deliverable book: \" + deliverableBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBook \u003d new DeliverableBook(deliverableBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        filteredDeliverables \u003d new FilteredList\u003c\u003e(this.deliverableBook.getDeliverableList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ModelDeliverableManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this(new DeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBookFilePath(Path deliverableBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefs.setDeliverableBookFilePath(deliverableBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverableBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBook(ReadOnlyDeliverableBook deliverableBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBook.resetData(deliverableBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableInView(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook.hasDeliverable(deliverable);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void deleteDeliverable(Deliverable target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (target.isSameDeliverable(deliverableInView)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            setDeliverableInView(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableBook.removeDeliverable(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableInView(deliverable);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        updateFilteredDeliverableList(PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(target, editedDeliverable);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBook.setDeliverable(target, editedDeliverable);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableInView(editedDeliverable);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable getDeliverableInView() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableInView;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableInView(Deliverable deliverableInView) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableInView \u003d deliverableInView;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deliverable List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getFilteredDeliverableList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return filteredDeliverables;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void updateFilteredDeliverableList(Predicate\u003cDeliverable\u003e predicate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        filteredDeliverables.setPredicate(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableInView(null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(obj instanceof ModelDeliverableManager)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ModelDeliverableManager other \u003d (ModelDeliverableManager) obj;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook.equals(other.deliverableBook)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 filteredDeliverables.equals(other.filteredDeliverables);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "shadowezz": 160,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ReadOnlyDeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Unmodifiable view of an deliverable book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface ReadOnlyDeliverableBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns an unmodifiable view of the deliverables list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * This list will not contain any duplicate deliverables."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getDeliverableList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable\u0027s deadline in the deliverable book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Deadline extends DateTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param deadline A valid Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        super(deadline);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                || (other instanceof Deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 value.equals(((Deadline) other).value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 34,
      "shadowezz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/Deliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.event.TimeEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable in the deliverable book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Deliverable implements TimeEvent {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Milestone milestone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final OptionalDescription description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final boolean isComplete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Contacts contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Only title and milestone field must be present. Used when adding new deliverable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deliverable(Title title, Milestone milestone, OptionalDescription description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                       Deadline deadline, Contacts contacts) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireAllNonNull(title, milestone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Used when editing or completing existing deliverable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deliverable(Title title, Milestone milestone, OptionalDescription description, Deadline deadline,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                       boolean isComplete, Contacts contacts) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Milestone getMilestone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return milestone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public OptionalDescription getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean getIsComplete() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Contacts getContacts() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public LocalDateTime getIndicatorTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return deadline.getLocalDateTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if both deliverables share the same title."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * This defines a weaker notion of equality between two deliverables."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isSameDeliverable(Deliverable otherDeliverable) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (otherDeliverable \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return otherDeliverable !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if both deliverables have the same identity and data fields."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * This defines a stronger notion of equality between two deliverables."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(other instanceof Deliverable)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable otherDeliverable \u003d (Deliverable) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return otherDeliverable.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 otherDeliverable.getMilestone().equals(getMilestone())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 otherDeliverable.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 otherDeliverable.getIsComplete() \u003d\u003d getIsComplete();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Objects.hash(title, milestone, description, deadline, contacts, isComplete);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                .append(\" Milestone: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                .append(getMilestone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Contacts: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getContacts());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 52,
      "shadowezz": 84,
      "claraadora": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/Milestone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a deliverable\u0027s milestone in the deliverable book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMilestone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Milestone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \"Milestone can only take numerical values separated by dots.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Milestone can only take numerical values separated with dots."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * First and last characters must both be numbers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d+)*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String PREFIX \u003d \"v\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code Milestone}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param milestone A valid milestone."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Milestone(String milestone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(milestone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkArgument(isValidMilestone(milestone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        value \u003d milestone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if a given string is a valid milestone."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static boolean isValidMilestone(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return PREFIX + value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof Milestone)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 value.equals(((Milestone) other).value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/TitleDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TitleDescriptionContainsKeywordsPredicate implements Predicate\u003cDeliverable\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public TitleDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean test(Deliverable deliverable) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deliverable.getTitle().value, keyword)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(deliverable.getDescription().value.orElse(\"\"), keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof TitleDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/UniqueDeliverableList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.exceptions.DeliverableNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.exceptions.DuplicateDeliverableException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.TimeEventComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class UniqueDeliverableList implements Iterable\u003cDeliverable\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ObservableList\u003cDeliverable\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ObservableList\u003cDeliverable\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final TimeEventComparator timeEventComparator \u003d new TimeEventComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if the list contains an equivalent deliverable as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean contains(Deliverable toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeliverable);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a deliverable to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void add(Deliverable toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the deliverable {@code target} in the list with {@code editedDeliverable}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(target, editedDeliverable);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DeliverableNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!target.isSameDeliverable(editedDeliverable) \u0026\u0026 contains(editedDeliverable)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.set(index, editedDeliverable);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Removes the equivalent deliverable from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void remove(Deliverable toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DeliverableNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(UniqueDeliverableList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the contents of this list with {@code deliverables}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverables} must not contain duplicate deliverables."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(deliverables);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!deliverablesAreUnique(deliverables)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.setAll(deliverables);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sort the list chronologically according to Deadline."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Collections.sort(internalList, timeEventComparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Iterator\u003cDeliverable\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof UniqueDeliverableList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeliverableList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if {@code deliverables} contains only unique deliverables."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private boolean deliverablesAreUnique(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (int i \u003d 0; i \u003c deliverables.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deliverables.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                if (deliverables.get(i).isSameDeliverable(deliverables.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 14,
      "shadowezz": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/exceptions/DeliverableNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Signals that the operation is unable to find the specified deliverable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/exceptions/DuplicateDeliverableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Signals that the operation will result in duplicate Deliverables"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * (Deliverables are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DuplicateDeliverableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DuplicateDeliverableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(\"Operation would result in duplicate deliverables\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/TimeEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface TimeEvent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    LocalDateTime getIndicatorTime();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/MeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Wraps all data at the meeting-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Duplicates are not allowed (by .isSameMeeting comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingBook implements ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates an MeetingBook using the Meetings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook(ReadOnlyMeetingBook toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortMeetings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sorts the contents of the meeting list by From in chronological order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void sortMeetings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings.sortList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the contents of the meeting list with {@code meetings}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Resets the existing data of this {@code MeetingBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void resetData(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must not already exist in the meeting book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void addMeeting(Meeting m) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.add(m);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the meeting book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the meeting book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing meeting in the meeting book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(editedMeeting);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Removes {@code key} from this {@code MeetingBook}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code key} must exist in the meeting book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void removeMeeting(Meeting key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.asUnmodifiableObservableList().size() + \" meetings\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof MeetingBook"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meetings.equals(((MeetingBook) other).meetings));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "shadowezz": 2,
      "chrystalquek": 1,
      "claraadora": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ModelMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * The API of the Model component of Meeting."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface ModelMeeting {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Predicate\u003cMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Sets the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeetingBookFilePath(Path deliverableBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces deliverable book data with the data in {@code deliverableBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeetingBook(ReadOnlyMeetingBook deliverableBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns the MeetingBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the meeting currently in view. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Meeting getMeetingInView();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Updates the meeting currently in view */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setMeetingInView(Meeting meetingInView);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the deliverable book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    boolean hasMeeting(Meeting deliverable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Deletes the given deliverable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The deliverable must exist in the deliverable book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void deleteMeeting(Meeting target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds the given deliverable."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code deliverable} must not already exist in the deliverable book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void addMeeting(Meeting deliverable);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the given deliverable {@code target} with {@code editedMeeting}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The deliverable identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeeting(Meeting target, Meeting editedMeeting);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deliverable list */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Updates the filter of the filtered deliverable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 8,
      "claraadora": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ModelMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents the in-memory model of the meeting book data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ModelMeetingManager implements ModelMeeting {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelMeetingManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final MeetingBook meetingBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final FilteredList\u003cMeeting\u003e filteredMeetings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Meeting meetingInView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Initializes a ModelMeetingManager with the given meetingBook WITHOUT userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ModelMeetingManager(ReadOnlyMeetingBook meetingBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(meetingBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Initializing with meeting book: \" + meetingBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBook \u003d new MeetingBook(meetingBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        filteredMeetings \u003d new FilteredList\u003c\u003e(this.meetingBook.getMeetingList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ModelMeetingManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this(new MeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefs.setMeetingBookFilePath(meetingBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBook.resetData(meetingBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetingInView(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Meeting getMeetingInView() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return meetingInView;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setMeetingInView(Meeting meetingInView) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.meetingInView \u003d meetingInView;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setMeetingInView(meeting);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.removeMeeting(target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (target.isSameMeeting(meetingInView)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            setMeetingInView(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setMeetingInView(editedMeeting);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return filteredMeetings;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        filteredMeetings.setPredicate(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetingInView(null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(obj instanceof ModelMeetingManager)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelMeetingManager other \u003d (ModelMeetingManager) obj;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook.equals(other.meetingBook)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 filteredMeetings.equals(other.filteredMeetings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 18,
      "claraadora": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ReadOnlyMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Unmodifiable view of a meeting book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns an unmodifiable view of the meeting list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * This list will not contain any duplicate meeting."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/From.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s from in the meeting book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class From extends DateTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructs a {@code From}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param from A valid From."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public From(String from) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        super(from);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidFrom(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof From"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((From) other).value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 25,
      "MerlinLim": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Person\u0027s location in the location book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_LOCATION_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Represents the value of Location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location(Optional\u003cString\u003e location) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            checkArgument(isValidLocation(location.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d Optional.of(location);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.orElse(EMPTY_LOCATION_FIELD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof Location"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.event.TimeEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting in the meeting book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Meeting implements TimeEvent {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String INCORRECT_FROM_AND_TO_ORDER \u003d \"From date should be earlier than To date.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final OptionalDescription description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final From from;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final To to;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Contacts contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Meeting(Title title, OptionalDescription description, From from, To to,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                   Contacts contacts, Location location) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!isValidFromAndTo(from, to)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalArgumentException(INCORRECT_FROM_AND_TO_ORDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if From is earlier than To chronologically."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidFromAndTo (From from, To to) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        LocalDateTime dateFrom \u003d from.getLocalDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        LocalDateTime dateTo \u003d to.getLocalDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return dateFrom.compareTo(dateTo) \u003c\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public From getFrom() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public LocalDateTime getIndicatorTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return from.getLocalDateTime();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public To getTo() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Contacts getContacts() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if both meetings have the same identity."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean isSameMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getFrom().equals(getFrom())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTo().equals(getTo())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if both meetings have the same identity."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getFrom().equals(getFrom())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTo().equals(getTo())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Objects.hash(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getFrom())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getTo())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Contacts: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getContacts())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getLocation());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "claraadora": 131,
      "MerlinLim": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/TitleDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class TitleDescriptionContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public TitleDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean test(Meeting meeting) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(meeting.getTitle().value, keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(meeting.getDescription().value.orElse(\"\"), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof TitleDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/To.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s to in the meeting book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class To extends DateTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code To}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param to A valid To."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public To(String to) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        super(to);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid To."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidTo(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof To"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((To) other).value));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 29,
      "MerlinLim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.TimeEventComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final TimeEventComparator timeEventComparator \u003d new TimeEventComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing meeting in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sort the list chronologically according to From."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Collections.sort(internalList, timeEventComparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "claraadora": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Signals that the operation will result in duplicate Meetings (Meetings are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * they have the same information)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(\"Operation would result in duplicate meetings.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "claraadora": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sortContacts();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sorts the contents of the contact list by Name in alphabetical order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void sortContacts() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        persons.sortList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "chrystalquek": 7,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ModelPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface ModelPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the person currently in view. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Person getPersonInView();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Updates the person in view. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setPersonInView(Person person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 6,
      "-": 84,
      "chrystalquek": 2,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ModelPersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModelPersonManager implements ModelPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelPersonManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Person personInView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModelPersonManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModelPersonManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Person getPersonInView() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return personInView;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setPersonInView(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.personInView \u003d person;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (target.isSamePerson(personInView)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            setPersonInView(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setPersonInView(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setPersonInView(editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!(obj instanceof ModelPersonManager)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager other \u003d (ModelPersonManager) obj;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 16,
      "-": 142,
      "chrystalquek": 7,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return fullName.compareTo(name.fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/NameDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class NameDescriptionContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public NameDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(person.getDescription().value.orElse(\"\"), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || (other instanceof NameDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final OptionalDescription description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Role role, OptionalDescription description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireAllNonNull(name, phone, email, role);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public OptionalDescription getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 otherPerson.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 otherPerson.getRole().equals(getRole());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Objects.hash(name, phone, email, role, description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(getRole())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 19,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String EMPTY_PHONE_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Phone(Optional\u003cString\u003e phone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        phone.ifPresent(ph -\u003e checkArgument(isValidPhone(ph), MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        value \u003d Optional.of(phone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return value.orElse(EMPTY_PHONE_FIELD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 10,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Role.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.StringUtil.getStringJoinedBySeparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a Person\u0027s role in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DEVELOPER(\"Developer\", \"dev\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    STAKEHOLDER(\"Stakeholder\", \"stk\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \"Role should only be a \" + getStringJoinedBySeparator(Arrays.stream(Role.values())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    .map(role -\u003e role.getArgument() + \" (\" + role.toString() + \")\"), \" or \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            getStringJoinedBySeparator(Arrays.stream(Role.values()).map(role -\u003e role.getArgument()), \"|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Role(String name, String argument) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role getRole(String arg) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        checkArgument(isValidRole(arg), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role role \u003d Role.getEnumByArgument(arg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns true if a given string is a valid role."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role getEnumByArgument(String argument) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (Role role : Role.values()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (role.argument.equals(argument)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return role;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.util.PersonComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final PersonComparator personComparator \u003d new PersonComparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sort the list alphabetically according to Name."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Collections.sort(internalList, personComparator);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "chrystalquek": 17,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/util/PersonComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a Comparator for Person which sorts by Name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Compares Persons by Name in alphabetical order."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public int compare(Person a, Person b) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireAllNonNull(a, b);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Name aName \u003d a.getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Name bName \u003d b.getName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return aName.compareTo(bName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "chrystalquek": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Contacts.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s contacts in the meeting book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Contacts {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_CONTACTS_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"Contacts can only take alphabetic characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Contacts can only take alphabetic characters and spaces separated with commas."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * First character should not be a blank string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @@author claraadora-reused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reused from https://stackoverflow.com/a/1396228 with minor modifications"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([a-zA-Z\\\\s]+)(,\\\\s*[a-zA-Z\\\\s]+)*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents the value of Contacts."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Contacts}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param contacts A valid Optional of contact name strings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contacts(Optional\u003cString\u003e contacts) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contacts.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            checkArgument(isValidContacts(contacts.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d contacts;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Contacts}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param contacts A valid Optional of contact name strings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contacts(String contacts) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(contacts);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidContacts(contacts), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d Optional.of(contacts);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid contacts."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidContacts(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.orElse(EMPTY_CONTACTS_FIELD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Contacts"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Contacts) other).value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "claraadora": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TIME_REGEX \u003d \"(([0-1]\\\\d)|(2[0-3])):([0-5]\\\\d)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DATE_REGEX \u003d \"(([0-2]\\\\d)|(3[0-1]))-((0[1-9])|(1[0-2]))-(\\\\d{4})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            \"Dates should be in the format of DD-MM-YYYY HH:mm, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    + \"and should be within the calendar range. Note: Single digit month, day, and \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    + \"minute must start with a leading zero.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"%s(\\\\s(%s))\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            DATE_REGEX, TIME_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructs a {@code date}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DateTime(String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Check for constraints"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        checkArgument(isValidDateTime(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Parse value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.value \u003d LocalDateTime.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the LocalDateTime value object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return the value of DateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns true if a given string is a valid DateTime."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param test string to test."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @return result of match."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return isValidDateTimePattern(test) \u0026\u0026 isValidDateTimeRange(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns true if a given string is a valid DateTime."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param test string to test."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @return result of match."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static boolean isValidDateTimePattern(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns true if a given string is a valid DateTime."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param test string to test."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @return result of match."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static boolean isValidDateTimeRange(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public int compareTo(DateTime o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof DateTime) // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 ((this.value.equals(((DateTime) other).value)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this.value.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 105,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable\u0027s description in the deliverable book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: to be deprecated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs an empty description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Description createEmptyDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Description(\"NIL\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            || (other instanceof Description) // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u0026\u0026 value.equals((((Description) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 56,
      "shadowezz": 8,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/OptionalDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Deliverable\u0027s description in the deliverable book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: to be renamed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class OptionalDescription {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_DESCRIPTION_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription(Optional\u003cString\u003e description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            checkArgument(isValidDescription(description.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d Optional.of(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.orElse(EMPTY_DESCRIPTION_FIELD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || (other instanceof OptionalDescription) // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 value.equals((((OptionalDescription) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "claraadora": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"Frontend Engineer\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Business analyst\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(Optional.empty()), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"Backend Engineer\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(Optional.empty()), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(Optional.empty())),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Bianca Li\"), new Phone(\"1234567\"), new Email(\"bianca@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Product Designer\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Budi Putra\"), new Phone(\"1234566\"), new Email(\"budi@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"DevOps Engineer\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Amber Johnson\"), new Phone(\"81623941\"), new Email(\"amber@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Finance expert\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Samuel Sam\"), new Phone(\"78129394\"), new Email(\"samsam@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"Full-stack Engineer\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Charlie Oliver\"), new Phone(\"93210283\"), new Email(\"charlie@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Business analyst\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Devina Yu\"), new Phone(Optional.empty()), new Email(\"devina@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"Full-stack Engineer\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Carol Geller\"), new Phone(Optional.empty()), new Email(\"carol@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Potential Customer\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Martin Seth\"), new Phone(Optional.empty()), new Email(\"martin@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Potential Customer\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Rosa Sinantra\"), new Phone(\"92624417\"), new Email(\"rosa@example.com\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Bonny Thompson\"), new Phone(\"1234444\"), new Email(\"thompson@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"Business Associate\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Lindsay Perry\"), new Phone(\"12343337\"), new Email(\"lindsay@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Role.getRole(\"dev\"), new OptionalDescription(\"Senior UI/UX Designer\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Robbie Margaret\"), new Phone(\"92624417\"), new Email(\"robbie@example.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Zachary Quinn\"), new Phone(\"123123123\"), new Email(\"zachary@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Business Associates\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Christian Pine\"), new Phone(\"321321321\"), new Email(\"pine@example.com\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"dev\"), new OptionalDescription(\"QA engineer\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Cassandra Bullock\"), new Phone(\"56565656\"), new Email(\"cassandra@example.com\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"dev\"), new OptionalDescription(\"QA engineer\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Robby Williams\"), new Phone(\"12346123\"), new Email(\"robby@example.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Head of Engineering\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Justin Gomez\"), new Phone(\"1234444\"), new Email(\"justin@example.com\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Business Analyst\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Sarah McQuarie\"), new Phone(\"12343337\"), new Email(\"mcquarie@example.com\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"dev\"), new OptionalDescription(\"Data Scientist\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Joe Manganiel\"), new Phone(\"92624417\"), new Email(\"joe@example.com\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Head of business\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Bryan Randall\"), new Phone(\"123123123\"), new Email(\"bryan@example.com\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Angel investor from Sequoia VC\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Samuel Smith\"), new Phone(\"321321321\"), new Email(\"smith@example.com\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Investor from 600 startups\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Person(new Name(\"Farrah Lionel\"), new Phone(\"56565656\"), new Email(\"farrah@example.com\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        Role.getRole(\"stk\"), new OptionalDescription(\"Investor from Bank of the People\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Deliverable[] getSampleDeliverables() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable[] {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Define problem to solve\"), new Milestone(\"1.1\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Survey potential customers to gather feedback.\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"04-08-2020 15:00\"), true, new Contacts(\"Carol Geller, Martin Seth\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Determine the Minimum Viable Product (MVP)\"), new Milestone(\"1.2\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Come up with minimum set of features to test key assumptions. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        + \"Discuss with Bianca (Product Designer) too.\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"18-08-2020 12:00\"), true, new Contacts(\"Bianca Li\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Finish mock-ups\"), new Milestone(\"1.3\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Liaise with the UI/UX team. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        + \"Lindsay can represent her team as senior UI/UX designer.\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"01-09-2020 10:00\"), true, new Contacts(\"Lindsay Lauren\")),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Finalize design and plan\"), new Milestone(\"1.4\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Get approval from Head of Engineering and Head of Business.\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"15-09-2020 15:00\"), true, new Contacts(\"Robby Williams, Breonna Randall\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Settle prioritization of features\"), new Milestone(\"2.1\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Hold meeting with the dev team.\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"29-09-2020 12:00\"), true, new Contacts(\"Bernice Yu, David Li, Budi Putra,\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Christian Pine, Cassandra Bullock, Samuel Sam, Devina Yu\")),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Deliver first version of MVP\"), new Milestone(\"2.3\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Check-in with Bernice (Tech Lead).\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"15-10-2020 10:00\"), true, new Contacts(\"Bernice Yu\")),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Conduct MVP usability testing\"), new Milestone(\"2.4\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Schedule meetings with end users.\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"20-10-2020 15:00\"), true, new Contacts(\"Alex Yeoh, Roy Balakrishnan, \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Rosa       Sinantra\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Refine design and plan\"), new Milestone(\"2.5\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Discuss design and plan with Product Designer and UI/UX team again.\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"28-10-2020 12:00\"), true, new Contacts(\"Lindsay Lauren, Bianca Li\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Deliver second version of MVP\"), new Milestone(\"2.6\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Check-in with Bernice (Tech Lead)\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"30-10-2020 10:00\"), false, new Contacts(\"Bernice Yeoh\")),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Deliver find feature\"), new Milestone(\"3.1\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Check-in with Bernice (Tech Lead).\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"08-11-2020 15:00\"), false, new Contacts(\"Bernice Yeoh\")),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Deliver sort feature\"), new Milestone(\"3.1\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Check-in with Bernice (Tech Lead).\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"08-11-2020 15:00\"), false, new Contacts(\"Bernice Yeoh\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Define marketing goals \"), new Milestone(\"3.1\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Get financial consultation.\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"10-11-2020 10:00\"), false, new Contacts(\"Amber Johnson\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Finalize marketing goals\"), new Milestone(\"3.2\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Get financial consultation.\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"12-11-2020 10:00\"), false, new Contacts(\"Amber Johnson\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Deliver view feature\"), new Milestone(\"3.2\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Check-in with Bernice (Tech Lead).\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"20-11-2020 10:00\"), false, new Contacts(\"Bernice Yu\")),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Deliverable(new Title(\"Product Launch \\uD83D\\uDE80\"), new Milestone(\"10\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Launch product to market\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Deadline(\"04-05-2021 23:59\"), false, new Contacts(Optional.empty())),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Meeting[] getSampleMeetings() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Meeting[] {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Survey potential customers\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Gather feedback\"),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"04-08-2020 15:00\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"04-08-2020 18:00\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Carol Geller, Martin Seth\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Stardollar Cafe\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Discuss product design\"), new OptionalDescription(\"With product designer\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"18-08-2020 12:00\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"18-08-2020 12:00\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Bianca Li\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Min Cafe\")),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Discuss product mock-ups\"), new OptionalDescription(\"With UI/UX team. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Can be represented by the senior UI/UX designer.\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"01-09-2020 10:00\"),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"01-09-2020 11:00\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Lindsay Lauren\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Meeting room C\")),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Present plan to Heads\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"Get approval from Head of Engineering and Head of Business\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"15-09-2020 15:00\"),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"15-09-2020 17:00\"),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Robby Williams, Breonna Randall\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Meeting room A\")),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Discuss development plan\"), new OptionalDescription(\"With dev team\"),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"29-09-2020 12:00\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"29-09-2020 14:00\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Bernice Yu, David Li, Budi Putra,\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        + \"Christian Pine, Cassandra Bullock, Samuel Sam, Devina Yu\"),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Meeting room B\")),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Check-in about MVP progress\"), new OptionalDescription(\"With tech lead\"),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"15-10-2020 12:00\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"15-10-2020 14:00\"),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Check-in about MVP completion\"), new OptionalDescription(\"With tech lead\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"17-10-2020 10:00\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"17-10-2020 14:00\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Meeting end users for usability testing\"), new OptionalDescription(\"With end users\"),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"20-10-2020 10:00\"),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"20-10-2020 16:00\"),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Alex Yeoh, Roy Balakrishnan, Rosa Sinantra\"),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Stardollar Cafe\")),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Discuss refinement of design and plan\"),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"With Product Designer and UI/UX team\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"28-10-2020 10:00\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"28-10-2020 16:00\"),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Lindsay Lauren, Bianca Li\"),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Consult about marketing goals\"),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"With finance expert\"),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"09-11-2020 10:00\"),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"09-11-2020 16:00\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Amber Johnson\"),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Scrum meeting\"), new OptionalDescription(\"With dev team\"),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"10-11-2020 10:00\"),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"10-11-2020 14:00\"),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Bernice Yu, David Li, Budi Putra,\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        + \"Christian Pine, Cassandra Bullock, Samuel Sam, Devina Yu\"),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Finalise marketing goals\"),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new OptionalDescription(\"With finance expert\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"11-11-2020 10:00\"),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"11-11-2020 16:00\"),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Amber Johnson\"),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Discuss current progress\"), new OptionalDescription(\"With Head of Business\"),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"20-11-2020 10:00\"),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"20-11-2020 14:00\"),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Joe Manganiel\"),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Provide updates on MVP\"), new OptionalDescription(\"With Head of Engineering\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"21-11-2020 10:00\"),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"21-11-2020 14:00\"),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"Robby Williams\"),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Zoom call\")),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static ReadOnlyDeliverableBook getSampleDeliverableBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBook sampleDb \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (Deliverable sampleDeliverable : getSampleDeliverables()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            sampleDb.addDeliverable(sampleDeliverable);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return sampleDb;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static ReadOnlyMeetingBook getSampleMeetingBook() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBook sampleMb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (Meeting sampleMeeting : getSampleMeetings()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            sampleMb.addMeeting(sampleMeeting);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "shadowezz": 17,
      "-": 30,
      "chrystalquek": 16,
      "claraadora": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/TimeEventComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.event.TimeEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Comparator for sorting TimeEvents chronologically."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class TimeEventComparator implements Comparator\u003cTimeEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Compares TimeEvents in chronological order based on their indicator time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int compare(TimeEvent a, TimeEvent b) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        LocalDateTime timeA \u003d a.getIndicatorTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        LocalDateTime timeB \u003d b.getIndicatorTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return timeA.compareTo(timeB);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO : discuss immutability (update the rest upon decision)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s title in the meeting book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"Title can take any values, and it must not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * \" \" (a blank string) is not a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof Title"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 46,
      "shadowezz": 1,
      "claraadora": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/DeliverableBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a storage for {@link DeliverableBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface DeliverableBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns DeliverableBook data as a {@link ReadOnlyDeliverableBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see #getDeliverableBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Saves the given {@link ReadOnlyDeliverableBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param deliverableBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see #saveDeliverableBook(ReadOnlyDeliverableBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonAdaptedDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Jackson-friendly version of {@link Deliverable}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonAdaptedDeliverable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deliverable\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final String milestone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Optional\u003cString\u003e contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final String isComplete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeliverable} with the given deliverable details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonAdaptedDeliverable(@JsonProperty(\"title\") String title, @JsonProperty(\"milestone\") String milestone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                                  @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                                  @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                                  @JsonProperty(\"contacts\") Optional\u003cString\u003e contacts,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                                  @JsonProperty(\"isComplete\") String isComplete) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts a given {@code Deliverable} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonAdaptedDeliverable(Deliverable source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        milestone \u003d source.getMilestone().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d source.getContacts().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d Boolean.toString(source.getIsComplete());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts this Jackson-friendly adapted deliverable object into the model\u0027s {@code Deliverable} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deliverable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (milestone \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Milestone.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!Milestone.isValidMilestone(milestone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new IllegalValueException(Milestone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final Milestone modelMilestone \u003d new Milestone(milestone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (description.isPresent() \u0026\u0026 !OptionalDescription.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final OptionalDescription modelDescription \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline) \u0026\u0026 !deadline.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final boolean modelIsComplete;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!isComplete.equals(Boolean.toString(true)) \u0026\u0026 !isComplete.equals(Boolean.toString(false))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new IllegalValueException(\"isComplete can only be true or false.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (isComplete.equals(Boolean.toString(true))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            modelIsComplete \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            modelIsComplete \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (contacts.isPresent() \u0026\u0026 !Contacts.isValidContacts(contacts.get())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Contacts modelContacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Deliverable("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelTitle, modelMilestone, modelDescription, modelDeadline, modelIsComplete, modelContacts);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 44,
      "shadowezz": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonDeliverableBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A class to access DeliverableBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonDeliverableBookStorage implements DeliverableBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeliverableBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonDeliverableBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return readDeliverableBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Similar to {@link #readDeliverableBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Optional\u003cJsonSerializableDeliverableBook\u003e jsonDeliverableBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                filePath, JsonSerializableDeliverableBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!jsonDeliverableBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return Optional.of(jsonDeliverableBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        saveDeliverableBook(deliverableBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliverableBook(deliverableBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonSerializableDeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * An Immutable DeliverableBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "@JsonRootName(value \u003d \"deliverablebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonSerializableDeliverableBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d \"Deliverables list contains duplicate deliverable(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final List\u003cJsonAdaptedDeliverable\u003e deliverables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code JsonSerializableDeliverableBook} with the given deliverables."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonSerializableDeliverableBook(@JsonProperty(\"deliverables\") List\u003cJsonAdaptedDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverables.addAll(deliverables);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts a given {@code ReadOnlyDeliverableBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDeliverableBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonSerializableDeliverableBook(ReadOnlyDeliverableBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.addAll(source.getDeliverableList().stream().map(JsonAdaptedDeliverable::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts this deliverable book into the model\u0027s {@code DeliverableBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBook deliverableBook \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (JsonAdaptedDeliverable jsonAdaptedDeliverable : deliverables) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Deliverable deliverable \u003d jsonAdaptedDeliverable.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (deliverableBook.hasDeliverable(deliverable)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/StorageDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * API of the Storage component for Deliverable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface StorageDeliverable extends DeliverableBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/StorageDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Manages storage of DeliverableBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class StorageDeliverableManager implements StorageDeliverable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageDeliverableManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private DeliverableBookStorage deliverableBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code StorageDeliverableManager} with the given {@code DeliverableBookStorage}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and {@code UserPrefsStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public StorageDeliverableManager(DeliverableBookStorage deliverableBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookStorage \u003d deliverableBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverableBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookStorage.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return readDeliverableBook(deliverableBookStorage.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Attempting to read data from deliverable file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookStorage.readDeliverableBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        saveDeliverableBook(deliverableBook, deliverableBookStorage.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Attempting to write to data deliverable file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBookStorage.saveDeliverableBook(deliverableBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Jackson-friendly version of {@link Meeting}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                              @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                             @JsonProperty(\"from\") String from, @JsonProperty(\"to\") String to,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                             @JsonProperty(\"contacts\") Optional\u003cString\u003e contacts,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                              @JsonProperty(\"location\") Optional\u003cString\u003e location) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts a given {@code Meeting} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        from \u003d source.getFrom().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        to \u003d source.getTo().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        contacts \u003d source.getContacts().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Title"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Description"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isPresent() \u0026\u0026 !OptionalDescription.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final OptionalDescription modelDescription \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // From"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (from \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, From.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!From.isValidFrom(from)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final From modelFrom \u003d new From(from);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // To"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (to \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, To.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!To.isValidTo(to)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final To modelTo \u003d new To(to);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Contacts"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contacts.isPresent() \u0026\u0026 !Contacts.isValidContacts(contacts.get())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Contacts modelContacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Location"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isPresent() \u0026\u0026 !Location.isValidLocation(location.get())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting meeting;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meeting \u003d new Meeting(modelTitle, modelDescription, modelFrom, modelTo, modelContacts, modelLocation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(Meeting.INCORRECT_FROM_AND_TO_ORDER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meeting;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 118,
      "MerlinLim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonMeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * A class to access MeetingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonMeetingBookStorage implements MeetingBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMeetingBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonMeetingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return readMeetingBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Similar to {@link #readMeetingBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Optional\u003cJsonSerializableMeetingBook\u003e jsonMeetingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                filePath, JsonSerializableMeetingBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!jsonMeetingBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return Optional.of(jsonMeetingBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMeetingBook(meetingBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonSerializableMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * An Immutable MeetingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "@JsonRootName(value \u003d \"meetingbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonSerializableMeetingBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code JsonSerializableMeetingBook} with the given meetings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonSerializableMeetingBook(@JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts a given {@code ReadOnlyMeetingBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMeetingBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonSerializableMeetingBook(ReadOnlyMeetingBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts this meeting book into the model\u0027s {@code MeetingBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (meetingBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/MeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a storage for {@link MeetingBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface MeetingBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns MeetingBook data as a {@link ReadOnlyMeetingBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see #getMeetingBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Saves the given {@link ReadOnlyMeetingBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param meetingBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see #saveMeetingBook(ReadOnlyMeetingBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/StorageMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: build and change to MeetingBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface StorageMeeting extends MeetingBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/StorageMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Manages storage of MeetingBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class StorageMeetingManager implements StorageMeeting {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StoragePersonManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private MeetingBookStorage meetingBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code MeetingBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public StorageMeetingManager(MeetingBookStorage meetingBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookStorage \u003d meetingBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookStorage.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return readMeetingBook(meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookStorage.readMeetingBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        saveMeetingBook(meetingBook, meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBookStorage.saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 42,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Optional\u003cString\u003e phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") Optional\u003cString\u003e phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"role\") String role,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"description\") Optional\u003cString\u003e description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d source.getRole().getArgument();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (phone.isPresent() \u0026\u0026 !Phone.isValidPhone(phone.get())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final Role modelRole \u003d Role.getRole(role);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    OptionalDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (description.isPresent() \u0026\u0026 !OptionalDescription.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final OptionalDescription modelDescription \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelRole, modelDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 36,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/StoragePerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface StoragePerson extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "chrystalquek": 1,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/StoragePersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class StoragePersonManager implements StoragePerson {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StoragePersonManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public StoragePersonManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "chrystalquek": 3,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Calendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.event.TimeEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.TimeEventComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Calendar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static TimeEventComparator timeEventComparator \u003d new TimeEventComparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ObservableList\u003cMeeting\u003e meetings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ObservableList\u003cDeliverable\u003e deliverables;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ObservableList\u003cTimeEvent\u003e calendarList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a Calendar using the Deliverables and Meetings in the {@code deliverables}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * and {@code meetings} respectively"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Calendar(ObservableList\u003cDeliverable\u003e deliverables, ObservableList\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.deliverables \u003d deliverables;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings \u003d meetings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.calendarList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        updateCalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Updates the calendar list for every Meeting or Deliverable command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void updateCalendarList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.calendarList.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.calendarList.addAll(meetings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.calendarList.addAll(deliverables);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Collections.sort(calendarList, timeEventComparator);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cTimeEvent\u003e getTimeEvents() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return this.calendarList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "claraadora": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDeliverableCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * An UI component that displays information of a {@code Deliverable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class CalendarDeliverableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String FXML \u003d \"CalendarListDeliverableCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public final Deliverable deliverable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label milestone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label isCompleted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a {@code DeliverableCode} with the given {@code Deliverable} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CalendarDeliverableCard(Deliverable deliverable, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.deliverable \u003d deliverable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        title.setText(\"Deliverable: \" + deliverable.getTitle().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deadline.setText(deliverable.getDeadline().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (deliverable.getIsComplete()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            isCompleted.setText(\"completed\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            isCompleted.setText(\"on-going\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        milestone.setText(deliverable.getMilestone().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!(other instanceof CalendarDeliverableCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CalendarDeliverableCard card \u003d (CalendarDeliverableCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 deliverable.equals(card.deliverable);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.event.TimeEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class CalendarListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String FXML \u003d \"CalendarListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ListView\u003cTimeEvent\u003e timeEventListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CalendarListPanel(ObservableList\u003cTimeEvent\u003e timeEventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        timeEventListView.setItems(timeEventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        timeEventListView.setCellFactory(listView -\u003e new TimeEventViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    class TimeEventViewCell extends ListCell\u003cTimeEvent\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        protected void updateItem(TimeEvent timeEvent, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            super.updateItem(timeEvent, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (empty || timeEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            } else if (timeEvent instanceof Deliverable) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                setGraphic(new CalendarDeliverableCard((Deliverable) timeEvent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            } else if (timeEvent instanceof Meeting) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                setGraphic(new CalendarMeetingCard((Meeting) timeEvent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 42,
      "claraadora": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarMeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class CalendarMeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String FXML \u003d \"CalendarListMeetingCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a {@code MeetingCode} with the given {@code Meeting} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CalendarMeetingCard(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        title.setText(\"Meeting: \" + meeting.getTitle().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        from.setText(meeting.getFrom().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        to.setText(meeting.getTo().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!(other instanceof CalendarMeetingCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CalendarMeetingCard card \u003d (CalendarMeetingCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "         * @see LogicPerson#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverableCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * An UI component that displays information of a {@code Deliverable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"DeliverableListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public final Deliverable deliverable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label milestone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label isCompleted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableCode} with the given {@code Deliverable} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableCard(Deliverable deliverable, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverable \u003d deliverable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title.setText(deliverable.getTitle().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deadline.setText(deliverable.getDeadline().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (deliverable.getIsComplete()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"completed\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"on-going\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        milestone.setText(deliverable.getMilestone().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(other instanceof DeliverableCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableCard card \u003d (DeliverableCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 deliverable.equals(card.deliverable);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 5,
      "shadowezz": 68,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverableDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Panel containing the expanded details of a deliverable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"DeliverableDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverableDetailsPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label milestone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private VBox contactList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableDetailsPanel} with the given {@code Deliverable}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableDetailsPanel(Deliverable deliverable) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assert deliverable !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title.setText(deliverable.getTitle().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        milestone.setText((deliverable.getMilestone().toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        description.setText(deliverable.getDescription().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline.setText(deliverable.getDeadline().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverable.getContacts().value.ifPresentOrElse(contacts -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            for (String contact : contacts.split(\",\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                String cleanedContact \u003d contact.trim().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                contactList.getChildren().add(new Label(\"- \" + cleanedContact));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }, () -\u003e contactList.getChildren().add(new Label(deliverable.getContacts().toString())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (deliverable.getIsComplete()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"completed\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"on-going\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "shadowezz": 55,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverableListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Panel containing a list of deliverables."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"DeliverableListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverableListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private ListView\u003cDeliverable\u003e deliverableListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableListPanel(ObservableList\u003cDeliverable\u003e deliverableList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableListView.setItems(deliverableList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableListView.setCellFactory(listView -\u003e new DeliverableListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deliverable} using a {@code DeliverableCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    class DeliverableListViewCell extends ListCell\u003cDeliverable\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        protected void updateItem(Deliverable deliverable, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            super.updateItem(deliverable, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (empty || deliverable \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setGraphic(new DeliverableCard(deliverable, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"tiny.cc/Productiv-User-Guide\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.SwitchCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModeEnum mode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logicPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private CalendarListPanel calendarListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ProjectCompletionStatusPanel projectCompletionStatusPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private DeliverableListPanel deliverableListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private MeetingListPanel meetingListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private DeliverableDetailsPanel deliverableDetailsPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private MeetingDetailsPanel meetingDetailsPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private PersonDetailsPanel personDetailsPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button helpButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button dashboardButton;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button deliverableButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button meetingButton;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button personButton;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private StackPane leftPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private StackPane rightPanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} {@code LogicMode},"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code LogicPerson} and {@code LogicDeliverable}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public MainWindow(Stage primaryStage, LogicMode logicMode, LogicPerson logicPerson,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                      LogicDeliverable logicDeliverable, LogicMeeting logicMeeting) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicMode \u003d logicMode;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicPerson \u003d logicPerson;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.logicDeliverable \u003d logicDeliverable;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.logicMeeting \u003d logicMeeting;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.calendar \u003d new Calendar(logicDeliverable.getFilteredDeliverableList(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                logicMeeting.getFilteredMeetingList());;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // all managers\u0027 Gui points to same GuiSettings object so its fine"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setWindowDefaultSize(logicPerson.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        mode \u003d ModeEnum.DASHBOARD; // default to dashboard"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setUnderlineButton(dashboardButton);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setAccelerator(helpButton, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the accelerator of a Button."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void setAccelerator(Button button, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(button);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(scene);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                keyCombination,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    @FXML public void run() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        button.fire();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Change Ui according to current mode."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param mode the mode to change Ui to."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void switchMode(ModeEnum mode) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        rightPanelPlaceholder.getChildren().clear(); // clear details panel"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        leftPanelPlaceholder.getChildren().clear(); // remove current list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        statusbarPlaceholder.getChildren().clear(); // remove current status bar"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        resultDisplay.setFeedbackToUser(String.format(MESSAGE_SUCCESS, mode)); // if userinput is through clicking"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case DASHBOARD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            rightPanelPlaceholder.getChildren().add(calendarListPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            leftPanelPlaceholder.getChildren().add(projectCompletionStatusPanel.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(dashboardButton);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case PERSON:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            leftPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logicPerson.getAddressBookFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(personButton);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case DELIVERABLE:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            leftPanelPlaceholder.getChildren().add(deliverableListPanel.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusBarFooter \u003d new StatusBarFooter(logicDeliverable.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(deliverableButton);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        case MEETING:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            leftPanelPlaceholder.getChildren().add(meetingListPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            statusBarFooter \u003d new StatusBarFooter(logicMeeting.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(meetingButton);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert false : \"from default: \" + ModeEnum.getModeOptions();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void setUnderlineButton(Button button) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        dashboardButton.setUnderline(false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        personButton.setUnderline(false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deliverableButton.setUnderline(false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        meetingButton.setUnderline(false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        button.setUnderline(true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Switches to dashboard mode."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void switchDashboard() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switchMode(ModeEnum.DASHBOARD);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Switches to contact mode."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void switchPerson() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switchMode(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Switches to deliverable mode."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void switchDeliverable() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        switchMode(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Switches to meeting mode."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void switchMeeting() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        switchMode(ModeEnum.MEETING);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        calendarListPanel \u003d new CalendarListPanel(calendar.getTimeEvents());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        projectCompletionStatusPanel \u003d new ProjectCompletionStatusPanel(logicDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        leftPanelPlaceholder.getChildren().add(projectCompletionStatusPanel.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        rightPanelPlaceholder.getChildren().add(calendarListPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logicPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deliverableListPanel \u003d new DeliverableListPanel(logicDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListPanel \u003d new MeetingListPanel(logicMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logicPerson.getAddressBookFilePath());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicPerson.setGuiSettings(guiSettings); // its just to save last guiSetting used"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Updates the details panel whenever a command is executed. This is not called after a switch command"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * since the details panel should be left empty after a switch in mode has been made."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private void updateDetailsPanel() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        rightPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case PERSON:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (logicPerson.getPersonInView() !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                personDetailsPanel \u003d new PersonDetailsPanel(logicPerson.getPersonInView());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                rightPanelPlaceholder.getChildren().add(personDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case DELIVERABLE:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (logicDeliverable.getDeliverableInView() !\u003d null) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                deliverableDetailsPanel \u003d new DeliverableDetailsPanel(logicDeliverable.getDeliverableInView());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                rightPanelPlaceholder.getChildren().add(deliverableDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        //Todo"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case MEETING:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (logicMeeting.getMeetingInView() !\u003d null) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                meetingDetailsPanel \u003d new MeetingDetailsPanel(logicMeeting.getMeetingInView());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                rightPanelPlaceholder.getChildren().add(meetingDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            assert false : \"invalid mode type: \" + ModeEnum.getModeOptions();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see LogicPerson#execute(String)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (logicMode.isModeCommand(commandText) || mode \u003d\u003d ModeEnum.DASHBOARD) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                commandResult \u003d logicMode.execute(commandText);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                switch (mode) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                case PERSON:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    commandResult \u003d logicPerson.execute(commandText);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                case DELIVERABLE:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    commandResult \u003d logicDeliverable.execute(commandText);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    calendar.updateCalendarList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    projectCompletionStatusPanel.updateOcp();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                case MEETING:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    commandResult \u003d logicMeeting.execute(commandText);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    calendar.updateCalendarList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    assert false : \"from default: \" + ModeEnum.getModeOptions();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            requireNonNull(commandResult);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (commandResult.getMode() !\u003d null) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                switchMode(commandResult.getMode());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                updateDetailsPanel();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "shadowezz": 67,
      "-": 156,
      "chrystalquek": 119,
      "claraadora": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final String FXML \u003d \"MeetingListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label from;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label to;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code MeetingCode} with the given {@code Meeting} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingCard(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        title.setText(meeting.getTitle().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        from.setText(meeting.getFrom().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        to.setText(meeting.getTo().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(other instanceof MeetingCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingCard card \u003d (MeetingCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 6,
      "claraadora": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Panel containing the expanded details of a meeting."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class MeetingDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"MeetingDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingDetailsPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label datetime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private VBox contactList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code MeetingDetailsPanel} with the given {@code Meeting}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public MeetingDetailsPanel(Meeting meeting) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assert meeting !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title.setText(meeting.getTitle().value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        description.setText(meeting.getDescription().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        datetime.setText(String.format(\"%s to %s\", meeting.getFrom(), meeting.getTo()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        venue.setText(meeting.getLocation().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        meeting.getContacts().value.ifPresentOrElse(contacts -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            for (String contact : contacts.split(\",\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                String cleanedContact \u003d contact.trim().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                contactList.getChildren().add(new Label(\"- \" + cleanedContact));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }, () -\u003e contactList.getChildren().add(new Label(meeting.getContacts().toString())));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 48,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Panel containing a list of meetings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final String FXML \u003d \"MeetingListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ListView\u003cMeeting\u003e meetingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingListPanel(ObservableList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListView.setItems(meetingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        protected void updateItem(Meeting meeting, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role.setText(person.getRole().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (person.getRole().equals(Role.DEVELOPER)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            role.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            role.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "chrystalquek": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Panel containing the expanded contact details of a person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class PersonDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"PersonDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonDetailsPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code PersonDetailsPanel} with the given {@code Person}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public PersonDetailsPanel(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assert person !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        description.setText(person.getDescription().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        role.setText(person.getRole().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (person.getRole().equals(Role.DEVELOPER)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            role.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            role.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        phone.setText(person.getPhone().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCompletionStatusPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Panel containing the expanded details of a deliverable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ProjectCompletionStatusPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String FXML \u003d \"ProjectCompletionStatusPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectCompletionStatusPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ObservableList\u003cDeliverable\u003e deliverableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int totalNumDeliverables;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int numCompletedDeliverables;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int overallCompletionPercentage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private StackPane stackPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label OcpString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label OcpCaption;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates a {@code ProjectCompletionStatusPanel} with the given {@code ObservableList\u003cDeliverable\u003e}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ProjectCompletionStatusPanel(ObservableList\u003cDeliverable\u003e deliverableList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deliverableList \u003d deliverableList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        updateOcp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int findNumCompletedDeliverables(ObservableList\u003cDeliverable\u003e deliverableList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        int numCompletedDeliverables \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        for (Deliverable deliverable : deliverableList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (deliverable.getIsComplete()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                numCompletedDeliverables++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return numCompletedDeliverables;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int getOcp(int totalNumDeliverables, int numCompletedDeliverables) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return totalNumDeliverables \u003d\u003d 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                ? 0"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                : (int) ((double) numCompletedDeliverables / (double) totalNumDeliverables * 100);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Updates OCP for every Deliverable command execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void updateOcp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        totalNumDeliverables \u003d deliverableList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        numCompletedDeliverables \u003d findNumCompletedDeliverables(deliverableList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        overallCompletionPercentage \u003d getOcp(totalNumDeliverables, numCompletedDeliverables);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String OcpStr \u003d overallCompletionPercentage + \"% Completed\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        OcpString.setText(OcpStr);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String caption \u003d numCompletedDeliverables + \" / \" + totalNumDeliverables + \" Deliverables Completed\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        OcpCaption.setText(caption);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 45,
      "chrystalquek": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/productiv_32.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logicPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public UiManager(LogicMode logicMode, LogicPerson logicPerson,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                     LogicDeliverable logicDeliverable, LogicMeeting logicMeeting) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO use only a central logic object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicMode \u003d logicMode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicPerson \u003d logicPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.logicDeliverable \u003d logicDeliverable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.logicMeeting \u003d logicMeeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logicMode, logicPerson, logicDeliverable, logicMeeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            mainWindow.fillInnerParts(); // TODO change to dashboard. for now default to contact list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "-": 82,
      "chrystalquek": 9,
      "claraadora": 6
    }
  },
  {
    "path": "src/main/resources/view/CalendarListDeliverableCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cLabel fx:id\u003d\"isCompleted\" text\u003d\"\\$isCompleted\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cLabel fx:id\u003d\"milestone\" text\u003d\"\\$milestone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/resources/view/CalendarListMeetingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"from\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$from\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"to\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$to\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 33
    }
  },
  {
    "path": "src/main/resources/view/CalendarListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  \u003cLabel fx:id\u003d\"calendarHeading\" styleClass\u003d\"details_title\" text\u003d\"Calendar\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "  \u003cListView fx:id\u003d\"timeEventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 9,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-control-inner-background: #ffffff;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#f5f5f5, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-border-color: transparent transparent transparent #f5f5f5;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #b2b2b2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-border-color: #b2b2b2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #4c4c4c;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #323232;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #323232;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     -fx-border-color: derive(white, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#ffffff, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "#navBar {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    -fx-background-color: #00c853;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    -fx-background-color:  #00c853;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    -fx-background-color: #00e676;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  -fx-background-color: #5ba884;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #323232;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: derive(#f5f5f5, 50%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: transparent #f5f5f5 transparent #f5f5f5;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background-color: #f5f5f5;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "#role, #isCompleted, #milestone {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ".tag_label {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ".details_title {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ".details_subheading {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shadowezz": 19,
      "-": 276,
      "chrystalquek": 39,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/resources/view/DeliverableDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cListView maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          prefHeight\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"details_title\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cLabel fx:id\u003d\"isCompleted\" styleClass\u003d\"tag_label\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cLabel fx:id\u003d\"milestone\" styleClass\u003d\"tag_label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Description\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Contacts\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cVBox fx:id\u003d\"contactList\" styleClass\u003d\"cell_large_label\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 36
    }
  },
  {
    "path": "src/main/resources/view/DeliverableListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" text\u003d\"\\$deadline\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                   GridPane.columnIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cLabel fx:id\u003d\"isCompleted\" text\u003d\"\\$isCompleted\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cLabel fx:id\u003d\"milestone\" text\u003d\"\\$milestone\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"55.0\" minWidth\u003d\"10\" prefWidth\u003d\"55\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40.0\" minWidth\u003d\"40\" prefWidth\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 13,
      "chrystalquek": 15
    }
  },
  {
    "path": "src/main/resources/view/DeliverableListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cGridPane minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"#\" styleClass\u003d\"cell_big_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"Title\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"Deadline\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"Status / Milestone\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"55.0\" minWidth\u003d\"10\" prefWidth\u003d\"55\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40.0\" minWidth\u003d\"40\" prefWidth\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverableListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7,
      "chrystalquek": 18
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    -fx-background: white;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "         title\u003d\"Productiv\" minWidth\u003d\"700\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cImage url\u003d\"@/images/productiv_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cHBox id\u003d\"navBar\" fx:id\u003d\"navBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cHBox HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"dashboardButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchDashboard\" text\u003d\"Dashboard\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"deliverableButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchDeliverable\" text\u003d\"Deliverable\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"meetingButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchMeeting\" text\u003d\"Meeting\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"personButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchPerson\" text\u003d\"Contact\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cRegion HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cButton fx:id\u003d\"helpButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003c/Button\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cHBox fx:id\u003d\"display\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          \u003cVBox minWidth\u003d\"350\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cVBox fx:id\u003d\"list\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"900\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "              \u003cStackPane fx:id\u003d\"leftPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          \u003cHBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cVBox fx:id\u003d\"details\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"900\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "              \u003cStackPane fx:id\u003d\"rightPanelPlaceholder\" maxWidth\u003d\"900\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 14,
      "-": 44,
      "chrystalquek": 16
    }
  },
  {
    "path": "src/main/resources/view/MeetingDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cListView maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          prefHeight\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"details_title\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cLabel fx:id\u003d\"datetime\" styleClass\u003d\"cell_small_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Location\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Description\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Contacts\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cVBox fx:id\u003d\"contactList\" styleClass\u003d\"cell_large_label\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 37
    }
  },
  {
    "path": "src/main/resources/view/MeetingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\" minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"from\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$from\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"to\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$to\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"35.0\" minWidth\u003d\"10\" prefWidth\u003d\"35\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 11,
      "claraadora": 12
    }
  },
  {
    "path": "src/main/resources/view/MeetingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cGridPane minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"#\" styleClass\u003d\"cell_big_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"Title\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"From\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel text\u003d\"To\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"35.0\" minWidth\u003d\"10\" prefWidth\u003d\"35\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" minWidth\u003d\"10\" prefWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 18,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cListView maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "          prefHeight\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"details_title\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"tag_label\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Description\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Phone Number\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel text\u003d\"Email Address\" styleClass\u003d\"details_subheading\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_large_label\" prefWidth\u003d\"300\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 44
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" GridPane.columnIndex\u003d\"3\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cLabel fx:id\u003d\"role\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"35.0\" minWidth\u003d\"10\" prefWidth\u003d\"35\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40.0\" minWidth\u003d\"10\" prefWidth\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"20.0\" minWidth\u003d\"30\" prefWidth\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "-": 13,
      "chrystalquek": 11
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cGridPane minHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cLabel text\u003d\"#\" styleClass\u003d\"cell_big_label\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cLabel text\u003d\"Name\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cLabel text\u003d\"Email\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cLabel text\u003d\"Role\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" minWidth\u003d\"10\" prefWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"35.0\" minWidth\u003d\"10\" prefWidth\u003d\"35\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40.0\" minWidth\u003d\"10\" prefWidth\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"20.0\" minWidth\u003d\"30\" prefWidth\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "chrystalquek": 17
    }
  },
  {
    "path": "src/main/resources/view/ProjectCompletionStatusPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cLabel fx:id\u003d\"projectCompletionHeading\" styleClass\u003d\"details_title\" text\u003d\"Project Completion\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003cLabel fx:id\u003d\"OcpString\" text\u003d\"\\$OcpString\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003cLabel fx:id\u003d\"OcpCaption\" text\u003d\"\\$OcpCaption\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 4,
      "chrystalquek": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"name\": \"Valid Contact\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"9482424\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"name\": \"Contact With Invalid Phone Field\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"948asdf2424\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"9482424\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "chrystalquek": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"94351253\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"End user\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"94351253\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\": {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"9482424\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "chrystalquek": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"94351253\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"End user\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"98765432\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"dev\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"Frontend engineer\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"95352563\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"Business analyst\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"dev\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"Backend engineer\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": \"9482427\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"Product designer, Kurz work partner\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"phone\" : {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\": null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"role\": \"stk\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \"description\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \"value\" : \"Secondary user\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "chrystalquek": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/productiv_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicModeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.ModeUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class LogicModeManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicMode \u003d new LogicModeManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String exitCommand \u003d ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(exitCommand, ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult result \u003d logicMode.execute(inputCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logicMode.execute(inputCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_isModeCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicPersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicPersonManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StoragePersonManager storage \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logic \u003d new LogicPersonManager(modelPerson, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, modelPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StoragePersonManager storage \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logic \u003d new LogicPersonManager(modelPerson, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                AddCommand.COMMAND_WORD + ROLE_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager expectedModel \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d LogicPersonManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            ModelPerson expectedModelPerson) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedModelPerson, modelPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ModelPerson)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String expectedMessage, ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedModelPerson, modelPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 126,
      "chrystalquek": 30,
      "claraadora": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, null)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, null)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, null)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, null).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, null).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new CommandResult(\"feedback\", false, true, ModeEnum.PERSON).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.DeliverableBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable \u003d new ModelDeliverableManager(getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_newDeliverable_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable validDeliverable \u003d new DeliverableBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelDeliverable.getDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.addDeliverable(validDeliverable);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(new AddCommand(validDeliverable), modelDeliverable,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validDeliverable), expectedModelDeliverable);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_duplicateDeliverable_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableInList \u003d modelDeliverable.getDeliverableBook().getDeliverableList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new AddCommand(deliverableInList), modelDeliverable, AddCommand.MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.DeliverableBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void constructor_nullDeliverable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_deliverableAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverableStubAcceptingDeliverableAdded modelStub \u003d new ModelDeliverableStubAcceptingDeliverableAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable validDeliverable \u003d new DeliverableBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validDeliverable).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDeliverable), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(Arrays.asList(validDeliverable), modelStub.deliverablesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_duplicateDeliverable_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable validDeliverable \u003d new DeliverableBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validDeliverable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable modelStub \u003d new ModelDeliverableStubWithDeliverable(validDeliverable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                CommandException.class, AddCommand.MESSAGE_DUPLICATE_DELIVERABLE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable testA \u003d new DeliverableBuilder().withTitle(\"TestA\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable testB \u003d new DeliverableBuilder().withTitle(\"TestB\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        AddCommand addTestACommand \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        AddCommand addTestBCommand \u003d new AddCommand(testB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(addTestACommand.equals(addTestACommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(addTestACommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(addTestACommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(addTestACommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different deliverable -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(addTestACommand.equals(addTestBCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private class ModelDeliverableStub implements ModelDeliverable {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDeliverableBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void addDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDeliverableBook(ReadOnlyDeliverableBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void deleteDeliverable(Deliverable target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public Deliverable getDeliverableInView() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void setDeliverableInView(Deliverable deliverableInView) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        };"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public ObservableList\u003cDeliverable\u003e getFilteredDeliverableList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void updateFilteredDeliverableList(Predicate\u003cDeliverable\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * A Model stub that contains a single deliverable."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private class ModelDeliverableStubWithDeliverable extends ModelDeliverableStub {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        private final Deliverable deliverable;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverableStubWithDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            requireNonNull(deliverable);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.deliverable \u003d deliverable;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            requireNonNull(deliverable);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return this.deliverable.isSameDeliverable(deliverable);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * A Model stub that always accept the deliverable being added."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private class ModelDeliverableStubAcceptingDeliverableAdded extends ModelDeliverableStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final ArrayList\u003cDeliverable\u003e deliverablesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            requireNonNull(deliverable);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return deliverablesAdded.stream().anyMatch(deliverable::isSameDeliverable);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public void addDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            requireNonNull(deliverable);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            deliverablesAdded.add(deliverable);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DeliverableBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 205
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_emptyDeliverableBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable modelDeliverable \u003d new ModelDeliverableManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ClearCommand(), modelDeliverable, ClearCommand.MESSAGE_SUCCESS, expectedModelDeliverable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_nonEmptyDeliverableBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable modelDeliverable \u003d new ModelDeliverableManager(getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.setDeliverableBook(new DeliverableBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ClearCommand(), modelDeliverable, ClearCommand.MESSAGE_SUCCESS, expectedModelDeliverable);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.EditDeliverableDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_TITLE_A \u003d \"Login Page\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_TITLE_B \u003d \"Profile Page\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_MILESTONE_A \u003d \"1.2.1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_MILESTONE_B \u003d \"3.1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_DESCRIPTION_A \u003d \"Include email, username and password fields\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_DESCRIPTION_B \u003d \"Able to see archived posts\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_DEADLINE_A \u003d \"12-06-2020 14:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALID_DEADLINE_B \u003d \"12-10-2020 16:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_A \u003d \"Alice, Bob, Sarah\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_B \u003d \"Alice   Alice,    Bob    Bob, Sarah Sarah\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String TITLE_DESC_A \u003d \" \" + PREFIX_TITLE + VALID_TITLE_A;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String TITLE_DESC_B \u003d \" \" + PREFIX_TITLE + VALID_TITLE_B;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MILESTONE_DESC_A \u003d \" \" + PREFIX_MILESTONE + VALID_MILESTONE_A;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MILESTONE_DESC_B \u003d \" \" + PREFIX_MILESTONE + VALID_MILESTONE_B;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DESCRIPTION_DESC_A \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_A;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DESCRIPTION_DESC_B \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEADLINE_DESC_A \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_A;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEADLINE_DESC_B \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String CONTACTS_DESC_A \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String CONTACTS_DESC_B \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Email \u0026 Password login\"; // \u0027\u0026\u0027 not allowed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String INVALID_MILESTONE_DESC \u003d \" \" + PREFIX_MILESTONE + \"1,2,3\"; // commas not allowed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\"; // empty desc not allowed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String INVALID_BY_DESC \u003d \" \" + PREFIX_DEADLINE + \"35-10-2020 19:00\"; // invalid datetime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String INVALID_CONTACTS_DESC \u003d \" \" + PREFIX_CONTACTS + \"abc\"; // alphabets not allowed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final EditCommand.EditDeliverableDescriptor DESC_DELIVERABLE_A;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final EditCommand.EditDeliverableDescriptor DESC_DELIVERABLE_B;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DESC_DELIVERABLE_A \u003d new EditDeliverableDescriptorBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withMilestone(VALID_MILESTONE_A).withDescription(VALID_DESCRIPTION_A)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withDeadline(VALID_DEADLINE_A).withContacts(VALID_CONTACTS_A).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DESC_DELIVERABLE_B \u003d new EditDeliverableDescriptorBuilder().withTitle(VALID_TITLE_B)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withMilestone(VALID_MILESTONE_B).withDescription(VALID_DESCRIPTION_B)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withDeadline(VALID_DEADLINE_B).withContacts(VALID_CONTACTS_B).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Command command, ModelDeliverable actualModelDeliverable,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            CommandResult expectedCommandResult, ModelDeliverable expectedModelDeliverable) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            CommandResult result \u003d command.execute(actualModelDeliverable);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            assertEquals(expectedModelDeliverable, actualModelDeliverable);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ModelDeliverable, CommandResult, ModelDeliverable)}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Command command, ModelDeliverable actualModelDeliverable,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String expectedMessage, ModelDeliverable expectedModelDeliverable) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(command, actualModelDeliverable, expectedCommandResult, expectedModelDeliverable);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * - the deliverable book, filtered deliverable list and selected deliverable in {@code actualModel} remain"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Command command, ModelDeliverable actualModelDeliverable, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeliverableBook expectedDeliverableBook \u003d new DeliverableBook(actualModelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cDeliverable\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModelDeliverable));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expectedDeliverableBook, actualModelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expectedFilteredList, actualModelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deliverable at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * {@code model}\u0027s deliverable book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static void showDeliverableAtIndex(ModelDeliverable modelDeliverable, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelDeliverable.getFilteredDeliverableList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverable \u003d modelDeliverable.getFilteredDeliverableList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final String[] splitName \u003d deliverable.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(1, modelDeliverable.getFilteredDeliverableList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 129,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.showDeliverableAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.DeleteCommand.MESSAGE_DELETE_DELIVERABLE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverables;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable modelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableToDelete \u003d getTypicalDeliverables().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_DELIVERABLE_SUCCESS, deliverableToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverableManager expectedModel \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelDeliverable.getDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModel.deleteDeliverable(deliverableToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelDeliverable, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelDeliverable.getFilteredDeliverableList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(deleteCommand, modelDeliverable, MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableToDelete \u003d modelDeliverable.getFilteredDeliverableList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_DELIVERABLE_SUCCESS, deliverableToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelDeliverable.getDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.deleteDeliverable(deliverableToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showNoDeliverable(expectedModelDeliverable);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelDeliverable.getDeliverableBook().getDeliverableList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(deleteCommand, modelDeliverable, MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different deliverable -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private void showNoDeliverable(ModelDeliverable modelDeliverable) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(modelDeliverable.getFilteredDeliverableList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.DESC_DELIVERABLE_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.DESC_DELIVERABLE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_MILESTONE_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_TITLE_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.showDeliverableAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.EditCommand.EditDeliverableDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.DeliverableBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.EditDeliverableDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable modelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedDeliverable \u003d new DeliverableBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new EditDeliverableDescriptorBuilder(editedDeliverable).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DELIVERABLE_SUCCESS, editedDeliverable);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new DeliverableBook(modelDeliverable.getDeliverableBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.setDeliverable("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelDeliverable.getFilteredDeliverableList().get(0), editedDeliverable);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(editCommand, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index indexLastDeliverable \u003d Index.fromOneBased(modelDeliverable.getFilteredDeliverableList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable lastDeliverable \u003d modelDeliverable.getFilteredDeliverableList().get("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                indexLastDeliverable.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeliverableBuilder deliverableInList \u003d new DeliverableBuilder(lastDeliverable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedDeliverable \u003d deliverableInList.withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withMilestone(VALID_MILESTONE_A).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor descriptor \u003d new EditDeliverableDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withTitle(VALID_TITLE_A).withMilestone(VALID_MILESTONE_A).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastDeliverable, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DELIVERABLE_SUCCESS, editedDeliverable);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new DeliverableBook(modelDeliverable.getDeliverableBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.setDeliverable(lastDeliverable, editedDeliverable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(editCommand, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditDeliverableDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedDeliverable \u003d modelDeliverable.getFilteredDeliverableList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DELIVERABLE_SUCCESS, editedDeliverable);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new DeliverableBook(modelDeliverable.getDeliverableBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(editCommand, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableInFilteredList \u003d modelDeliverable.getFilteredDeliverableList().get("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedDeliverable \u003d new DeliverableBuilder(deliverableInFilteredList)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new EditDeliverableDescriptorBuilder().withTitle(VALID_TITLE_B).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DELIVERABLE_SUCCESS, editedDeliverable);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ModelDeliverable expectedModelDeliverable \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ModelDeliverableManager(new DeliverableBook("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        modelDeliverable.getDeliverableBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.setDeliverable("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                modelDeliverable.getFilteredDeliverableList().get(0), editedDeliverable);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(editCommand, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_duplicateDeliverableUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable firstDeliverable \u003d modelDeliverable.getFilteredDeliverableList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor descriptor \u003d new EditDeliverableDescriptorBuilder("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                firstDeliverable).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelDeliverable, EditCommand.MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_duplicateDeliverableFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // edit meeting in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableInList \u003d modelDeliverable.getDeliverableBook().getDeliverableList()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new EditDeliverableDescriptorBuilder(deliverableInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelDeliverable, EditCommand.MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_invalidDeliverableIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelDeliverable.getFilteredDeliverableList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor descriptor \u003d new EditDeliverableDescriptorBuilder().withTitle("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelDeliverable, MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * but smaller than size of deliverable book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_invalidDeliverableIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelDeliverable.getDeliverableBook().getDeliverableList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new EditDeliverableDescriptorBuilder().withTitle(VALID_TITLE_B).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelDeliverable, MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_DELIVERABLE_A);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor copyDescriptor \u003d new EditDeliverableDescriptor("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                DESC_DELIVERABLE_A);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        //        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        //        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_DELIVERABLE_A)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_DELIVERABLE_B)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/EditDeliverableDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.DESC_DELIVERABLE_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.DESC_DELIVERABLE_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_MILESTONE_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.EditCommand.EditDeliverableDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.testutil.EditDeliverableDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class EditDeliverableDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor descriptorWithSameValues \u003d new EditDeliverableDescriptor(DESC_DELIVERABLE_A);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(DESC_DELIVERABLE_A.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(DESC_DELIVERABLE_A.equals(DESC_DELIVERABLE_A));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(DESC_DELIVERABLE_B));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditDeliverableDescriptor editedA \u003d new EditDeliverableDescriptorBuilder("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                DESC_DELIVERABLE_A).withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(editedA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different milestone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        editedA \u003d new EditDeliverableDescriptorBuilder(DESC_DELIVERABLE_A).withMilestone(VALID_MILESTONE_B).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(editedA));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        editedA \u003d new EditDeliverableDescriptorBuilder(DESC_DELIVERABLE_A).withDeadline(VALID_DEADLINE_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(editedA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        editedA \u003d new EditDeliverableDescriptorBuilder(DESC_DELIVERABLE_A).withDescription(VALID_DESCRIPTION_B).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(editedA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        editedA \u003d new EditDeliverableDescriptorBuilder(DESC_DELIVERABLE_A).withContacts(VALID_CONTACTS_B).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(DESC_DELIVERABLE_A.equals(editedA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELIVERABLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.HOME_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.NAVIGATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.SORT_AND_FILTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable modelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable expectedModelDeliverable \u003d new ModelDeliverableManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new TitleDescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new TitleDescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // different deliverable -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_zeroKeywords_noDeliverableFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERABLES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.updateFilteredDeliverableList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(command, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(Collections.emptyList(), modelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_multipleTitleKeywords_multipleDeliverablesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERABLES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"build navigation filter\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.updateFilteredDeliverableList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(command, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                Arrays.asList(HOME_PAGE, NAVIGATION, SORT_AND_FILTER), modelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_multipleDescriptionKeywords_multipleDeliverablesFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERABLES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"company box\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.updateFilteredDeliverableList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(command, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(Arrays.asList(HOME_PAGE, SORT_AND_FILTER), modelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_multipleTitleDescriptionKeywords_multipleDeliverablesFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERABLES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"filter tab\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable.updateFilteredDeliverableList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess(command, modelDeliverable, expectedMessage, expectedModelDeliverable);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(Arrays.asList(NAVIGATION, SORT_AND_FILTER), modelDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private TitleDescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverable/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.commands.deliverable.CommandTestUtil.showDeliverableAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.getTypicalDeliverableBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ModelDeliverable expectedModelDeliverable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable \u003d new ModelDeliverableManager(getTypicalDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        expectedModelDeliverable \u003d new ModelDeliverableManager(modelDeliverable.getDeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ListCommand(), modelDeliverable, ListCommand.MESSAGE_SUCCESS, expectedModelDeliverable);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showDeliverableAtIndex(modelDeliverable, INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ListCommand(), modelDeliverable, ListCommand.MESSAGE_SUCCESS, expectedModelDeliverable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStubAcceptingMeetingAdded modelStub \u003d new ModelMeetingStubAcceptingMeetingAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Arrays.asList(validMeeting), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validMeeting);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStub modelStub \u003d new ModelMeetingStubWithMeeting(validMeeting);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_MEETING, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting testA \u003d new MeetingBuilder().withTitle(\"TestA\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting testB \u003d new MeetingBuilder().withTitle(\"TestB\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addTestACommand \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addTestBCommand \u003d new AddCommand(testB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(addTestACommand.equals(addTestACommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(addTestACommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(addTestBCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStub implements ModelMeeting {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeetingBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void addMeeting(Meeting person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeetingBook(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        public Meeting getMeetingInView() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        public void setMeetingInView(Meeting meetingInView) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStubWithMeeting extends ModelMeetingStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private final Meeting meeting;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStubWithMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return this.meeting.isSameMeeting(person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStubAcceptingMeetingAdded extends ModelMeetingStub {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        final ArrayList\u003cMeeting\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return personsAdded.stream().anyMatch(meeting::isSameMeeting);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            personsAdded.add(meeting);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new MeetingBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 10,
      "MerlinLim": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TITLE_A \u003d \"Complete Release\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TITLE_B \u003d \"Finalise UG\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_DESCRIPTION_A \u003d \"With business associates\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_DESCRIPTION_B \u003d \"With product designers\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_FROM_A \u003d \"01-01-2020 14:00\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_FROM_B \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TO_A \u003d \"02-01-2020 14:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TO_B \u003d \"02-01-2020 12:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_A \u003d \"Alice, Bob, Cameron\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_B \u003d \"Jeannie, Justin, Lenny Sarah\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_LOCATION_A \u003d \"Singapore\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_LOCATION_B \u003d \"Jakarta\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_DESC_A \u003d \" \" + PREFIX_TITLE + VALID_TITLE_A;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_DESC_B \u003d \" \" + PREFIX_TITLE + VALID_TITLE_B;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DESCRIPTION_DESC_A \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_A;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DESCRIPTION_DESC_B \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_DESC_A \u003d \" \" + PREFIX_FROM + VALID_FROM_A;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_DESC_B \u003d \" \" + PREFIX_FROM + VALID_FROM_B;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_DESC_A \u003d \" \" + PREFIX_TO + VALID_TO_A;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_DESC_B \u003d \" \" + PREFIX_TO + VALID_TO_B;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String CONTACTS_DESC_A \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String CONTACTS_DESC_B \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String LOCATION_DESC_A \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_A;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String LOCATION_DESC_B \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_B;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"\"; // \"\" empty not allowed not allowed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\"; // empty not allowed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_FROM_DESC \u003d \" \" + PREFIX_FROM + \"3-03-2020 09:30\"; // missing \u00270\u0027 digit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_TO_DESC \u003d \" \" + PREFIX_TO + \"03-03-2020 0930\"; // missing colon"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_CONTACTS_DESC \u003d \" \" + PREFIX_CONTACTS + \"1 2 3\"; // no commas"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"\"; // empty not allowed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final EditCommand.EditMeetingDescriptor DESC_MEETING_A;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final EditCommand.EditMeetingDescriptor DESC_MEETING_B;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DESC_MEETING_A \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_A).withFrom(VALID_FROM_A).withTo(VALID_TO_A)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withContacts(VALID_CONTACTS_A).withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DESC_MEETING_B \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_B)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_B).withFrom(VALID_FROM_B).withTo(VALID_TO_B)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withContacts(VALID_CONTACTS_B).withLocation(VALID_LOCATION_B).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelMeeting actualModelMeeting,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                                            CommandResult expectedCommandResult, ModelMeeting expectedModelPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            CommandResult result \u003d command.execute(actualModelMeeting);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedModelPerson, actualModelMeeting);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ModelMeeting, CommandResult, ModelMeeting)}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelMeeting actualModelMeeting, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                                            ModelMeeting expectedModelMeeting) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, actualModelMeeting, expectedCommandResult, expectedModelMeeting);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the meeting book, filtered meeting list and selected meeting in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandFailure(Command command, ModelMeeting actualModelMeeting, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        MeetingBook expectedMeetingBook \u003d new MeetingBook(actualModelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModelMeeting));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedMeetingBook, actualModelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedFilteredList, actualModelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * {@code model}\u0027s meeting book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void showMeetingAtIndex(ModelMeeting modelMeeting, Index targetIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelMeeting.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meeting \u003d modelMeeting.getFilteredMeetingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        final String[] splitName \u003d meeting.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(new TitleDescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(1, modelMeeting.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "MerlinLim": 126,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.showMeetingAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.DeleteCommand.MESSAGE_DELETE_MEETING_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.DeleteCommand.MESSAGE_MEETING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting modelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Meeting meetingToDelete \u003d getTypicalMeeting().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingManager expectedModel \u003d new ModelMeetingManager(modelMeeting.getMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModel.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelMeeting, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelMeeting.getFilteredMeetingList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(deleteCommand, modelMeeting, MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Meeting personToDelete \u003d modelMeeting.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_MEETING_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelPerson \u003d new ModelMeetingManager(modelMeeting.getMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelPerson.deleteMeeting(personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        showNoMeeting(expectedModelPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelMeeting, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of meeting book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMeeting.getMeetingBook().getMeetingList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(deleteCommand, modelMeeting, MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private void showNoMeeting(ModelMeeting modelMeeting) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(modelMeeting.getFilteredMeetingList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 12,
      "chrystalquek": 2,
      "MerlinLim": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.DESC_MEETING_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.DESC_MEETING_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.showMeetingAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.EditCommand.EditMeetingDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting modelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedPerson \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelPerson \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new ModelMeetingManager(new MeetingBook(modelMeeting.getMeetingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelPerson.setMeeting(modelMeeting.getFilteredMeetingList().get(0), editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(editCommand, modelMeeting, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index indexLastMeeting \u003d Index.fromOneBased(modelMeeting.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting lastMeeting \u003d modelMeeting.getFilteredMeetingList().get(indexLastMeeting.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        MeetingBuilder meetingInList \u003d new MeetingBuilder(lastMeeting);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeeting \u003d meetingInList.withTitle(VALID_TITLE_A).withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastMeeting, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelMeeting \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new ModelMeetingManager(new MeetingBook(modelMeeting.getMeetingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.setMeeting(lastMeeting, editedMeeting);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(editCommand, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditMeetingDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Meeting editedMeeting \u003d modelMeeting.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelMeeting \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new ModelMeetingManager(new MeetingBook(modelMeeting.getMeetingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(editCommand, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Meeting personInFilteredList \u003d modelMeeting.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(personInFilteredList).withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_B).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelMeeting \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new ModelMeetingManager(new MeetingBook(modelMeeting.getMeetingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.setMeeting(modelMeeting.getFilteredMeetingList().get(0), editedMeeting);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(editCommand, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_duplicateMeetingUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Meeting firstMeeting \u003d modelMeeting.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(firstMeeting).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(editCommand, modelMeeting, EditCommand.MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_duplicateMeetingFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // edit meeting in filtered list into a duplicate in meeting book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingInList \u003d modelMeeting.getMeetingBook().getMeetingList()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new EditMeetingDescriptorBuilder(meetingInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(editCommand, modelMeeting, EditCommand.MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidMeetingIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelMeeting.getFilteredMeetingList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelMeeting, MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * but smaller than size of meeting book"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidMeetingIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of meeting book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMeeting.getMeetingBook().getMeetingList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_B).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertCommandFailure(editCommand, modelMeeting, MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_MEETING_A);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor copyDescriptor \u003d new EditMeetingDescriptor(DESC_MEETING_A);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_MEETING_A)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_MEETING_B)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 22,
      "chrystalquek": 3,
      "MerlinLim": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.FindCommand.MESSAGE_MEETINGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_E;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting modelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting expectedModelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new TitleDescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new TitleDescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_zeroKeywords_noMeetingFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Collections.emptyList(), modelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_multipleNameKeywords_multipleMeetingsFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Final\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Arrays.asList(MEETING_C), modelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_multipleDescriptionKeywords_multipleMeetingsFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"features\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Arrays.asList(MEETING_C, MEETING_D), modelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_multipleTitleKeywords_multipleMeetingsFound() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TitleDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Mid\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, modelMeeting, expectedMessage, expectedModelMeeting);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // description with \u0027disucss\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Arrays.asList(MEETING_D, MEETING_E), modelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private TitleDescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.showMeetingAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting modelMeeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting expectedModelMeeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelMeeting \u003d new ModelMeetingManager(modelMeeting.getMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelMeeting, ListCommand.MESSAGE_SUCCESS, expectedModelMeeting);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelMeeting, ListCommand.MESSAGE_SUCCESS, expectedModelMeeting);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            CommandResult expectedCommandResult) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, CommandResult)}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, expectedCommandResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), expectedCommandResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), expectedCommandResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_validMode_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchPersonCommand \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedPersonMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.PERSON);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchPersonCommand, new CommandResult(expectedPersonMessage, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.PERSON));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchDeliverableCommand \u003d new SwitchCommand(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedDeliverableMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchDeliverableCommand, new CommandResult(expectedDeliverableMessage, false, false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.DELIVERABLE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchMeetingCommand \u003d new SwitchCommand(ModeEnum.MEETING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMeetingMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.MEETING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchMeetingCommand, new CommandResult(expectedMeetingMessage, false, false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.MEETING));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchFirstCommand \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchSecondCommand \u003d new SwitchCommand(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchFirstCommandCopy \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(switchSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "chrystalquek": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), modelPerson,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModelPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personInList \u003d modelPerson.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), modelPerson, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "chrystalquek": 9,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStubAcceptingPersonAdded modelStub \u003d new ModelPersonStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStub modelStub \u003d new ModelPersonStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStub implements ModelPerson {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        public Person getPersonInView() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        public void setPersonInView(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStubWithPerson extends ModelPersonStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStubAcceptingPersonAdded extends ModelPersonStub {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 8,
      "-": 185,
      "chrystalquek": 9,
      "claraadora": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson modelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), modelPerson, ClearCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), modelPerson, ClearCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chrystalquek": 7,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_ROLE_AMY \u003d \"stk\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_ROLE_BOB \u003d \"dev\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"End user\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"Frontend engineer\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"friend\"; // \u0027friend\u0027 not allowed in roles"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \" \"; // \u0027\u0027 not allowed in roles"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelPerson actualModelPerson,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                                            CommandResult expectedCommandResult, ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            CommandResult result \u003d command.execute(actualModelPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedModelPerson, actualModelPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ModelPerson, CommandResult, ModelPerson)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelPerson actualModelPerson, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, actualModelPerson, expectedCommandResult, expectedModelPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandFailure(Command command, ModelPerson actualModelPerson, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModelPerson.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModelPerson));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedAddressBook, actualModelPerson.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedFilteredList, actualModelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void showPersonAtIndex(ModelPerson modelPerson, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person person \u003d modelPerson.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(new NameDescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(1, modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "chrystalquek": 39,
      "claraadora": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person personToDelete \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager expectedModel \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelPerson, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(deleteCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person personToDelete \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showNoPerson(expectedModelPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelPerson.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(deleteCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void showNoPerson(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(modelPerson.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 12,
      "-": 76,
      "chrystalquek": 15,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(modelPerson.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person lastPerson \u003d modelPerson.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person editedPerson \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person personInFilteredList \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(modelPerson.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person firstPerson \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Person personInList \u003d modelPerson.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelPerson.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 19,
      "-": 116,
      "chrystalquek": 19,
      "claraadora": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chrystalquek": 3,
      "claraadora": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson expectedModelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Collections.emptyList(), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_multipleNameKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_multipleDescriptionKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"user business analyst\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARL, GEORGE), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_multipleNameDescriptionKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz user\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Fiona description contains \"Kurz\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARL, FIONA, GEORGE), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private NameDescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new NameDescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "chrystalquek": 41,
      "claraadora": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson expectedModelPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelPerson, ListCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelPerson, ListCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "-": 25,
      "chrystalquek": 6,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.DESCRIPTION_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.DESCRIPTION_DESC_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_CONTACTS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_FROM_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_TO_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.LOCATION_DESC_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.LOCATION_DESC_B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TITLE_DESC_A;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TITLE_DESC_B;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_A;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_B;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_A;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_B;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple TITLES - last TITLE accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_A + TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple DESCRIPTIONS - last DESCRIPTION accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_A + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple FROMS - last FROM accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_A + FROM_DESC_B"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple TOS - last TO accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple CONTACTS - last CONTACTS accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_A + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple LOCATIONS - last LOCATION accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_A + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting expectedMeetingWithoutLocation \u003d new MeetingBuilder(MEETING_A).withLocation().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_A + DESCRIPTION_DESC_A + FROM_DESC_A + TO_DESC_A + CONTACTS_DESC_A,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new AddCommand(expectedMeetingWithoutLocation));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting expectedMeetingWithoutDescription \u003d new MeetingBuilder(MEETING_A).withDescription().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_A + FROM_DESC_A + TO_DESC_A + CONTACTS_DESC_A + LOCATION_DESC_A,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new AddCommand(expectedMeetingWithoutDescription));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting expectedMeetingWithoutContacts \u003d new MeetingBuilder(MEETING_A).withContacts().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_A + DESCRIPTION_DESC_A + FROM_DESC_A + TO_DESC_A + LOCATION_DESC_A,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new AddCommand(expectedMeetingWithoutContacts));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // missing TITLE prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_B + FROM_DESC_B,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // missing FROM prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + VALID_FROM_B,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_B + VALID_FROM_B,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //TODO: Modify INVALID types"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid TITLE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid DESCRIPTION"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + INVALID_DESCRIPTION_DESC + FROM_DESC_B"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid FROM"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + INVALID_FROM_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid TO"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + INVALID_TO_DESC + CONTACTS_DESC_B + LOCATION_DESC_B, To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid CONTACTS"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + INVALID_CONTACTS_DESC + LOCATION_DESC_A, Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid LOCATION"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + TO_DESC_B + CONTACTS_DESC_B + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + INVALID_TO_DESC + INVALID_CONTACTS_DESC + LOCATION_DESC_A, To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                        + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "MerlinLim": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_FROM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.LOCATION_DESC_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TITLE_DESC_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_A;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_A;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_B;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand.EditMeetingDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private static final String EMPTY \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // TODO:Create Meeting Templates"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // TODO:Create Meeting Templates"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FROM_DESC_A"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + CONTACTS_DESC_A + TITLE_DESC_A;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withContacts(VALID_CONTACTS_A).withFrom(VALID_FROM_A).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTACTS_DESC_B + LOCATION_DESC_A;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withContacts(VALID_CONTACTS_B)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_A;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withTitle(VALID_TITLE_A).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // From"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FROM_DESC_A;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor \u003d new EditMeetingDescriptorBuilder().withFrom(VALID_FROM_A).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Location"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_A;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor \u003d new EditMeetingDescriptorBuilder().withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FROM_DESC_A + TO_DESC_A"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + FROM_DESC_A + TO_DESC_A"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + FROM_DESC_B + TO_DESC_B;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withFrom(VALID_FROM_B)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTo(VALID_TO_B)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_FROM_DESC + FROM_DESC_B;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withFrom(VALID_FROM_B).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TO_DESC_B + INVALID_FROM_DESC"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                + FROM_DESC_B;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor \u003d new EditMeetingDescriptorBuilder().withFrom(VALID_FROM_B).withTo(VALID_TO_B)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 8,
      "MerlinLim": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new FindCommand(new TitleDescriptionContainsKeywordsPredicate(Arrays.asList(\"discuss\", \"final\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, \"discuss final\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, \" \\n discuss \\n \\t final  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/ModeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.ModeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeParser parser \u003d new ModeParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand command \u003d (SwitchCommand) parser.parseCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(new SwitchCommand(ModeEnum.PERSON), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_isModeCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.mode.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.mode.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_validArgs_returnsSwitchCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ModeEnum.PERSON.toString().toLowerCase(), new SwitchCommand(ModeEnum.PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.ROLE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPersonWithoutPhone \u003d new PersonBuilder(AMY).withPhone().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ROLE_DESC_AMY + NAME_DESC_AMY + EMAIL_DESC_AMY + DESCRIPTION_DESC_AMY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new AddCommand(expectedPersonWithoutPhone));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPersonWithoutDescription \u003d new PersonBuilder(AMY).withDescription().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new AddCommand(expectedPersonWithoutDescription));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // missing role"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE_BOB + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + INVALID_DESCRIPTION_DESC, OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // empty preamble"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "chrystalquek": 66,
      "claraadora": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(new FindCommand(new NameDescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 5,
      "-": 71,
      "chrystalquek": 4,
      "claraadora": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 2,
      "-": 26,
      "chrystalquek": 2,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 8,
      "-": 127,
      "chrystalquek": 15,
      "claraadora": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new FindCommand(new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"user\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, \"Alice user\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t user  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "chrystalquek": 6,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_PHONE \u003d Optional.of(\"+651234\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_PHONE \u003d Optional.of(\"123456\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String VALID_ROLE \u003d \"stk\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Optional\u003cString\u003e phoneWithWhitespace \u003d Optional.of(WHITESPACE + VALID_PHONE.get() + WHITESPACE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRole(INVALID_ROLE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_validValueWithoutWhitespace_returnsRole() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role expectedRole \u003d Role.getRole(VALID_ROLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(VALID_ROLE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_validValueWithWhitespace_returnsTrimmedRole() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String roleWithWhitespace \u003d WHITESPACE + VALID_ROLE + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role expectedRole \u003d Role.getRole(VALID_ROLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(roleWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "-": 97,
      "chrystalquek": 30,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 96,
      "chrystalquek": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelPersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModelPersonManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPersonManager modelManager \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelManager \u003d new ModelPersonManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager modelManagerCopy \u003d new ModelPersonManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameDescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "chrystalquek": 10,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliverable/deliverable/DeliverableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.HOME_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.NAVIGATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.testutil.DeliverableBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //Not implemented yet"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void isSameDeliverable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(HOME_PAGE.isSameDeliverable(HOME_PAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.isSameDeliverable(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different title, everything else same -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedHomepage \u003d new DeliverableBuilder(HOME_PAGE).withTitle(\"Implement home page\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.isSameDeliverable(editedHomepage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same title, different other attributes -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable editedNavigation \u003d new DeliverableBuilder(NAVIGATION).withTitle(\"Build home page\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(HOME_PAGE.isSameDeliverable(editedNavigation));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable homepageCopy \u003d new DeliverableBuilder(HOME_PAGE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(HOME_PAGE.equals(homepageCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(HOME_PAGE.isSameDeliverable(HOME_PAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different deliverable -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.equals(NAVIGATION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable editedHomepage \u003d new DeliverableBuilder(HOME_PAGE).withTitle(\"Implement home page\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertFalse(HOME_PAGE.isSameDeliverable(editedHomepage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different milestone -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 14,
      "shadowezz": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliverable/deliverable/MilestoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class MilestoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Milestone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void constructor_invalidMilestone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String invalidMilestone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Milestone(invalidMilestone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void isValidMilestone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // null milestone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Milestone.isValidMilestone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // blank milestone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\" \")); // only spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // invalid characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\"hello\")); // alphabets"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\"!@#$%^\u0026*(),\")); // special characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // invalid format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\".1.1\")); // does not start with number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\"1.1.\")); // does not end with number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(Milestone.isValidMilestone(\"1..1\")); // consecutive dots"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // valid milestone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(Milestone.isValidMilestone(\"1\")); // simplest milestone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(Milestone.isValidMilestone(\"1.1\")); // standard milestone"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(Milestone.isValidMilestone(\"1.1.1.1.1.1.1.1.1.1\")); // very long milestone"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(Milestone.isValidMilestone(\"10.10.111\")); // multiple digit numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/meeting/FromToTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class FromToTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new To(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new From(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_invalidFrom_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String invalidFrom \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new To(invalidFrom));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new From(invalidFrom));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    // isValidFrom and isValidTo is tested via DateTime test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/meeting/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location((String) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null Location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // blank location"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(Location.isValidLocation(\"   \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Invalid input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(Location.isValidLocation(\" Serangoon\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Valid location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Serangoon\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Serangoon North\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Serangoon North Blk 452 #01-03\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"S e r a n g o o n\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"S1rango3on\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Location.isValidLocation(\"123\u0026\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class MeetingTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(MEETING_A.isSameMeeting(MEETING_A));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null-\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(MEETING_A.isSameMeeting(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different contact and location -\u003e return false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withContacts(VALID_CONTACTS_B).withLocation(VALID_LOCATION_B).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(MEETING_A.isSameMeeting(editedMeeting));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different Title -\u003e return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(MEETING_A.isSameMeeting(editedMeeting));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different from  -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withFrom(VALID_FROM_B).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(MEETING_A.isSameMeeting(editedMeeting));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different to -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withFrom(VALID_TO_B).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(MEETING_A.isSameMeeting(editedMeeting));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        // TODO:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        // same name, same from, same to, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //                .withDescription(VALID_DESCRIPTION_B)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //                .withContacts(VALID_CONTACTS_B)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //                .withLocation(VALID_LOCATION_B).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //        assertFalse(MEETING_A.isSameMeeting(editedMeeting));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void isValidFromAndTo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // FROM \u003c TO -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Meeting.isValidFromAndTo(new From(VALID_FROM_A), new To(VALID_TO_A)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // FROM \u003d TO -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(Meeting.isValidFromAndTo(new From(VALID_FROM_A), new To(VALID_FROM_A)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // From \u003e To -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(Meeting.isValidFromAndTo(new From(VALID_TO_A), new To(VALID_FROM_A)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingACopy \u003d new MeetingBuilder(MEETING_A).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(MEETING_A.equals(meetingACopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(MEETING_A.equals(MEETING_A));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(5));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(MEETING_B));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different optional -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_B).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different from -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withFrom(VALID_FROM_B).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different to -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTitle(VALID_TO_B).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTitle(VALID_CONTACTS_B).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        editedMeeting \u003d new MeetingBuilder(MEETING_A)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .withTitle(VALID_TITLE_B).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(meetingACopy.equals(editedMeeting));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/meeting/UniqueMeetingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class UniqueMeetingListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void contains_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void contains_meetingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(uniqueMeetingList.contains(MEETING_A));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void contains_meetingInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(MEETING_A));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    // TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public void contains_MeetingWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //        Meeting editedMeetingA \u003d new MeetingBuilder(MEETING_A).withDescription(VALID_DESCRIPTION_B)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //        assertTrue(uniqueMeetingList.contains(editedMeetingA));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void add_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void add_duplicateMeeting_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(MEETING_A));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_nullTargetMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, MEETING_A));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_nullEditedMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING_A, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_targetMeetingNotInList_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING_A, MEETING_A));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_editedMeetingIsSameMeeting_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.setMeeting(MEETING_A, MEETING_A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedUniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_editedMeetingHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeetingA \u003d new MeetingBuilder(MEETING_A).withDescription(VALID_DESCRIPTION_B)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.setMeeting(MEETING_A, editedMeetingA);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedUniqueMeetingList.add(editedMeetingA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_editedMeetingHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.setMeeting(MEETING_A, MEETING_B);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedUniqueMeetingList.add(MEETING_B);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeeting_editedMeetingHasNonUniqueIdentity_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_B);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING_A, MEETING_B));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void remove_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void remove_meetingDoesNotExist_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(MEETING_A));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void remove_existingMeeting_removesMeeting() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.remove(MEETING_A);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeetings_nullUniqueMeetingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvidedUniqueMeetingList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedUniqueMeetingList.add(MEETING_B);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.setMeetings(expectedUniqueMeetingList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeetings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeetings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.add(MEETING_A);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d Collections.singletonList(MEETING_B);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        uniqueMeetingList.setMeetings(meetingList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedUniqueMeetingList.add(MEETING_B);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void setMeetings_listWithDuplicateMeetings_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e listWithDuplicateMeetings \u003d Arrays.asList(MEETING_A, MEETING_A);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicateMeetings));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                uniqueMeetingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/NameDescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class NameDescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void test_nameDescriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Multiple keywords (name)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Multiple keywords (description)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Business\", \"analyst\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withDescription(\"Business analyst\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Only one matching keyword (name)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Only one matching keyword (mix)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\", \"user\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Bob\").withDescription(\"End user\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void test_nameDescriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        NameDescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new NameDescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Non-matching keyword (name)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withDescription().build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Non-matching keyword (description)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate(Arrays.asList(\"analyst\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withDescription(\"End user\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Keywords match phone and email, but does not match name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        predicate \u003d new NameDescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Name peterJack \u003d new Name(\"peter jack\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Name peterJackCaps \u003d new Name(\"Peter Jack\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Name peter \u003d new Name(\"peter\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // small letter \u003e big letter"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(peterJack.compareTo(peterJackCaps) \u003e 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // longer name \u003e shorter name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(peterJack.compareTo(peter) \u003e 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e peterJack.compareTo(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 16,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different role -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withRole(VALID_ROLE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 13,
      "-": 73,
      "claraadora": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class RoleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.getRole(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Role.getRole(invalidRole));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null Role"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid Roles"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"Role\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // valid Roles"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(Role.isValidRole(\"stk\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(Role.isValidRole(\"dev\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void add_person_sortSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void setPerson_sortSuccess() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(CARL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.setPerson(CARL, ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void remove_person_sortSuccess() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        uniquePersonList.add(CARL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.add(CARL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedUniquePersonList.remove(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 40,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/util/PersonComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class PersonComparatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final PersonComparator personComparator \u003d new PersonComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void isCorrectOrder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(personComparator.compare(ALICE, ALICE) \u003d\u003d 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(personComparator.compare(ALICE, BENSON) \u003c 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(personComparator.compare(BENSON, ALICE) \u003e 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Alice Pauline \u003c alice Pauline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(\"alice Pauline\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(personComparator.compare(ALICE, editedAlice) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Alice Pauline \u003e Alice"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(\"Alice\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(personComparator.compare(ALICE, editedAlice) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null Persons"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personComparator.compare(null, ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personComparator.compare(ALICE, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_SAMPLE_A \u003d \"30-11-9999 10:00\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_SAMPLE_B \u003d \"28-02-0001 10:00\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_SAMPLE_C \u003d \"29-02-1996 10:01\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_SAMPLE_A \u003d \"01-1-2020 23:59\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_SAMPLE_B \u003d \"01-01-2020\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_SAMPLE_C \u003d \"29-02-2019 23:00:59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_SAMPLE_D \u003d \"31-11-2020 23:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_SAMPLE_E \u003d \"29-02-2019 23:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void isValidDateTimeSuccess() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Date and Time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(DateTime.isValidDateTimePattern(VALID_SAMPLE_A));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(DateTime.isValidDateTimePattern(VALID_SAMPLE_B));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(DateTime.isValidDateTimePattern(VALID_SAMPLE_C));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parseSuccess() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime dtA \u003d new DateTime(VALID_SAMPLE_A);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime dtB \u003d new DateTime(VALID_SAMPLE_B);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime dtC \u003d new DateTime(VALID_SAMPLE_C);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_SAMPLE_A, dtA.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_SAMPLE_B, dtB.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_SAMPLE_C, dtC.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parseFail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Fail pattern"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // E.g Missing digit, missing date, additional digits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertExceptionMessage(INVALID_SAMPLE_A, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertExceptionMessage(INVALID_SAMPLE_B, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertExceptionMessage(INVALID_SAMPLE_C, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Fail Range"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // E.g Months with too many days 29-02-2019"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertExceptionMessage(INVALID_SAMPLE_D, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertExceptionMessage(INVALID_SAMPLE_E, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void compareSuccess() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime a \u003d new DateTime(VALID_SAMPLE_A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime b \u003d new DateTime(VALID_SAMPLE_B);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(a.compareTo(b) \u003e 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(b.compareTo(a) \u003c 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(a.compareTo(a) \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void assertExceptionMessage(String test, String messageConstraint) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            new DateTime(test);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (IllegalArgumentException pe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(messageConstraint,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    pe.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/TimeEventComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.HOME_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.NAVIGATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.MEETING_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "class TimeEventComparatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private TimeEventComparator timeEventComparator \u003d new TimeEventComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    void compare_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e timeEventComparator.compare(MEETING_A, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    void compare_nullDeliverable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e timeEventComparator.compare(HOME_PAGE, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    void compare_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // MEETING_A starts after MEETING_B"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(timeEventComparator.compare(MEETING_A, MEETING_B) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(timeEventComparator.compare(MEETING_B, MEETING_A) \u003c 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // NAVIGATION is due after HOME_PAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(timeEventComparator.compare(NAVIGATION, HOME_PAGE) \u003e 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertTrue(timeEventComparator.compare(HOME_PAGE, NAVIGATION) \u003c 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        // Equal priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(timeEventComparator.compare(MEETING_A, MEETING_A), 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(timeEventComparator.compare(HOME_PAGE, HOME_PAGE), 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StoragePersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class StoragePersonManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private StoragePersonManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storageManager \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "chrystalquek": 6,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.storage.person.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_PHONE \u003d Optional.of(\"+651234\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_DESCRIPTION \u003d Optional.of(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_PHONE \u003d Optional.of(BENSON.getPhone().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DESCRIPTION \u003d Optional.of(BENSON.getDescription().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String VALID_ROLE \u003d BENSON.getRole().getArgument();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_nullRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                null, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_invalidRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ROLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d OptionalDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OptionalDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "chrystalquek": 47,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonAddressBookStoragePersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class JsonAddressBookStoragePersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "chrystalquek": 3,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "chrystalquek": 1,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonUserPrefsStoragePersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class JsonUserPrefsStoragePersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "chrystalquek": 1,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * A utility class to help with building DeliverableBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " *     {@code DeliverableBook ab \u003d new DeliverableBookBuilder().withTitle(\"Profile screens\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeliverableBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private DeliverableBook deliverableBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableBook \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder(DeliverableBook deliverableBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deliverableBook \u003d deliverableBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Adds a new {@code Deliverable} to the {@code DeliverableBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder withDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A utility class to help with building Deliverable objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Deliverable1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String DEFAULT_MILESTONE \u003d \"1.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Finalise features\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final boolean DEFAULT_IS_COMPLETE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_CONTACTS \u003d \"Michael, Samuel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Milestone milestone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private OptionalDescription description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Contacts contacts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        milestone \u003d new Milestone(DEFAULT_MILESTONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d new OptionalDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d new Contacts(DEFAULT_CONTACTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d DEFAULT_IS_COMPLETE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Initializes the DeliverableBuilder with the data of {@code deliverableToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder(Deliverable deliverableToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        title \u003d deliverableToCopy.getTitle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        milestone \u003d deliverableToCopy.getMilestone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d deliverableToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d deliverableToCopy.getDeadline();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d deliverableToCopy.getContacts();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d deliverableToCopy.getIsComplete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Title} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the {@code Milestone} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder withMilestone(String milestone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.milestone \u003d new Milestone(milestone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Description} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Contacts} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the {@code isComplete} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder withIsComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable(title, milestone, description, deadline, isComplete, contacts);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 45,
      "shadowezz": 59,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * A utility class for Deliverable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeliverableUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns an add command string for adding the {@code deliverable}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getAddCommand(Deliverable deliverable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getDeliverableDetails(deliverable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the part of command string for the given {@code deliverable}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getDeliverableDetails(Deliverable deliverable) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(PREFIX_TITLE + deliverable.getTitle().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(PREFIX_MILESTONE + deliverable.getMilestone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverable.getDescription().value.ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION + description + \" \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sb.append(PREFIX_DEADLINE + deliverable.getDeadline().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverable.getContacts().value.ifPresent(contacts -\u003e sb.append(PREFIX_CONTACTS + contacts + \" \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the part of command string for the given {@code EditDeliverableDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getEditDeliverableDescriptorDetails() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 41,
      "shadowezz": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditDeliverableDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Milestone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class EditDeliverableDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private EditCommand.EditDeliverableDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor \u003d new EditCommand.EditDeliverableDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder(EditCommand.EditDeliverableDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditDeliverableDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns an {@code EditDeliverableDescriptor} with fields containing {@code Deliverable}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder(Deliverable deliverable) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor \u003d new EditCommand.EditDeliverableDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setTitle(deliverable.getTitle());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setMilestone(deliverable.getMilestone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setDescription(deliverable.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setDeadline(deliverable.getDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setContacts(deliverable.getContacts());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setIsComplete(deliverable.getIsComplete());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Title} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Milestone} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withMilestone(String milestone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setMilestone(new Milestone(milestone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code OptionalDescription} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setDescription(new OptionalDescription(description));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code To} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setContacts(new Contacts(contacts));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code isCompleted} of the {@code EditDeliverableDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditDeliverableDescriptorBuilder withIsCompleted(boolean isCompleted) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        descriptor.setIsComplete(isCompleted);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public EditCommand.EditDeliverableDescriptor build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMeetingDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand.EditMeetingDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class EditMeetingDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private EditMeetingDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor \u003d new EditMeetingDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder(EditMeetingDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.descriptor \u003d new EditMeetingDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns an {@code EditMeetingDescriptor} with fields containing {@code Meeting}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder(Meeting meeting) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor \u003d new EditMeetingDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setTitle(meeting.getTitle());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setDescription(meeting.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setFrom(meeting.getFrom());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setTo(meeting.getTo());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setContacts(meeting.getContacts());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setLocation(meeting.getLocation());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Title} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code OptionalDescription} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setDescription(new OptionalDescription(description));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code From} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withFrom(String from) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setFrom(new From(from));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code To} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withTo(String to) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setTo(new To(to));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code To} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setContacts(new Contacts(contacts));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code To} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditMeetingDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.setDescription(person.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public EditPersonDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.setDescription(new OptionalDescription(description));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "chrystalquek": 9,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Test\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Refine functional requirements\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"with business associates\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"12-12-2020 09:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_CONTACTS \u003d \"Alice Li, Bob Yu, Sarah Yeoh\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Singapore\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private OptionalDescription description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private From from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private To to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Contacts contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructor for Meeting builder, instantiate to use default attributes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d new OptionalDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d new From(DEFAULT_FROM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d new To(DEFAULT_TO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.contacts \u003d new Contacts(DEFAULT_CONTACTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Copies meeting attributes into builder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param meetingToCopy specified meeting to build."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d meetingToCopy.getTitle();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.description \u003d meetingToCopy.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d meetingToCopy.getFrom();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d meetingToCopy.getTo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.contacts \u003d meetingToCopy.getContacts();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.location \u003d meetingToCopy.getLocation();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Title} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Description} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Description} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.description \u003d new OptionalDescription(Optional.empty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code From} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withFrom(String from) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d new From(from);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code To} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withTo(String to) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d new To(to);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Contacts} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Contacts} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withContacts() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.contacts \u003d new Contacts(Optional.empty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Location} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Location} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withLocation() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.location \u003d new Location(Optional.empty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new Meeting(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 123,
      "claraadora": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns an switch command string for changing the {@code mode}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String getSwitchCommand(ModeEnum mode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return SwitchCommand.COMMAND_WORD + \" \" + mode.getArgument();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"stk\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"End user\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private OptionalDescription description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d Role.getRole(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d new OptionalDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d personToCopy.getRole();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d personToCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withPhone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.phone \u003d new Phone(Optional.empty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d new OptionalDescription(Optional.empty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Role} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withRole(String role) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d Role.getRole(role);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(name, phone, email, role, description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "chrystalquek": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sb.append(PREFIX_ROLE + person.getRole().getArgument() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        person.getPhone().value.ifPresent(phone -\u003e sb.append(PREFIX_PHONE + phone + \" \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        person.getDescription().value.ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION + description + \" \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value.orElse(\"\")).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(description.value.orElse(\"\")).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "chrystalquek": 9,
      "claraadora": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Index getMidIndex(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Index.fromOneBased(modelPerson.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Index getLastIndex(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Index.fromOneBased(modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Person getPerson(ModelPerson modelPerson, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "chrystalquek": 7,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeliverables.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.TimeEventComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A utility class containing a list of {@code Deliverable} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TypicalDeliverables {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Deliverable HOME_PAGE \u003d new DeliverableBuilder().withTitle(\"Build home page\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withMilestone(\"1.1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withDescription(\"Include company description\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withDeadline(\"12-05-2020 12:00\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            .withContacts(\"Alice, Bob\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withIsComplete(false)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final Deliverable NAVIGATION \u003d new DeliverableBuilder().withTitle(\"Implement navigation\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withMilestone(\"1.2\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withDescription(\"Include about us tab\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withDeadline(\"12-09-2020 10:00\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            .withContacts(\"Alyssa, Bobby Bobby\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withIsComplete(false)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Deliverable SORT_AND_FILTER \u003d new DeliverableBuilder().withTitle(\"Implement sort and filter\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withMilestone(\"1.2\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withDescription(\"For search box\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withDeadline(\"12-09-2020 14:00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            .withContacts(\"Cassandra, McClander\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .withIsComplete(false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private TypicalDeliverables() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns an {@code DeliverableBook} with all the typical deliverables."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static DeliverableBook getTypicalDeliverableBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DeliverableBook ab \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        for (Deliverable deliverable : getTypicalDeliverables()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            ab.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static List\u003cDeliverable\u003e getTypicalDeliverables() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ArrayList\u003cDeliverable\u003e deliverableArrayList \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(HOME_PAGE, NAVIGATION, SORT_AND_FILTER));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableArrayList.sort(new TimeEventComparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return deliverableArrayList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 34,
      "shadowezz": 22,
      "claraadora": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.util.TimeEventComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_C \u003d \"Final\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DESCRIPTION_C \u003d \"Discussing final features\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_C \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_C \u003d \"12-12-2020 10:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String CONTACTS_C \u003d \"Alice   Bob, Sarah  Goldman Jane, Jane Salmon\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String LOCATION_C \u003d \"Somewhere\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_D \u003d \"Mid v1.2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DESCRIPTION_D \u003d \"Discuss features\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_D \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_D \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String CONTACTS_D \u003d \"Alice, Sarah, Jane Salmon\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String LOCATION_D \u003d \"Somewhere\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_E \u003d \"Mid v1.3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_E \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_E \u003d \"12-12-2020 09:00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_A \u003d new MeetingBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_A)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withFrom(VALID_FROM_A)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withTo(VALID_TO_A)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withContacts(VALID_CONTACTS_A)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_B \u003d new MeetingBuilder().withTitle(VALID_TITLE_B)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_B)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withFrom(VALID_FROM_B)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withTo(VALID_TO_B)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withContacts(VALID_CONTACTS_B)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withLocation(VALID_LOCATION_B).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_C \u003d new MeetingBuilder().withTitle(TITLE_C)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withDescription(DESCRIPTION_C)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withFrom(FROM_C)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withTo(TO_C)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withContacts(CONTACTS_C)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withLocation(LOCATION_C).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_D \u003d new MeetingBuilder().withTitle(TITLE_D)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withDescription(DESCRIPTION_D)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withFrom(FROM_D)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withTo(TO_D)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withContacts(CONTACTS_D)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withLocation(LOCATION_D).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_E \u003d new MeetingBuilder().withTitle(TITLE_E)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withFrom(FROM_E)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withTo(TO_E)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withContacts()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            .withLocation().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static MeetingBook getTypicalMeetingBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        MeetingBook ab \u003d new MeetingBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        for (Meeting meeting : getTypicalMeeting()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            ab.addMeeting(meeting);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeeting() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ArrayList\u003cMeeting\u003e meetingArrayList \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(MEETING_A, MEETING_B, MEETING_C, MEETING_D, MEETING_E));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingArrayList.sort(new TimeEventComparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return meetingArrayList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "MerlinLim": 89,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(\"stk\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withDescription(\"End user\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(\"dev\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withDescription(\"Frontend engineer\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"heinz@example.com\").withRole(\"stk\").withDescription(\"Business analyst\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withRole(\"dev\").withDescription(\"Backend engineer\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"werner@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"lydia@example.com\").withRole(\"stk\").withDescription(\"Product designer, Kurz work partner\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"anna@example.com\").withRole(\"stk\").withDescription(\"Secondary user\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"stefan@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"hans@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withDescription(\"End user\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(VALID_ROLE_AMY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withDescription(\"Frontend engineer\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(VALID_ROLE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "chrystalquek": 26,
      "claraadora": 6
    }
  }
]
